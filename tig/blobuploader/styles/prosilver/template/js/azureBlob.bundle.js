/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@azure/core-lro/dist-esm/src/legacy/poller.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-lro/dist-esm/src/legacy/poller.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Poller: () => (/* binding */ Poller),\n/* harmony export */   PollerCancelledError: () => (/* binding */ PollerCancelledError),\n/* harmony export */   PollerStoppedError: () => (/* binding */ PollerStoppedError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nclass PollerStoppedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerStoppedError\";\n        Object.setPrototypeOf(this, PollerStoppedError.prototype);\n    }\n}\n/**\n * When the operation is cancelled, the poller will be rejected with an instance\n * of the PollerCancelledError.\n */\nclass PollerCancelledError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerCancelledError\";\n        Object.setPrototypeOf(this, PollerCancelledError.prototype);\n    }\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nclass Poller {\n    /**\n     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n     *\n     * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n     * operation has already been defined, at least its basic properties. The code below shows how to approach\n     * the definition of the constructor of a new custom poller.\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor({\n     *     // Anything you might need outside of the basics\n     *   }) {\n     *     let state: MyOperationState = {\n     *       privateProperty: private,\n     *       publicProperty: public,\n     *     };\n     *\n     *     const operation = {\n     *       state,\n     *       update,\n     *       cancel,\n     *       toString\n     *     }\n     *\n     *     // Sending the operation to the parent's constructor.\n     *     super(operation);\n     *\n     *     // You can assign more local properties here.\n     *   }\n     * }\n     * ```\n     *\n     * Inside of this constructor, a new promise is created. This will be used to\n     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n     * resolve and reject methods are also used internally to control when to resolve\n     * or reject anyone waiting for the poller to finish.\n     *\n     * The constructor of a custom implementation of a poller is where any serialized version of\n     * a previous poller's operation should be deserialized into the operation sent to the\n     * base constructor. For example:\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor(\n     *     baseOperation: string | undefined\n     *   ) {\n     *     let state: MyOperationState = {};\n     *     if (baseOperation) {\n     *       state = {\n     *         ...JSON.parse(baseOperation).state,\n     *         ...state\n     *       };\n     *     }\n     *     const operation = {\n     *       state,\n     *       // ...\n     *     }\n     *     super(operation);\n     *   }\n     * }\n     * ```\n     *\n     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n     */\n    constructor(operation) {\n        /** controls whether to throw an error if the operation failed or was canceled. */\n        this.resolveOnUnsuccessful = false;\n        this.stopped = true;\n        this.pollProgressCallbacks = [];\n        this.operation = operation;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n        // The above warning would get thrown if `poller.poll` is called, it returns an error,\n        // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n        this.promise.catch(() => {\n            /* intentionally blank */\n        });\n    }\n    /**\n     * Starts a loop that will break only if the poller is done\n     * or if the poller is stopped.\n     */\n    async startPolling(pollOptions = {}) {\n        if (this.stopped) {\n            this.stopped = false;\n        }\n        while (!this.isStopped() && !this.isDone()) {\n            await this.poll(pollOptions);\n            await this.delay();\n        }\n    }\n    /**\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    async pollOnce(options = {}) {\n        if (!this.isDone()) {\n            this.operation = await this.operation.update({\n                abortSignal: options.abortSignal,\n                fireProgress: this.fireProgress.bind(this),\n            });\n        }\n        this.processUpdatedState();\n    }\n    /**\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n    fireProgress(state) {\n        for (const callback of this.pollProgressCallbacks) {\n            callback(state);\n        }\n    }\n    /**\n     * Invokes the underlying operation's cancel method.\n     */\n    async cancelOnce(options = {}) {\n        this.operation = await this.operation.cancel(options);\n    }\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    poll(options = {}) {\n        if (!this.pollOncePromise) {\n            this.pollOncePromise = this.pollOnce(options);\n            const clearPollOncePromise = () => {\n                this.pollOncePromise = undefined;\n            };\n            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n        }\n        return this.pollOncePromise;\n    }\n    processUpdatedState() {\n        if (this.operation.state.error) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                this.reject(this.operation.state.error);\n                throw this.operation.state.error;\n            }\n        }\n        if (this.operation.state.isCancelled) {\n            this.stopped = true;\n            if (!this.resolveOnUnsuccessful) {\n                const error = new PollerCancelledError(\"Operation was canceled\");\n                this.reject(error);\n                throw error;\n            }\n        }\n        if (this.isDone() && this.resolve) {\n            // If the poller has finished polling, this means we now have a result.\n            // However, it can be the case that TResult is instantiated to void, so\n            // we are not expecting a result anyway. To assert that we might not\n            // have a result eventually after finishing polling, we cast the result\n            // to TResult.\n            this.resolve(this.getResult());\n        }\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n    async pollUntilDone(pollOptions = {}) {\n        if (this.stopped) {\n            this.startPolling(pollOptions).catch(this.reject);\n        }\n        // This is needed because the state could have been updated by\n        // `cancelOperation`, e.g. the operation is canceled or an error occurred.\n        this.processUpdatedState();\n        return this.promise;\n    }\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n    onProgress(callback) {\n        this.pollProgressCallbacks.push(callback);\n        return () => {\n            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n        };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n    isDone() {\n        const state = this.operation.state;\n        return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n    stopPolling() {\n        if (!this.stopped) {\n            this.stopped = true;\n            if (this.reject) {\n                this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n            }\n        }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n    isStopped() {\n        return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    cancelOperation(options = {}) {\n        if (!this.cancelPromise) {\n            this.cancelPromise = this.cancelOnce(options);\n        }\n        else if (options.abortSignal) {\n            throw new Error(\"A cancel request is currently pending\");\n        }\n        return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n    getOperationState() {\n        return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n    getResult() {\n        const state = this.operation.state;\n        return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n    toString() {\n        return this.operation.toString();\n    }\n}\n//# sourceMappingURL=poller.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-lro/dist-esm/src/legacy/poller.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BatchResponseParser: () => (/* binding */ BatchResponseParser)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-http-compat */ \"./node_modules/@azure/core-http-compat/dist/browser/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BatchUtils */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./log */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\nconst HTTP_HEADER_DELIMITER = \": \";\nconst SPACE_DELIMITER = \" \";\nconst NOT_FOUND = -1;\n/**\n * Util class for parsing batch response.\n */\nclass BatchResponseParser {\n    constructor(batchResponse, subRequests) {\n        if (!batchResponse || !batchResponse.contentType) {\n            // In special case(reported), server may return invalid content-type which could not be parsed.\n            throw new RangeError(\"batchResponse is malformed or doesn't contain valid content-type.\");\n        }\n        if (!subRequests || subRequests.size === 0) {\n            // This should be prevent during coding.\n            throw new RangeError(\"Invalid state: subRequests is not provided or size is 0.\");\n        }\n        this.batchResponse = batchResponse;\n        this.subRequests = subRequests;\n        this.responseBatchBoundary = this.batchResponse.contentType.split(\"=\")[1];\n        this.perResponsePrefix = `--${this.responseBatchBoundary}${_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_LINE_ENDING}`;\n        this.batchResponseEnding = `--${this.responseBatchBoundary}--`;\n    }\n    // For example of response, please refer to https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#response\n    async parseBatchResponse() {\n        // When logic reach here, suppose batch request has already succeeded with 202, so we can further parse\n        // sub request's response.\n        if (this.batchResponse._response.status !== _utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTPURLConnection.HTTP_ACCEPTED) {\n            throw new Error(`Invalid state: batch request failed with status: '${this.batchResponse._response.status}'.`);\n        }\n        const responseBodyAsText = await (0,_BatchUtils__WEBPACK_IMPORTED_MODULE_3__.getBodyAsText)(this.batchResponse);\n        const subResponses = responseBodyAsText\n            .split(this.batchResponseEnding)[0] // string after ending is useless\n            .split(this.perResponsePrefix)\n            .slice(1); // string before first response boundary is useless\n        const subResponseCount = subResponses.length;\n        // Defensive coding in case of potential error parsing.\n        // Note: subResponseCount == 1 is special case where sub request is invalid.\n        // We try to prevent such cases through early validation, e.g. validate sub request count >= 1.\n        // While in unexpected sub request invalid case, we allow sub response to be parsed and return to user.\n        if (subResponseCount !== this.subRequests.size && subResponseCount !== 1) {\n            throw new Error(\"Invalid state: sub responses' count is not equal to sub requests' count.\");\n        }\n        const deserializedSubResponses = new Array(subResponseCount);\n        let subResponsesSucceededCount = 0;\n        let subResponsesFailedCount = 0;\n        // Parse sub subResponses.\n        for (let index = 0; index < subResponseCount; index++) {\n            const subResponse = subResponses[index];\n            const deserializedSubResponse = {};\n            deserializedSubResponse.headers = (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_1__.toHttpHeadersLike)((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)());\n            const responseLines = subResponse.split(`${_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_LINE_ENDING}`);\n            let subRespHeaderStartFound = false;\n            let subRespHeaderEndFound = false;\n            let subRespFailed = false;\n            let contentId = NOT_FOUND;\n            for (const responseLine of responseLines) {\n                if (!subRespHeaderStartFound) {\n                    // Convention line to indicate content ID\n                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.CONTENT_ID)) {\n                        contentId = parseInt(responseLine.split(HTTP_HEADER_DELIMITER)[1]);\n                    }\n                    // Http version line with status code indicates the start of sub request's response.\n                    // Example: HTTP/1.1 202 Accepted\n                    if (responseLine.startsWith(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HTTP_VERSION_1_1)) {\n                        subRespHeaderStartFound = true;\n                        const tokens = responseLine.split(SPACE_DELIMITER);\n                        deserializedSubResponse.status = parseInt(tokens[1]);\n                        deserializedSubResponse.statusMessage = tokens.slice(2).join(SPACE_DELIMITER);\n                    }\n                    continue; // Skip convention headers not specifically for sub request i.e. Content-Type: application/http and Content-ID: *\n                }\n                if (responseLine.trim() === \"\") {\n                    // Sub response's header start line already found, and the first empty line indicates header end line found.\n                    if (!subRespHeaderEndFound) {\n                        subRespHeaderEndFound = true;\n                    }\n                    continue; // Skip empty line\n                }\n                // Note: when code reach here, it indicates subRespHeaderStartFound == true\n                if (!subRespHeaderEndFound) {\n                    if (responseLine.indexOf(HTTP_HEADER_DELIMITER) === -1) {\n                        // Defensive coding to prevent from missing valuable lines.\n                        throw new Error(`Invalid state: find non-empty line '${responseLine}' without HTTP header delimiter '${HTTP_HEADER_DELIMITER}'.`);\n                    }\n                    // Parse headers of sub response.\n                    const tokens = responseLine.split(HTTP_HEADER_DELIMITER);\n                    deserializedSubResponse.headers.set(tokens[0], tokens[1]);\n                    if (tokens[0] === _utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.X_MS_ERROR_CODE) {\n                        deserializedSubResponse.errorCode = tokens[1];\n                        subRespFailed = true;\n                    }\n                }\n                else {\n                    // Assemble body of sub response.\n                    if (!deserializedSubResponse.bodyAsText) {\n                        deserializedSubResponse.bodyAsText = \"\";\n                    }\n                    deserializedSubResponse.bodyAsText += responseLine;\n                }\n            } // Inner for end\n            // The response will contain the Content-ID header for each corresponding subrequest response to use for tracking.\n            // The Content-IDs are set to a valid index in the subrequests we sent. In the status code 202 path, we could expect it\n            // to be 1-1 mapping from the [0, subRequests.size) to the Content-IDs returned. If not, we simply don't return that\n            // unexpected subResponse in the parsed reponse and we can always look it up in the raw response for debugging purpose.\n            if (contentId !== NOT_FOUND &&\n                Number.isInteger(contentId) &&\n                contentId >= 0 &&\n                contentId < this.subRequests.size &&\n                deserializedSubResponses[contentId] === undefined) {\n                deserializedSubResponse._request = this.subRequests.get(contentId);\n                deserializedSubResponses[contentId] = deserializedSubResponse;\n            }\n            else {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.error(`subResponses[${index}] is dropped as the Content-ID is not found or invalid, Content-ID: ${contentId}`);\n            }\n            if (subRespFailed) {\n                subResponsesFailedCount++;\n            }\n            else {\n                subResponsesSucceededCount++;\n            }\n        }\n        return {\n            subResponses: deserializedSubResponses,\n            subResponsesSucceededCount: subResponsesSucceededCount,\n            subResponsesFailedCount: subResponsesFailedCount,\n        };\n    }\n}\n//# sourceMappingURL=BatchResponseParser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBodyAsText: () => (/* binding */ getBodyAsText),\n/* harmony export */   utf8ByteLength: () => (/* binding */ utf8ByteLength)\n/* harmony export */ });\n/* harmony import */ var _utils_utils_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils.browser */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nasync function getBodyAsText(batchResponse) {\n    const blob = (await batchResponse.blobBody);\n    return (0,_utils_utils_browser__WEBPACK_IMPORTED_MODULE_0__.blobToString)(blob);\n}\nfunction utf8ByteLength(str) {\n    return new Blob([str]).size;\n}\n//# sourceMappingURL=BatchUtils.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBatch: () => (/* binding */ BlobBatch)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ \"./node_modules/@azure/core-auth/dist/browser/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Clients */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Mutex */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Pipeline */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/core-xml */ \"./node_modules/@azure/core-xml/dist/browser/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tracing */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicyV2 */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobBatch represents an aggregated set of operations on blobs.\n * Currently, only `delete` and `setAccessTier` are supported.\n */\nclass BlobBatch {\n    constructor() {\n        this.batch = \"batch\";\n        this.batchRequest = new InnerBatchRequest();\n    }\n    /**\n     * Get the value of Content-Type for a batch request.\n     * The value must be multipart/mixed with a batch boundary.\n     * Example: multipart/mixed; boundary=batch_a81786c8-e301-4e42-a729-a32ca24ae252\n     */\n    getMultiPartContentType() {\n        return this.batchRequest.getMultipartContentType();\n    }\n    /**\n     * Get assembled HTTP request body for sub requests.\n     */\n    getHttpRequestBody() {\n        return this.batchRequest.getHttpRequestBody();\n    }\n    /**\n     * Get sub requests that are added into the batch request.\n     */\n    getSubRequests() {\n        return this.batchRequest.getSubRequests();\n    }\n    async addSubRequestInternal(subRequest, assembleSubRequestFunc) {\n        await _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__.Mutex.lock(this.batch);\n        try {\n            this.batchRequest.preAddSubRequest(subRequest);\n            await assembleSubRequestFunc();\n            this.batchRequest.postAddSubRequest(subRequest);\n        }\n        finally {\n            await _utils_Mutex__WEBPACK_IMPORTED_MODULE_5__.Mutex.unlock(this.batch);\n        }\n    }\n    setBatchType(batchType) {\n        if (!this.batchType) {\n            this.batchType = batchType;\n        }\n        if (this.batchType !== batchType) {\n            throw new RangeError(`BlobBatch only supports one operation type per batch and it already is being used for ${this.batchType} operations.`);\n        }\n    }\n    async deleteBlob(urlOrBlobClient, credentialOrOptions, options) {\n        let url;\n        let credential;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode && credentialOrOptions instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) ||\n                credentialOrOptions instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n                (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrOptions))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrOptions;\n        }\n        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            options = credentialOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BatchDeleteRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"delete\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient(url, this.batchRequest.createPipeline(credential)).delete(updatedOptions);\n            });\n        });\n    }\n    async setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options) {\n        let url;\n        let credential;\n        let tier;\n        if (typeof urlOrBlobClient === \"string\" &&\n            ((_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode && credentialOrTier instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) ||\n                credentialOrTier instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n                (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrTier))) {\n            // First overload\n            url = urlOrBlobClient;\n            credential = credentialOrTier;\n            tier = tierOrOptions;\n        }\n        else if (urlOrBlobClient instanceof _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient) {\n            // Second overload\n            url = urlOrBlobClient.url;\n            credential = urlOrBlobClient.credential;\n            tier = credentialOrTier;\n            options = tierOrOptions;\n        }\n        else {\n            throw new RangeError(\"Invalid arguments. Either url and credential, or BlobClient need be provided.\");\n        }\n        if (!options) {\n            options = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BatchSetTierRequest-addSubRequest\", options, async (updatedOptions) => {\n            this.setBatchType(\"setAccessTier\");\n            await this.addSubRequestInternal({\n                url: url,\n                credential: credential,\n            }, async () => {\n                await new _Clients__WEBPACK_IMPORTED_MODULE_8__.BlobClient(url, this.batchRequest.createPipeline(credential)).setAccessTier(tier, updatedOptions);\n            });\n        });\n    }\n}\n/**\n * Inner batch request class which is responsible for assembling and serializing sub requests.\n * See https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch#request-body for how requests are assembled.\n */\nclass InnerBatchRequest {\n    constructor() {\n        this.operationCount = 0;\n        this.body = \"\";\n        const tempGuid = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        // batch_{batchid}\n        this.boundary = `batch_${tempGuid}`;\n        // --batch_{batchid}\n        // Content-Type: application/http\n        // Content-Transfer-Encoding: binary\n        this.subRequestPrefix = `--${this.boundary}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_TYPE}: application/http${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_TRANSFER_ENCODING}: binary`;\n        // multipart/mixed; boundary=batch_{batchid}\n        this.multipartContentType = `multipart/mixed; boundary=${this.boundary}`;\n        // --batch_{batchid}--\n        this.batchRequestEnding = `--${this.boundary}--`;\n        this.subRequests = new Map();\n    }\n    /**\n     * Create pipeline to assemble sub requests. The idea here is to use existing\n     * credential and serialization/deserialization components, with additional policies to\n     * filter unnecessary headers, assemble sub requests into request's body\n     * and intercept request from going to wire.\n     * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n     */\n    createPipeline(credential) {\n        const corePipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createEmptyPipeline)();\n        corePipeline.addPolicy((0,_azure_core_client__WEBPACK_IMPORTED_MODULE_4__.serializationPolicy)({\n            stringifyXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.stringifyXML,\n            serializerOptions: {\n                xml: {\n                    xmlCharKey: \"#\",\n                },\n            },\n        }), { phase: \"Serialize\" });\n        // Use batch header filter policy to exclude unnecessary headers\n        corePipeline.addPolicy(batchHeaderFilterPolicy());\n        // Use batch assemble policy to assemble request and intercept request from going to wire\n        corePipeline.addPolicy(batchRequestAssemblePolicy(this), { afterPhase: \"Sign\" });\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credential)) {\n            corePipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.bearerTokenAuthenticationPolicy)({\n                credential,\n                scopes: _utils_constants__WEBPACK_IMPORTED_MODULE_10__.StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: _azure_core_client__WEBPACK_IMPORTED_MODULE_4__.authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_6__.StorageSharedKeyCredential) {\n            corePipeline.addPolicy((0,_policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_11__.storageSharedKeyCredentialPolicy)({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        const pipeline = new _Pipeline__WEBPACK_IMPORTED_MODULE_12__.Pipeline([]);\n        // attach the v2 pipeline to this one\n        pipeline._credential = credential;\n        pipeline._corePipeline = corePipeline;\n        return pipeline;\n    }\n    appendSubRequestToBody(request) {\n        // Start to assemble sub request\n        this.body += [\n            this.subRequestPrefix, // sub request constant prefix\n            `${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.CONTENT_ID}: ${this.operationCount}`, // sub request's content ID\n            \"\", // empty line after sub request's content ID\n            `${request.method.toString()} ${(0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.getURLPathAndQuery)(request.url)} ${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_VERSION_1_1}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`, // sub request start line with method\n        ].join(_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING);\n        for (const [name, value] of request.headers) {\n            this.body += `${name}: ${value}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`;\n        }\n        this.body += _utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING; // sub request's headers need be ending with an empty line\n        // No body to assemble for current batch request support\n        // End to assemble sub request\n    }\n    preAddSubRequest(subRequest) {\n        if (this.operationCount >= _utils_constants__WEBPACK_IMPORTED_MODULE_10__.BATCH_MAX_REQUEST) {\n            throw new RangeError(`Cannot exceed ${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.BATCH_MAX_REQUEST} sub requests in a single batch`);\n        }\n        // Fast fail if url for sub request is invalid\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.getURLPath)(subRequest.url);\n        if (!path || path === \"\") {\n            throw new RangeError(`Invalid url for sub request: '${subRequest.url}'`);\n        }\n    }\n    postAddSubRequest(subRequest) {\n        this.subRequests.set(this.operationCount, subRequest);\n        this.operationCount++;\n    }\n    // Return the http request body with assembling the ending line to the sub request body.\n    getHttpRequestBody() {\n        return `${this.body}${this.batchRequestEnding}${_utils_constants__WEBPACK_IMPORTED_MODULE_10__.HTTP_LINE_ENDING}`;\n    }\n    getMultipartContentType() {\n        return this.multipartContentType;\n    }\n    getSubRequests() {\n        return this.subRequests;\n    }\n}\nfunction batchRequestAssemblePolicy(batchRequest) {\n    return {\n        name: \"batchRequestAssemblePolicy\",\n        async sendRequest(request) {\n            batchRequest.appendSubRequestToBody(request);\n            return {\n                request,\n                status: 200,\n                headers: (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)(),\n            };\n        },\n    };\n}\nfunction batchHeaderFilterPolicy() {\n    return {\n        name: \"batchHeaderFilterPolicy\",\n        async sendRequest(request, next) {\n            let xMsHeaderName = \"\";\n            for (const [name] of request.headers) {\n                if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_13__.iEqual)(name, _utils_constants__WEBPACK_IMPORTED_MODULE_10__.HeaderConstants.X_MS_VERSION)) {\n                    xMsHeaderName = name;\n                }\n            }\n            if (xMsHeaderName !== \"\") {\n                request.headers.delete(xMsHeaderName); // The subrequests should not have the x-ms-version header.\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=BlobBatch.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBatchClient: () => (/* binding */ BlobBatchClient)\n/* harmony export */ });\n/* harmony import */ var _BatchResponseParser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./BatchResponseParser */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchResponseParser.js\");\n/* harmony import */ var _BatchUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BatchUtils */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BatchUtils.browser.js\");\n/* harmony import */ var _BlobBatch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BlobBatch */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatch.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/tracing */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _StorageContextClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./StorageContextClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Pipeline */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nclass BlobBatchClient {\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.isPipelineLike)(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if (!credentialOrPipeline) {\n            // no credential provided\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_1__.AnonymousCredential(), options);\n        }\n        else {\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.newPipeline)(credentialOrPipeline, options);\n        }\n        const storageClientContext = new _StorageContextClient__WEBPACK_IMPORTED_MODULE_2__.StorageContextClient(url, (0,_Pipeline__WEBPACK_IMPORTED_MODULE_0__.getCoreClientOptions)(pipeline));\n        const path = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.getURLPath)(url);\n        if (path && path !== \"/\") {\n            // Container scoped.\n            this.serviceOrContainerContext = storageClientContext.container;\n        }\n        else {\n            this.serviceOrContainerContext = storageClientContext.service;\n        }\n    }\n    /**\n     * Creates a {@link BlobBatch}.\n     * A BlobBatch represents an aggregated set of operations on blobs.\n     */\n    createBatch() {\n        return new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n    }\n    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n            }\n            else {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new _BlobBatch__WEBPACK_IMPORTED_MODULE_4__.BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n            }\n            else {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n    async submitBatch(batchRequest, options = {}) {\n        if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n            throw new RangeError(\"Batch request should contain one or more sub requests.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_5__.tracingClient.withSpan(\"BlobBatchClient-submitBatch\", options, async (updatedOptions) => {\n            const batchRequestBody = batchRequest.getHttpRequestBody();\n            // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n            const rawBatchResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this.serviceOrContainerContext.submitBatch((0,_BatchUtils__WEBPACK_IMPORTED_MODULE_6__.utf8ByteLength)(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign({}, updatedOptions)));\n            // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n            const batchResponseParser = new _BatchResponseParser__WEBPACK_IMPORTED_MODULE_7__.BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n            const responseSummary = await batchResponseParser.parseBatchResponse();\n            const res = {\n                _response: rawBatchResponse._response,\n                contentType: rawBatchResponse.contentType,\n                errorCode: rawBatchResponse.errorCode,\n                requestId: rawBatchResponse.requestId,\n                clientRequestId: rawBatchResponse.clientRequestId,\n                version: rawBatchResponse.version,\n                subResponses: responseSummary.subResponses,\n                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                subResponsesFailedCount: responseSummary.subResponsesFailedCount,\n            };\n            return res;\n        });\n    }\n}\n//# sourceMappingURL=BlobBatchClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobDownloadResponse: () => (/* binding */ BlobDownloadResponse)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// This file is used as a shim of \"BlobDownloadResponse\" for some browser bundlers\n// when trying to bundle \"BlobDownloadResponse\"\n// \"BlobDownloadResponse\" class is only available in Node.js runtime\nconst BlobDownloadResponse = 1;\n//# sourceMappingURL=BlobDownloadResponse.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobLeaseClient: () => (/* binding */ BlobLeaseClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/tracing */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nclass BlobLeaseClient {\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     */\n    get leaseId() {\n        return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Creates an instance of BlobLeaseClient.\n     * @param client - The client to make the lease operation requests.\n     * @param leaseId - Initial proposed lease id.\n     */\n    constructor(client, leaseId) {\n        const clientContext = client.storageClientContext;\n        this._url = client.url;\n        if (client.name === undefined) {\n            this._isContainer = true;\n            this._containerOrBlobOperation = clientContext.container;\n        }\n        else {\n            this._isContainer = false;\n            this._containerOrBlobOperation = clientContext.blob;\n        }\n        if (!leaseId) {\n            leaseId = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n        }\n        this._leaseId = leaseId;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n    async acquireLease(duration, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-acquireLease\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.acquireLease({\n                abortSignal: options.abortSignal,\n                duration,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                proposedLeaseId: this._leaseId,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n    async changeLease(proposedLeaseId, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-changeLease\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            this._leaseId = proposedLeaseId;\n            return response;\n        });\n    }\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n    async releaseLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-releaseLease\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.releaseLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n    async renewLease(options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-renewLease\", options, async (updatedOptions) => {\n            var _a;\n            return this._containerOrBlobOperation.renewLease(this._leaseId, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            });\n        });\n    }\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n    async breakLease(breakPeriod, options = {}) {\n        var _a, _b, _c, _d, _e;\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== _utils_constants__WEBPACK_IMPORTED_MODULE_1__.ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_2__.tracingClient.withSpan(\"BlobLeaseClient-breakLease\", options, async (updatedOptions) => {\n            var _a;\n            const operationOptions = {\n                abortSignal: options.abortSignal,\n                breakPeriod,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            };\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_3__.assertResponse)(await this._containerOrBlobOperation.breakLease(operationOptions));\n        });\n    }\n}\n//# sourceMappingURL=BlobLeaseClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobQueryResponse: () => (/* binding */ BlobQueryResponse)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN BROWSER RUNTIME.\n *\n * BlobQueryResponse implements BlobDownloadResponseModel interface, and in browser runtime it will\n * parse avor data returned by blob query.\n */\nclass BlobQueryResponse {\n    /**\n     * Indicates that the service supports\n     * requests for partial file content.\n     *\n     * @readonly\n     */\n    get acceptRanges() {\n        return this.originalResponse.acceptRanges;\n    }\n    /**\n     * Returns if it was previously specified\n     * for the file.\n     *\n     * @readonly\n     */\n    get cacheControl() {\n        return this.originalResponse.cacheControl;\n    }\n    /**\n     * Returns the value that was specified\n     * for the 'x-ms-content-disposition' header and specifies how to process the\n     * response.\n     *\n     * @readonly\n     */\n    get contentDisposition() {\n        return this.originalResponse.contentDisposition;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Encoding request header.\n     *\n     * @readonly\n     */\n    get contentEncoding() {\n        return this.originalResponse.contentEncoding;\n    }\n    /**\n     * Returns the value that was specified\n     * for the Content-Language request header.\n     *\n     * @readonly\n     */\n    get contentLanguage() {\n        return this.originalResponse.contentLanguage;\n    }\n    /**\n     * The current sequence number for a\n     * page blob. This header is not returned for block blobs or append blobs.\n     *\n     * @readonly\n     */\n    get blobSequenceNumber() {\n        return this.originalResponse.blobSequenceNumber;\n    }\n    /**\n     * The blob's type. Possible values include:\n     * 'BlockBlob', 'PageBlob', 'AppendBlob'.\n     *\n     * @readonly\n     */\n    get blobType() {\n        return this.originalResponse.blobType;\n    }\n    /**\n     * The number of bytes present in the\n     * response body.\n     *\n     * @readonly\n     */\n    get contentLength() {\n        return this.originalResponse.contentLength;\n    }\n    /**\n     * If the file has an MD5 hash and the\n     * request is to read the full file, this response header is returned so that\n     * the client can check for message content integrity. If the request is to\n     * read a specified range and the 'x-ms-range-get-content-md5' is set to\n     * true, then the request returns an MD5 hash for the range, as long as the\n     * range size is less than or equal to 4 MB. If neither of these sets of\n     * conditions is true, then no value is returned for the 'Content-MD5'\n     * header.\n     *\n     * @readonly\n     */\n    get contentMD5() {\n        return this.originalResponse.contentMD5;\n    }\n    /**\n     * Indicates the range of bytes returned if\n     * the client requested a subset of the file by setting the Range request\n     * header.\n     *\n     * @readonly\n     */\n    get contentRange() {\n        return this.originalResponse.contentRange;\n    }\n    /**\n     * The content type specified for the file.\n     * The default content type is 'application/octet-stream'\n     *\n     * @readonly\n     */\n    get contentType() {\n        return this.originalResponse.contentType;\n    }\n    /**\n     * Conclusion time of the last attempted\n     * Copy File operation where this file was the destination file. This value\n     * can specify the time of a completed, aborted, or failed copy attempt.\n     *\n     * @readonly\n     */\n    get copyCompletedOn() {\n        return undefined;\n    }\n    /**\n     * String identifier for the last attempted Copy\n     * File operation where this file was the destination file.\n     *\n     * @readonly\n     */\n    get copyId() {\n        return this.originalResponse.copyId;\n    }\n    /**\n     * Contains the number of bytes copied and\n     * the total bytes in the source in the last attempted Copy File operation\n     * where this file was the destination file. Can show between 0 and\n     * Content-Length bytes copied.\n     *\n     * @readonly\n     */\n    get copyProgress() {\n        return this.originalResponse.copyProgress;\n    }\n    /**\n     * URL up to 2KB in length that specifies the\n     * source file used in the last attempted Copy File operation where this file\n     * was the destination file.\n     *\n     * @readonly\n     */\n    get copySource() {\n        return this.originalResponse.copySource;\n    }\n    /**\n     * State of the copy operation\n     * identified by 'x-ms-copy-id'. Possible values include: 'pending',\n     * 'success', 'aborted', 'failed'\n     *\n     * @readonly\n     */\n    get copyStatus() {\n        return this.originalResponse.copyStatus;\n    }\n    /**\n     * Only appears when\n     * x-ms-copy-status is failed or pending. Describes cause of fatal or\n     * non-fatal copy operation failure.\n     *\n     * @readonly\n     */\n    get copyStatusDescription() {\n        return this.originalResponse.copyStatusDescription;\n    }\n    /**\n     * When a blob is leased,\n     * specifies whether the lease is of infinite or fixed duration. Possible\n     * values include: 'infinite', 'fixed'.\n     *\n     * @readonly\n     */\n    get leaseDuration() {\n        return this.originalResponse.leaseDuration;\n    }\n    /**\n     * Lease state of the blob. Possible\n     * values include: 'available', 'leased', 'expired', 'breaking', 'broken'.\n     *\n     * @readonly\n     */\n    get leaseState() {\n        return this.originalResponse.leaseState;\n    }\n    /**\n     * The current lease status of the\n     * blob. Possible values include: 'locked', 'unlocked'.\n     *\n     * @readonly\n     */\n    get leaseStatus() {\n        return this.originalResponse.leaseStatus;\n    }\n    /**\n     * A UTC date/time value generated by the service that\n     * indicates the time at which the response was initiated.\n     *\n     * @readonly\n     */\n    get date() {\n        return this.originalResponse.date;\n    }\n    /**\n     * The number of committed blocks\n     * present in the blob. This header is returned only for append blobs.\n     *\n     * @readonly\n     */\n    get blobCommittedBlockCount() {\n        return this.originalResponse.blobCommittedBlockCount;\n    }\n    /**\n     * The ETag contains a value that you can use to\n     * perform operations conditionally, in quotes.\n     *\n     * @readonly\n     */\n    get etag() {\n        return this.originalResponse.etag;\n    }\n    /**\n     * The error code.\n     *\n     * @readonly\n     */\n    get errorCode() {\n        return this.originalResponse.errorCode;\n    }\n    /**\n     * The value of this header is set to\n     * true if the file data and application metadata are completely encrypted\n     * using the specified algorithm. Otherwise, the value is set to false (when\n     * the file is unencrypted, or if only parts of the file/application metadata\n     * are encrypted).\n     *\n     * @readonly\n     */\n    get isServerEncrypted() {\n        return this.originalResponse.isServerEncrypted;\n    }\n    /**\n     * If the blob has a MD5 hash, and if\n     * request contains range header (Range or x-ms-range), this response header\n     * is returned with the value of the whole blob's MD5 value. This value may\n     * or may not be equal to the value returned in Content-MD5 header, with the\n     * latter calculated from the requested range.\n     *\n     * @readonly\n     */\n    get blobContentMD5() {\n        return this.originalResponse.blobContentMD5;\n    }\n    /**\n     * Returns the date and time the file was last\n     * modified. Any operation that modifies the file or its properties updates\n     * the last modified time.\n     *\n     * @readonly\n     */\n    get lastModified() {\n        return this.originalResponse.lastModified;\n    }\n    /**\n     * A name-value pair\n     * to associate with a file storage object.\n     *\n     * @readonly\n     */\n    get metadata() {\n        return this.originalResponse.metadata;\n    }\n    /**\n     * This header uniquely identifies the request\n     * that was made and can be used for troubleshooting the request.\n     *\n     * @readonly\n     */\n    get requestId() {\n        return this.originalResponse.requestId;\n    }\n    /**\n     * If a client request id header is sent in the request, this header will be present in the\n     * response with the same value.\n     *\n     * @readonly\n     */\n    get clientRequestId() {\n        return this.originalResponse.clientRequestId;\n    }\n    /**\n     * Indicates the version of the File service used\n     * to execute the request.\n     *\n     * @readonly\n     */\n    get version() {\n        return this.originalResponse.version;\n    }\n    /**\n     * The SHA-256 hash of the encryption key used to encrypt the blob. This value is only returned\n     * when the blob was encrypted with a customer-provided key.\n     *\n     * @readonly\n     */\n    get encryptionKeySha256() {\n        return this.originalResponse.encryptionKeySha256;\n    }\n    /**\n     * If the request is to read a specified range and the x-ms-range-get-content-crc64 is set to\n     * true, then the request returns a crc64 for the range, as long as the range size is less than\n     * or equal to 4 MB. If both x-ms-range-get-content-crc64 & x-ms-range-get-content-md5 is\n     * specified in the same request, it will fail with 400(Bad Request)\n     */\n    get contentCrc64() {\n        return this.originalResponse.contentCrc64;\n    }\n    /**\n     * The response body as a browser Blob.\n     * Always undefined in node.js.\n     *\n     * @readonly\n     */\n    get blobBody() {\n        throw Error(`Quick query in browser is not supported yet.`);\n    }\n    /**\n     * The response body as a node.js Readable stream.\n     * Always undefined in the browser.\n     *\n     * @readonly\n     */\n    get readableStreamBody() {\n        return undefined;\n    }\n    /**\n     * The HTTP response.\n     */\n    get _response() {\n        return this.originalResponse._response;\n    }\n    /**\n     * Creates an instance of BlobQueryResponse.\n     *\n     * @param originalResponse -\n     * @param options -\n     */\n    constructor(originalResponse, _options = {}) {\n        this.originalResponse = originalResponse;\n    }\n}\n//# sourceMappingURL=BlobQueryResponse.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobServiceClient: () => (/* binding */ BlobServiceClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-auth */ \"./node_modules/@azure/core-auth/dist/browser/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Pipeline */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _ContainerClient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ContainerClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/tracing */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./BlobBatchClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/AccountSASPermissions */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sas/AccountSASSignatureValues */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js\");\n/* harmony import */ var _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./sas/AccountSASServices */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobServiceClient represents a Client to the Azure Storage Blob service allowing you\n * to manipulate blob containers.\n */\nclass BlobServiceClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     *\n     * Creates an instance of BlobServiceClient from connection string.\n     *\n     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n     *                                  Account connection string example -\n     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n     *                                  SAS connection string example -\n     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n     * @param options - Optional. Options to configure the HTTP pipeline.\n     */\n    static fromConnectionString(connectionString, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.extractConnectionStringParts)(connectionString);\n        if (extractedCreds.kind === \"AccountConnString\") {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                if (!options.proxyOptions) {\n                    options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                }\n                const pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(sharedKeyCredential, options);\n                return new BlobServiceClient(extractedCreds.url, pipeline);\n            }\n            else {\n                throw new Error(\"Account connection string is only supported in Node.js environment\");\n            }\n        }\n        else if (extractedCreds.kind === \"SASConnString\") {\n            const pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential(), options);\n            return new BlobServiceClient(extractedCreds.url + \"?\" + extractedCreds.accountSas, pipeline);\n        }\n        else {\n            throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n        }\n    }\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.isPipelineLike)(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipeline instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipeline instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_0__.isTokenCredential)(credentialOrPipeline)) {\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(credentialOrPipeline, options);\n        }\n        else {\n            // The second parameter is undefined. Use anonymous credential\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_6__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_7__.AnonymousCredential(), options);\n        }\n        super(url, pipeline);\n        this.serviceContext = this.storageClientContext.service;\n    }\n    /**\n     * Creates a {@link ContainerClient} object\n     *\n     * @param containerName - A container name\n     * @returns A new ContainerClient object for the given container name.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * ```\n     */\n    getContainerClient(containerName) {\n        return new _ContainerClient__WEBPACK_IMPORTED_MODULE_8__.ContainerClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.appendToURLPath)(this.url, encodeURIComponent(containerName)), this.pipeline);\n    }\n    /**\n     * Create a Blob container. @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     *\n     * @param containerName - Name of the container to create.\n     * @param options - Options to configure Container Create operation.\n     * @returns Container creation response and the corresponding container client.\n     */\n    async createContainer(containerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-createContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            const containerCreateResponse = await containerClient.create(updatedOptions);\n            return {\n                containerClient,\n                containerCreateResponse,\n            };\n        });\n    }\n    /**\n     * Deletes a Blob container.\n     *\n     * @param containerName - Name of the container to delete.\n     * @param options - Options to configure Container Delete operation.\n     * @returns Container deletion response.\n     */\n    async deleteContainer(containerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-deleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(containerName);\n            return containerClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * Restore a previously deleted Blob container.\n     * This API is only functional if Container Soft Delete is enabled for the storage account associated with the container.\n     *\n     * @param deletedContainerName - Name of the previously deleted container.\n     * @param deletedContainerVersion - Version of the previously deleted container, used to uniquely identify the deleted container.\n     * @param options - Options to configure Container Restore operation.\n     * @returns Container deletion response.\n     */\n    async undeleteContainer(deletedContainerName, deletedContainerVersion, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-undeleteContainer\", options, async (updatedOptions) => {\n            const containerClient = this.getContainerClient(options.destinationContainerName || deletedContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerUndeleteResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await containerContext.restore({\n                deletedContainerName,\n                deletedContainerVersion,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return { containerClient, containerUndeleteResponse };\n        });\n    }\n    /**\n     * Rename an existing Blob Container.\n     *\n     * @param sourceContainerName - The name of the source container.\n     * @param destinationContainerName - The new name of the container.\n     * @param options - Options to configure Container Rename operation.\n     */\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n    async renameContainer(sourceContainerName, destinationContainerName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-renameContainer\", options, async (updatedOptions) => {\n            var _a;\n            const containerClient = this.getContainerClient(destinationContainerName);\n            // Hack to access a protected member.\n            const containerContext = containerClient[\"storageClientContext\"].container;\n            const containerRenameResponse = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await containerContext.rename(sourceContainerName, Object.assign(Object.assign({}, updatedOptions), { sourceLeaseId: (_a = options.sourceCondition) === null || _a === void 0 ? void 0 : _a.leaseId })));\n            return { containerClient, containerRenameResponse };\n        });\n    }\n    /**\n     * Gets the properties of a storage account’s Blob service, including properties\n     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * @param options - Options to the Service Get Properties operation.\n     * @returns Response data for the Service Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getProperties({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets properties for a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n     *\n     * @param properties -\n     * @param options - Options to the Service Set Properties operation.\n     * @returns Response data for the Service Set Properties operation.\n     */\n    async setProperties(properties, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-setProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.setProperties(properties, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only\n     * available on the secondary location endpoint when read-access geo-redundant\n     * replication is enabled for the storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-stats\n     *\n     * @param options - Options to the Service Get Statistics operation.\n     * @returns Response data for the Service Get Statistics operation.\n     */\n    async getStatistics(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getStatistics\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getStatistics({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns a list of the containers under the specified account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to the Service List Container Segment operation.\n     * @returns Response data for the Service List Container Segment operation.\n     */\n    async listContainersSegment(marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-listContainersSegment\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.listContainersSegment(Object.assign(Object.assign({ abortSignal: options.abortSignal, marker }, options), { include: typeof options.include === \"string\" ? [options.include] : options.include, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags\n     * match a given search expression. Filter blobs searches across all containers within a\n     * storage account but can be scoped within the expression to a single container.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.toTags)(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(segment.blobs)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ServiceListContainersSegmentResponses\n     *\n     * @param marker - A string value that identifies the portion of\n     *                        the list of containers to be returned with the next listing operation. The\n     *                        operation returns the continuationToken value within the response body if the\n     *                        listing operation did not return all containers remaining to be listed\n     *                        with the current page. The continuationToken value can be used as the value for\n     *                        the marker parameter in a subsequent call to request the next page of list\n     *                        items. The marker value is opaque to the client.\n     * @param options - Options to list containers operation.\n     */\n    listSegments(marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listContainersSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listContainersSegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(this.listContainersSegment(marker, options));\n                    listContainersSegmentResponse.containerItems =\n                        listContainersSegmentResponse.containerItems || [];\n                    marker = listContainersSegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(listContainersSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for Container Items\n     *\n     * @param options - Options to list containers operation.\n     */\n    listItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncGenerator)(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(this.listSegments(marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_10__.__asyncValues)(segment.containerItems)));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the containers\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the containers in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const container of blobServiceClient.listContainers()) {\n     *   console.log(`Container ${i++}: ${container.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = blobServiceClient.listContainers();\n     * let containerItem = await iter.next();\n     * while (!containerItem.done) {\n     *   console.log(`Container ${i++}: ${containerItem.value.name}`);\n     *   containerItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of blobServiceClient.listContainers().byPage({ maxPageSize: 20 })) {\n     *   if (response.containerItems) {\n     *     for (const container of response.containerItems) {\n     *       console.log(`Container ${i++}: ${container.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = blobServiceClient.listContainers().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *     console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = blobServiceClient\n     *   .listContainers()\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 container names\n     * if (response.containerItems) {\n     *   for (const container of response.containerItems) {\n     *      console.log(`Container ${i++}: ${container.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param options - Options to list containers.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listContainers(options = {}) {\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const include = [];\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSystem) {\n            include.push(\"system\");\n        }\n        // AsyncIterableIterator to iterate over containers\n        const listSegmentOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include } : {}));\n        const iter = this.listItems(listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n     *\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n     *\n     * @param startsOn -      The start time for the user delegation SAS. Must be within 7 days of the current time\n     * @param expiresOn -     The end time for the user delegation SAS. Must be within 7 days of the current time\n     */\n    async getUserDelegationKey(startsOn, expiresOn, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_9__.tracingClient.withSpan(\"BlobServiceClient-getUserDelegationKey\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.assertResponse)(await this.serviceContext.getUserDelegationKey({\n                startsOn: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(startsOn, false),\n                expiresOn: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(expiresOn, false),\n            }, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const userDelegationKey = {\n                signedObjectId: response.signedObjectId,\n                signedTenantId: response.signedTenantId,\n                signedStartsOn: new Date(response.signedStartsOn),\n                signedExpiresOn: new Date(response.signedExpiresOn),\n                signedService: response.signedService,\n                signedVersion: response.signedVersion,\n                value: response.value,\n            };\n            const res = Object.assign({ _response: response._response, requestId: response.requestId, clientRequestId: response.clientRequestId, version: response.version, date: response.date, errorCode: response.errorCode }, userDelegationKey);\n            return res;\n        });\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this service.\n     */\n    getBlobBatchClient() {\n        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_11__.BlobBatchClient(this.url, this.pipeline);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates a Blob account Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateAccountSasUrl(expiresOn, permissions = _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__.AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        const sas = (0,_sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__.generateAccountSASQueryParameters)(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__.AccountSASServices.parse(\"b\").toString() }, options), this.credential).toString();\n        return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.appendToURLQuery)(this.url, sas);\n    }\n    /**\n     * Only available for BlobServiceClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob account Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not provided.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasStringToSign(expiresOn, permissions = _sas_AccountSASPermissions__WEBPACK_IMPORTED_MODULE_12__.AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        return (0,_sas_AccountSASSignatureValues__WEBPACK_IMPORTED_MODULE_13__.generateAccountSASQueryParametersInternal)(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: _sas_AccountSASServices__WEBPACK_IMPORTED_MODULE_14__.AccountSASServices.parse(\"b\").toString() }, options), this.credential).stringToSign;\n    }\n}\n//# sourceMappingURL=BlobServiceClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppendBlobClient: () => (/* binding */ AppendBlobClient),\n/* harmony export */   BlobClient: () => (/* binding */ BlobClient),\n/* harmony export */   BlockBlobClient: () => (/* binding */ BlockBlobClient),\n/* harmony export */   PageBlobClient: () => (/* binding */ PageBlobClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-auth */ \"./node_modules/@azure/core-auth/dist/browser/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./BlobDownloadResponse */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobDownloadResponse.browser.js\");\n/* harmony import */ var _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./BlobQueryResponse */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobQueryResponse.browser.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js\");\n/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./models */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js\");\n/* harmony import */ var _PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./PageBlobRangeResponse */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./pollers/BlobStartCopyFromUrlPoller */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js\");\n/* harmony import */ var _Range__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Range */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _utils_Batch__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/Batch */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js\");\n/* harmony import */ var _storage_common_src__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../storage-common/src */ \"./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/tracing */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _utils_utils_node__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/utils.node */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BlobLeaseClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A BlobClient represents a URL to an Azure Storage blob; the blob may be a block blob,\n * append blob, or page blob.\n */\nclass BlobClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     * The name of the blob.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The name of the storage container the blob is associated with.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        options = options || {};\n        let pipeline;\n        let url;\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        ({ blobName: this._name, containerName: this._containerName } =\n            this.getBlobAndContainerNamesFromUrl());\n        this.blobContext = this.storageClientContext.blob;\n        this._snapshot = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.getURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT);\n        this._versionId = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.getURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.VERSIONID);\n    }\n    /**\n     * Creates a new BlobClient object identical to the source but with the specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlobClient object identical to the source but with the specified snapshot timestamp\n     */\n    withSnapshot(snapshot) {\n        return new BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a new BlobClient object pointing to a version of this blob.\n     * Provide \"\" will remove the versionId and return a Client to the base blob.\n     *\n     * @param versionId - The versionId.\n     * @returns A new BlobClient object pointing to the version of this blob.\n     */\n    withVersion(versionId) {\n        return new BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.VERSIONID, versionId.length === 0 ? undefined : versionId), this.pipeline);\n    }\n    /**\n     * Creates a AppendBlobClient object.\n     *\n     */\n    getAppendBlobClient() {\n        return new AppendBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a BlockBlobClient object.\n     *\n     */\n    getBlockBlobClient() {\n        return new BlockBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Creates a PageBlobClient object.\n     *\n     */\n    getPageBlobClient() {\n        return new PageBlobClient(this.url, this.pipeline);\n    }\n    /**\n     * Reads or downloads a blob from the system, including its metadata and properties.\n     * You can also call Get Blob to read a snapshot.\n     *\n     * * In Node.js, data returns in a Readable stream readableStreamBody\n     * * In browsers, data returns in a promise blobBody\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n     *\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Optional options to Blob Download operation.\n     *\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await streamToBuffer(downloadBlockBlobResponse.readableStreamBody);\n     * console.log(\"Downloaded blob content:\", downloaded.toString());\n     *\n     * async function streamToBuffer(readableStream) {\n     * return new Promise((resolve, reject) => {\n     * const chunks = [];\n     * readableStream.on(\"data\", (data) => {\n     * chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     * });\n     * readableStream.on(\"end\", () => {\n     * resolve(Buffer.concat(chunks));\n     * });\n     * readableStream.on(\"error\", reject);\n     * });\n     * }\n     * ```\n     *\n     * Example usage (browser):\n     *\n     * ```js\n     * // Download and convert a blob to a string\n     * const downloadBlockBlobResponse = await blobClient.download();\n     * const downloaded = await blobToString(await downloadBlockBlobResponse.blobBody);\n     * console.log(\n     *   \"Downloaded blob content\",\n     *   downloaded\n     * );\n     *\n     * async function blobToString(blob: Blob): Promise<string> {\n     *   const fileReader = new FileReader();\n     *   return new Promise<string>((resolve, reject) => {\n     *     fileReader.onloadend = (ev: any) => {\n     *       resolve(ev.target!.result);\n     *     };\n     *     fileReader.onerror = reject;\n     *     fileReader.readAsText(blob);\n     *   });\n     * }\n     * ```\n     */\n    async download(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-download\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.download({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onDownloadProgress: _azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode ? undefined : options.onProgress, // for Node.js, progress is reported by RetriableReadableStream\n                },\n                range: offset === 0 && !count ? undefined : (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                rangeGetContentMD5: options.rangeGetContentMD5,\n                rangeGetContentCRC64: options.rangeGetContentCrc64,\n                snapshot: options.snapshot,\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedRes = Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(res.objectReplicationRules) });\n            // Return browser response immediately\n            if (!_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                return wrappedRes;\n            }\n            // We support retrying when download stream unexpected ends in Node.js runtime\n            // Following code shouldn't be bundled into browser build, however some\n            // bundlers may try to bundle following code and \"FileReadResponse.ts\".\n            // In this case, \"FileDownloadResponse.browser.ts\" will be used as a shim of \"FileDownloadResponse.ts\"\n            // The config is in package.json \"browser\" field\n            if (options.maxRetryRequests === undefined || options.maxRetryRequests < 0) {\n                // TODO: Default value or make it a required parameter?\n                options.maxRetryRequests = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS;\n            }\n            if (res.contentLength === undefined) {\n                throw new RangeError(`File download response doesn't contain valid content length header`);\n            }\n            if (!res.etag) {\n                throw new RangeError(`File download response doesn't contain valid etag header`);\n            }\n            return new _BlobDownloadResponse__WEBPACK_IMPORTED_MODULE_12__.BlobDownloadResponse(wrappedRes, async (start) => {\n                var _a;\n                const updatedDownloadOptions = {\n                    leaseAccessConditions: options.conditions,\n                    modifiedAccessConditions: {\n                        ifMatch: options.conditions.ifMatch || res.etag,\n                        ifModifiedSince: options.conditions.ifModifiedSince,\n                        ifNoneMatch: options.conditions.ifNoneMatch,\n                        ifUnmodifiedSince: options.conditions.ifUnmodifiedSince,\n                        ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions,\n                    },\n                    range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({\n                        count: offset + res.contentLength - start,\n                        offset: start,\n                    }),\n                    rangeGetContentMD5: options.rangeGetContentMD5,\n                    rangeGetContentCRC64: options.rangeGetContentCrc64,\n                    snapshot: options.snapshot,\n                    cpkInfo: options.customerProvidedKey,\n                };\n                // Debug purpose only\n                // console.log(\n                //   `Read from internal stream, range: ${\n                //     updatedOptions.range\n                //   }, options: ${JSON.stringify(updatedOptions)}`\n                // );\n                return (await this.blobContext.download(Object.assign({ abortSignal: options.abortSignal }, updatedDownloadOptions))).readableStreamBody;\n            }, offset, res.contentLength, {\n                maxRetryRequests: options.maxRetryRequests,\n                onProgress: options.onProgress,\n            });\n        });\n    }\n    /**\n     * Returns true if the Azure blob resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing blob might be deleted by other clients or\n     * applications. Vice versa new blobs might be added by other clients or applications after this\n     * function completes.\n     *\n     * @param options - options to Exists operation.\n     */\n    async exists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-exists\", options, async (updatedOptions) => {\n            try {\n                (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    // Expected exception when checking blob existence\n                    return false;\n                }\n                else if (e.statusCode === 409 &&\n                    (e.details.errorCode === _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BlobUsesCustomerSpecifiedEncryptionMsg ||\n                        e.details.errorCode === _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BlobDoesNotUseCustomerSpecifiedEncryption)) {\n                    // Expected exception when checking blob existence\n                    return true;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Returns all user-defined metadata, standard HTTP properties, and system properties\n     * for the blob. It does not return the content of the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the methods of {@link ContainerClient} that list blobs using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Optional options to Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getProperties\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getProperties({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return Object.assign(Object.assign({}, res), { _response: res._response, objectReplicationDestinationPolicyId: res.objectReplicationPolicyId, objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(res.objectReplicationRules) });\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async delete(options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-delete\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.delete({\n                abortSignal: options.abortSignal,\n                deleteSnapshots: options.deleteSnapshots,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion if it exists. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param options - Optional options to Blob Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.delete(updatedOptions));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Restores the contents and metadata of soft deleted blob and any associated\n     * soft deleted snapshots. Undelete Blob is supported only on version 2017-07-29\n     * or later.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n     *\n     * @param options - Optional options to Blob Undelete operation.\n     */\n    async undelete(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-undelete\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.undelete({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets system properties on the blob.\n     *\n     * If no value provided, or no value provided for the specified blob HTTP headers,\n     * these blob HTTP headers without a value will be cleared.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param blobHTTPHeaders - If no value provided, or no value provided for\n     *                                                   the specified blob HTTP headers, these blob HTTP\n     *                                                   headers without a value will be cleared.\n     *                                                   A common header to set is `blobContentType`\n     *                                                   enabling the browser to provide functionality\n     *                                                   based on file type.\n     * @param options - Optional options to Blob Set HTTP Headers operation.\n     */\n    async setHTTPHeaders(blobHTTPHeaders, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setHTTPHeaders\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setHttpHeaders({\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                // cpkInfo: options.customerProvidedKey, // CPK is not included in Swagger, should change this back when this issue is fixed in Swagger.\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets user-defined metadata for the specified blob as one or more name-value pairs.\n     *\n     * If no option provided, or no metadata defined in the parameter, the blob\n     * metadata will be removed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                               If no value provided the existing metadata will be removed.\n     * @param options - Optional options to Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setMetadata\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets tags on the underlying blob.\n     * A blob can have up to 10 tags. Tag keys must be between 1 and 128 characters.  Tag values must be between 0 and 256 characters.\n     * Valid tag key and value characters include lower and upper case letters, digits (0-9),\n     * space (' '), plus ('+'), minus ('-'), period ('.'), foward slash ('/'), colon (':'), equals ('='), and underscore ('_').\n     *\n     * @param tags -\n     * @param options -\n     */\n    async setTags(tags, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setTags\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n                tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTags)(tags),\n            }));\n        });\n    }\n    /**\n     * Gets the tags associated with the underlying blob.\n     *\n     * @param options -\n     */\n    async getTags(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getTags\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getTags({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)({ blobTagSet: response.blobTagSet }) || {} });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the blob.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the blob.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_13__.BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a read-only snapshot of a blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/snapshot-blob\n     *\n     * @param options - Optional options to the Blob Create Snapshot operation.\n     */\n    async createSnapshot(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-createSnapshot\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.createSnapshot({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * This method returns a long running operation poller that allows you to wait\n     * indefinitely until the copy is completed.\n     * You can also cancel a copy before it is completed by calling `cancelOperation` on the poller.\n     * Note that the onProgress callback will not be invoked if the operation completes in the first\n     * request, and attempting to cancel a completed copy will result in an error being thrown.\n     *\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * Example using automatic polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using manual polling:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * while (!poller.isDone()) {\n     *    await poller.poll();\n     * }\n     * const result = copyPoller.getResult();\n     * ```\n     *\n     * Example using progress updates:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   onProgress(state) {\n     *     console.log(`Progress: ${state.copyProgress}`);\n     *   }\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using a changing polling interval (default 15 seconds):\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url', {\n     *   intervalInMs: 1000 // poll blob every 1 second for copy progress\n     * });\n     * const result = await copyPoller.pollUntilDone();\n     * ```\n     *\n     * Example using copy cancellation:\n     *\n     * ```js\n     * const copyPoller = await blobClient.beginCopyFromURL('url');\n     * // cancel operation after starting it.\n     * try {\n     *   await copyPoller.cancelOperation();\n     *   // calls to get the result now throw PollerCancelledError\n     *   await copyPoller.getResult();\n     * } catch (err) {\n     *   if (err.name === 'PollerCancelledError') {\n     *     console.log('The copy was cancelled.');\n     *   }\n     * }\n     * ```\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async beginCopyFromURL(copySource, options = {}) {\n        const client = {\n            abortCopyFromURL: (...args) => this.abortCopyFromURL(...args),\n            getProperties: (...args) => this.getProperties(...args),\n            startCopyFromURL: (...args) => this.startCopyFromURL(...args),\n        };\n        const poller = new _pollers_BlobStartCopyFromUrlPoller__WEBPACK_IMPORTED_MODULE_14__.BlobBeginCopyFromUrlPoller({\n            blobClient: client,\n            copySource,\n            intervalInMs: options.intervalInMs,\n            onProgress: options.onProgress,\n            resumeFrom: options.resumeFrom,\n            startCopyFromURLOptions: options,\n        });\n        // Trigger the startCopyFromURL call by calling poll.\n        // Any errors from this method should be surfaced to the user.\n        await poller.poll();\n        return poller;\n    }\n    /**\n     * Aborts a pending asynchronous Copy Blob operation, and leaves a destination blob with zero\n     * length and full metadata. Version 2012-02-12 and newer.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/abort-copy-blob\n     *\n     * @param copyId - Id of the Copy From URL operation.\n     * @param options - Optional options to the Blob Abort Copy From URL operation.\n     */\n    async abortCopyFromURL(copyId, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-abortCopyFromURL\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.abortCopyFromURL(copyId, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The synchronous Copy From URL operation copies a blob or an internet resource to a new blob. It will not\n     * return a response until the copy is complete.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob-from-url\n     *\n     * @param copySource - The source URL to copy from, Shared Access Signature(SAS) maybe needed for authentication\n     * @param options -\n     */\n    async syncCopyFromURL(copySource, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-syncCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.copyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                metadata: options.metadata,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                sourceContentMD5: options.sourceContentMD5,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                immutabilityPolicyExpiry: (_f = options.immutabilityPolicy) === null || _f === void 0 ? void 0 : _f.expiriesOn,\n                immutabilityPolicyMode: (_g = options.immutabilityPolicy) === null || _g === void 0 ? void 0 : _g.policyMode,\n                legalHold: options.legalHold,\n                encryptionScope: options.encryptionScope,\n                copySourceTags: options.copySourceTags,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant\n     * storage only). A premium page blob's tier determines the allowed size, IOPS,\n     * and bandwidth of the blob. A block blob's tier determines Hot/Cool/Archive\n     * storage type. This operation does not update the blob's ETag.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-tier\n     *\n     * @param tier - The tier to be set on the blob. Valid values are Hot, Cool, or Archive.\n     * @param options - Optional options to the Blob Set Tier operation.\n     */\n    async setAccessTier(tier, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setAccessTier\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setTier((0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(tier), {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                rehydratePriority: options.rehydratePriority,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    async downloadToBuffer(param1, param2, param3, param4 = {}) {\n        var _a;\n        let buffer;\n        let offset = 0;\n        let count = 0;\n        let options = param4;\n        if (param1 instanceof Buffer) {\n            buffer = param1;\n            offset = param2 || 0;\n            count = typeof param3 === \"number\" ? param3 : 0;\n        }\n        else {\n            offset = typeof param1 === \"number\" ? param1 : 0;\n            count = typeof param2 === \"number\" ? param2 : 0;\n            options = param3 || {};\n        }\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0) {\n            throw new RangeError(\"blockSize option must be >= 0\");\n        }\n        if (blockSize === 0) {\n            blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n        }\n        if (offset < 0) {\n            throw new RangeError(\"offset option must be >= 0\");\n        }\n        if (count && count <= 0) {\n            throw new RangeError(\"count option must be greater than 0\");\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-downloadToBuffer\", options, async (updatedOptions) => {\n            // Customer doesn't specify length, get it\n            if (!count) {\n                const response = await this.getProperties(Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n                count = response.contentLength - offset;\n                if (count < 0) {\n                    throw new RangeError(`offset ${offset} shouldn't be larger than blob size ${response.contentLength}`);\n                }\n            }\n            // Allocate the buffer of size = count if the buffer is not provided\n            if (!buffer) {\n                try {\n                    buffer = Buffer.alloc(count);\n                }\n                catch (error) {\n                    throw new Error(`Unable to allocate the buffer of size: ${count}(in bytes). Please try passing your own buffer to the \"downloadToBuffer\" method or try using other methods like \"download\" or \"downloadToFile\".\\t ${error.message}`);\n                }\n            }\n            if (buffer.length < count) {\n                throw new RangeError(`The buffer's size should be equal to or larger than the request count of bytes: ${count}`);\n            }\n            let transferProgress = 0;\n            const batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__.Batch(options.concurrency);\n            for (let off = offset; off < offset + count; off = off + blockSize) {\n                batch.addOperation(async () => {\n                    // Exclusive chunk end position\n                    let chunkEnd = offset + count;\n                    if (off + blockSize < chunkEnd) {\n                        chunkEnd = off + blockSize;\n                    }\n                    const response = await this.download(off, chunkEnd - off, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        maxRetryRequests: options.maxRetryRequestsPerBlock,\n                        customerProvidedKey: options.customerProvidedKey,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    const stream = response.readableStreamBody;\n                    await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.streamToBuffer)(stream, buffer, off - offset, chunkEnd - offset);\n                    // Update progress after block is downloaded, in case of block trying\n                    // Could provide finer grained progress updating inside HTTP requests,\n                    // only if convenience layer download try is enabled\n                    transferProgress += chunkEnd - off;\n                    if (options.onProgress) {\n                        options.onProgress({ loadedBytes: transferProgress });\n                    }\n                });\n            }\n            await batch.do();\n            return buffer;\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Downloads an Azure Blob to a local file.\n     * Fails if the the given file path already exits.\n     * Offset and count are optional, pass 0 and undefined respectively to download the entire blob.\n     *\n     * @param filePath -\n     * @param offset - From which position of the block blob to download.\n     * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n     * @param options - Options to Blob download options.\n     * @returns The response data for blob download operation,\n     *                                                 but with readableStreamBody set to undefined since its\n     *                                                 content is already read and written into a local file\n     *                                                 at the specified path.\n     */\n    async downloadToFile(filePath, offset = 0, count, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-downloadToFile\", options, async (updatedOptions) => {\n            const response = await this.download(offset, count, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n            if (response.readableStreamBody) {\n                await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.readStreamToLocalFile)(response.readableStreamBody, filePath);\n            }\n            // The stream is no longer accessible so setting it to undefined.\n            response.blobDownloadStream = undefined;\n            return response;\n        });\n    }\n    getBlobAndContainerNamesFromUrl() {\n        let containerName;\n        let blobName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer/blob/a.txt\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername/blob`\n            // http://localhost:10001/devstoreaccount1/containername/blob\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.host.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            else if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.isIpEndpointStyle)(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername/blob\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername/blob\n                // .getPath() -> /devstoreaccount1/containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)/([^/]*)(/(.*))?\");\n                containerName = pathComponents[2];\n                blobName = pathComponents[4];\n            }\n            else {\n                // \"https://customdomain.com/containername/blob\".\n                // .getPath() -> /containername/blob\n                const pathComponents = parsedUrl.pathname.match(\"/([^/]*)(/(.*))?\");\n                containerName = pathComponents[1];\n                blobName = pathComponents[3];\n            }\n            // decode the encoded blobName, containerName - to get all the special characters that might be present in them\n            containerName = decodeURIComponent(containerName);\n            blobName = decodeURIComponent(blobName);\n            // Azure Storage Server will replace \"\\\" with \"/\" in the blob names\n            //   doing the same in the SDK side so that the user doesn't have to replace \"\\\" instances in the blobName\n            blobName = blobName.replace(/\\\\/g, \"/\");\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return { blobName, containerName };\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract blobName and containerName with provided information.\");\n        }\n    }\n    /**\n     * Asynchronously copies a blob to a destination within the storage account.\n     * In version 2012-02-12 and later, the source for a Copy Blob operation can be\n     * a committed blob in any Azure storage account.\n     * Beginning with version 2015-02-21, the source for a Copy Blob operation can be\n     * an Azure file in any Azure storage account.\n     * Only storage accounts created on or after June 7th, 2012 allow the Copy Blob\n     * operation to copy from another storage account.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob\n     *\n     * @param copySource - url to the source Azure Blob/File.\n     * @param options - Optional options to the Blob Start Copy From URL operation.\n     */\n    async startCopyFromURL(copySource, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-startCopyFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            options.conditions = options.conditions || {};\n            options.sourceConditions = options.sourceConditions || {};\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.startCopyFromURL(copySource, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: options.sourceConditions.ifMatch,\n                    sourceIfModifiedSince: options.sourceConditions.ifModifiedSince,\n                    sourceIfNoneMatch: options.sourceConditions.ifNoneMatch,\n                    sourceIfUnmodifiedSince: options.sourceConditions.ifUnmodifiedSince,\n                    sourceIfTags: options.sourceConditions.tagConditions,\n                },\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                rehydratePriority: options.rehydratePriority,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                sealBlob: options.sealBlob,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    generateSasStringToSign(options) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n        }\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), this.credential).stringToSign;\n    }\n    /**\n     *\n     * Generates a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasUrl(options, userDelegationKey) {\n        return new Promise((resolve) => {\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Only available for BlobClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Service Shared Access Signature (SAS) URI based on\n     * the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasStringToSign(options, userDelegationKey) {\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_17__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName, blobName: this._name, snapshotTime: this._snapshot, versionId: this._versionId }, options), userDelegationKey, this.accountName).stringToSign;\n    }\n    /**\n     * Delete the immutablility policy on the blob.\n     *\n     * @param options - Optional options to delete immutability policy on the blob.\n     */\n    async deleteImmutabilityPolicy(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-deleteImmutabilityPolicy\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.deleteImmutabilityPolicy({\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set immutability policy on the blob.\n     *\n     * @param options - Optional options to set immutability policy on the blob.\n     */\n    async setImmutabilityPolicy(immutabilityPolicy, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setImmutabilityPolicy\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setImmutabilityPolicy({\n                immutabilityPolicyExpiry: immutabilityPolicy.expiriesOn,\n                immutabilityPolicyMode: immutabilityPolicy.policyMode,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Set legal hold on the blob.\n     *\n     * @param options - Optional options to set legal hold on the blob.\n     */\n    async setLegalHold(legalHoldEnabled, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-setLegalHold\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.setLegalHold(legalHoldEnabled, {\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlobClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blobContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * AppendBlobClient defines a set of operations applicable to append blobs.\n */\nclass AppendBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)      url = urlOrConnectionString;\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            // The second parameter is undefined. Use anonymous credential.\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.appendBlobContext = this.storageClientContext.appendBlob;\n    }\n    /**\n     * Creates a new AppendBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new AppendBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new AppendBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options - Options to the Append Block Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const appendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await appendBlobClient.create();\n     * ```\n     */\n    async create(options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.create(0, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a 0-length append blob. Call AppendBlock to append data to an append blob.\n     * If the blob with the same name already exists, the content of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        const conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_8__.ETagAny };\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.create(Object.assign(Object.assign({}, updatedOptions), { conditions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Seals the append blob, making it read only.\n     *\n     * @param options -\n     */\n    async seal(options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-seal\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.seal({\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Commits a new block of data to the end of the existing append blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/append-block\n     *\n     * @param body - Data to be appended.\n     * @param contentLength - Length of the body in bytes.\n     * @param options - Options to the Append Block operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello World!\";\n     *\n     * // Create a new append blob and append data to the blob.\n     * const newAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await newAppendBlobClient.create();\n     * await newAppendBlobClient.appendBlock(content, content.length);\n     *\n     * // Append data to an existing append blob.\n     * const existingAppendBlobClient = containerClient.getAppendBlobClient(\"<blob name>\");\n     * await existingAppendBlobClient.appendBlock(content, content.length);\n     * ```\n     */\n    async appendBlock(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-appendBlock\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.appendBlock(contentLength, body, {\n                abortSignal: options.abortSignal,\n                appendPositionAccessConditions: options.conditions,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob\n     * where the contents are read from a source url.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/append-block-from-url\n     *\n     * @param sourceURL -\n     *                 The url to the blob that will be the source of the copy. A source blob in the same storage account can\n     *                 be authenticated via Shared Key. However, if the source is a blob in another account, the source blob\n     *                 must either be public or must be authenticated via a shared access signature. If the source blob is\n     *                 public, no authentication is required to perform the operation.\n     * @param sourceOffset - Offset in source to be appended\n     * @param count - Number of bytes to be appended as a block\n     * @param options -\n     */\n    async appendBlockFromURL(sourceURL, sourceOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"AppendBlobClient-appendBlockFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.appendBlobContext.appendBlockFromUrl(sourceURL, 0, {\n                abortSignal: options.abortSignal,\n                sourceRange: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: sourceOffset, count }),\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                appendPositionAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n/**\n * BlockBlobClient defines a set of operations applicable to block blobs.\n */\nclass BlockBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            if (blobNameOrOptions && typeof blobNameOrOptions !== \"string\") {\n                options = blobNameOrOptions;\n            }\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.blockBlobContext = this.storageClientContext.blockBlob;\n        this._blobContext = this.storageClientContext.blob;\n    }\n    /**\n     * Creates a new BlockBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a URL to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new BlockBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new BlockBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Quick query for a JSON or CSV formatted blob.\n     *\n     * Example usage (Node.js):\n     *\n     * ```js\n     * // Query and convert a blob to a string\n     * const queryBlockBlobResponse = await blockBlobClient.query(\"select * from BlobStorage\");\n     * const downloaded = (await streamToBuffer(queryBlockBlobResponse.readableStreamBody)).toString();\n     * console.log(\"Query blob content:\", downloaded);\n     *\n     * async function streamToBuffer(readableStream) {\n     *   return new Promise((resolve, reject) => {\n     *     const chunks = [];\n     *     readableStream.on(\"data\", (data) => {\n     *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n     *     });\n     *     readableStream.on(\"end\", () => {\n     *       resolve(Buffer.concat(chunks));\n     *     });\n     *     readableStream.on(\"error\", reject);\n     *   });\n     * }\n     * ```\n     *\n     * @param query -\n     * @param options -\n     */\n    async query(query, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        if (!_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n            throw new Error(\"This operation currently is only supported in Node.js.\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-query\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this._blobContext.query({\n                abortSignal: options.abortSignal,\n                queryRequest: {\n                    queryType: \"SQL\",\n                    expression: query,\n                    inputSerialization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toQuerySerialization)(options.inputTextConfiguration),\n                    outputSerialization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toQuerySerialization)(options.outputTextConfiguration),\n                },\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return new _BlobQueryResponse__WEBPACK_IMPORTED_MODULE_18__.BlobQueryResponse(response, {\n                abortSignal: options.abortSignal,\n                onProgress: options.onProgress,\n                onError: options.onError,\n            });\n        });\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link stageBlock} and {@link commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link uploadFile},\n     * {@link uploadStream} or {@link uploadBrowserData} for better performance\n     * with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to the Block Blob Upload operation.\n     * @returns Response data for the Block Blob Upload operation.\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    async upload(body, contentLength, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-upload\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.upload(contentLength, body, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a new Block Blob where the contents of the blob are read from a given URL.\n     * This API is supported beginning with the 2020-04-08 version. Partial updates\n     * are not supported with Put Blob from URL; the content of an existing blob is overwritten with\n     * the content of the new blob.  To perform partial updates to a block blob’s contents using a\n     * source URL, use {@link stageBlockFromURL} and {@link commitBlockList}.\n     *\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Optional parameters.\n     */\n    async syncUploadFromURL(sourceURL, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-syncUploadFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e, _f;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.putBlobFromUrl(0, sourceURL, Object.assign(Object.assign({}, options), { blobHttpHeaders: options.blobHTTPHeaders, leaseAccessConditions: options.conditions, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }), sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                    sourceIfTags: (_f = options.sourceConditions) === null || _f === void 0 ? void 0 : _f.tagConditions,\n                }, cpkInfo: options.customerProvidedKey, copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization), tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier), blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags), copySourceTags: options.copySourceTags, tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Uploads the specified block to the block blob's \"staging area\" to be later\n     * committed by a call to commitBlockList.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param body - Data to upload to the staging area.\n     * @param contentLength - Number of bytes to upload.\n     * @param options - Options to the Block Blob Stage Block operation.\n     * @returns Response data for the Block Blob Stage Block operation.\n     */\n    async stageBlock(blockId, body, contentLength, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-stageBlock\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.stageBlock(blockId, contentLength, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Stage Block From URL operation creates a new block to be committed as part\n     * of a blob where the contents are read from a URL.\n     * This API is available starting in version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-block-from-url\n     *\n     * @param blockId - A 64-byte value that is base64-encoded\n     * @param sourceURL - Specifies the URL of the blob. The value\n     *                           may be a URL of up to 2 KB in length that specifies a blob.\n     *                           The value should be URL-encoded as it would appear\n     *                           in a request URI. The source blob must either be public\n     *                           or must be authenticated via a shared access signature.\n     *                           If the source blob is public, no authentication is required\n     *                           to perform the operation. Here are some examples of source object URLs:\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob\n     *                           - https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param offset - From which position of the blob to download, greater than or equal to 0\n     * @param count - How much data to be downloaded, greater than 0. Will download to the end when undefined\n     * @param options - Options to the Block Blob Stage Block From URL operation.\n     * @returns Response data for the Block Blob Stage Block From URL operation.\n     */\n    async stageBlockFromURL(blockId, sourceURL, offset = 0, count, options = {}) {\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-stageBlockFromURL\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.stageBlockFromURL(blockId, 0, sourceURL, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                sourceRange: offset === 0 && !count ? undefined : (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Writes a blob by specifying the list of block IDs that make up the blob.\n     * In order to be written as part of a blob, a block must have been successfully written\n     * to the server in a prior {@link stageBlock} operation. You can call {@link commitBlockList} to\n     * update a blob by uploading only those blocks that have changed, then committing the new and existing\n     * blocks together. Any blocks not specified in the block list and permanently deleted.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-block-list\n     *\n     * @param blocks -  Array of 64-byte value that is base64-encoded\n     * @param options - Options to the Block Blob Commit Block List operation.\n     * @returns Response data for the Block Blob Commit Block List operation.\n     */\n    async commitBlockList(blocks, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-commitBlockList\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.commitBlockList({ latest: blocks }, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of blocks that have been uploaded as part of a block blob\n     * using the specified block list filter.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-block-list\n     *\n     * @param listType - Specifies whether to return the list of committed blocks,\n     *                                        the list of uncommitted blocks, or both lists together.\n     * @param options - Options to the Block Blob Get Block List operation.\n     * @returns Response data for the Block Blob Get Block List operation.\n     */\n    async getBlockList(listType, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-getBlockList\", options, async (updatedOptions) => {\n            var _a;\n            const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.blockBlobContext.getBlockList(listType, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            if (!res.committedBlocks) {\n                res.committedBlocks = [];\n            }\n            if (!res.uncommittedBlocks) {\n                res.uncommittedBlocks = [];\n            }\n            return res;\n        });\n    }\n    // High level functions\n    /**\n     * Uploads a Buffer(Node.js)/Blob(browsers)/ArrayBuffer/ArrayBufferView object to a BlockBlob.\n     *\n     * When data length is no more than the specifiled {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @param data - Buffer(Node.js), Blob, ArrayBuffer or ArrayBufferView\n     * @param options -\n     */\n    async uploadData(data, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadData\", options, async (updatedOptions) => {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                let buffer;\n                if (data instanceof Buffer) {\n                    buffer = data;\n                }\n                else if (data instanceof ArrayBuffer) {\n                    buffer = Buffer.from(data);\n                }\n                else {\n                    data = data;\n                    buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n                }\n                return this.uploadSeekableInternal((offset, size) => buffer.slice(offset, offset + size), buffer.byteLength, updatedOptions);\n            }\n            else {\n                const browserBlob = new Blob([data]);\n                return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n            }\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN BROWSERS.\n     *\n     * Uploads a browser Blob/File/ArrayBuffer/ArrayBufferView object to block blob.\n     *\n     * When buffer length lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call\n     * {@link commitBlockList} to commit the block list.\n     *\n     * A common {@link BlockBlobParallelUploadOptions.blobHTTPHeaders} option to set is\n     * `blobContentType`, enabling the browser to provide\n     * functionality based on file type.\n     *\n     * @deprecated Use {@link uploadData} instead.\n     *\n     * @param browserData - Blob, File, ArrayBuffer or ArrayBufferView\n     * @param options - Options to upload browser data.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadBrowserData(browserData, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadBrowserData\", options, async (updatedOptions) => {\n            const browserBlob = new Blob([browserData]);\n            return this.uploadSeekableInternal((offset, size) => browserBlob.slice(offset, offset + size), browserBlob.size, updatedOptions);\n        });\n    }\n    /**\n     *\n     * Uploads data to block blob. Requires a bodyFactory as the data source,\n     * which need to return a {@link HttpRequestBody} object with the offset and size provided.\n     *\n     * When data length is no more than the specified {@link BlockBlobParallelUploadOptions.maxSingleShotSize} (default is\n     * {@link BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}), this method will use 1 {@link upload} call to finish the upload.\n     * Otherwise, this method will call {@link stageBlock} to upload blocks, and finally call {@link commitBlockList}\n     * to commit the block list.\n     *\n     * @param bodyFactory -\n     * @param size - size of the data to upload.\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadSeekableInternal(bodyFactory, size, options = {}) {\n        var _a, _b;\n        let blockSize = (_a = options.blockSize) !== null && _a !== void 0 ? _a : 0;\n        if (blockSize < 0 || blockSize > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES) {\n            throw new RangeError(`blockSize option must be >= 0 and <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES}`);\n        }\n        const maxSingleShotSize = (_b = options.maxSingleShotSize) !== null && _b !== void 0 ? _b : _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES;\n        if (maxSingleShotSize < 0 || maxSingleShotSize > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES) {\n            throw new RangeError(`maxSingleShotSize option must be >= 0 and <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES}`);\n        }\n        if (blockSize === 0) {\n            if (size > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES * _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`${size} is too larger to upload to a block blob.`);\n            }\n            if (size > maxSingleShotSize) {\n                blockSize = Math.ceil(size / _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS);\n                if (blockSize < _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES) {\n                    blockSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES;\n                }\n            }\n        }\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadSeekableInternal\", options, async (updatedOptions) => {\n            if (size <= maxSingleShotSize) {\n                return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.upload(bodyFactory(0, size), size, updatedOptions));\n            }\n            const numBlocks = Math.floor((size - 1) / blockSize) + 1;\n            if (numBlocks > _utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS) {\n                throw new RangeError(`The buffer's size is too big or the BlockSize is too small;` +\n                    `the number of blocks must be <= ${_utils_constants__WEBPACK_IMPORTED_MODULE_8__.BLOCK_BLOB_MAX_BLOCKS}`);\n            }\n            const blockList = [];\n            const blockIDPrefix = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n            let transferProgress = 0;\n            const batch = new _utils_Batch__WEBPACK_IMPORTED_MODULE_15__.Batch(options.concurrency);\n            for (let i = 0; i < numBlocks; i++) {\n                batch.addOperation(async () => {\n                    const blockID = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.generateBlockID)(blockIDPrefix, i);\n                    const start = blockSize * i;\n                    const end = i === numBlocks - 1 ? size : start + blockSize;\n                    const contentLength = end - start;\n                    blockList.push(blockID);\n                    await this.stageBlock(blockID, bodyFactory(start, contentLength), contentLength, {\n                        abortSignal: options.abortSignal,\n                        conditions: options.conditions,\n                        encryptionScope: options.encryptionScope,\n                        tracingOptions: updatedOptions.tracingOptions,\n                    });\n                    // Update progress after block is successfully uploaded to server, in case of block trying\n                    // TODO: Hook with convenience layer progress event in finer level\n                    transferProgress += contentLength;\n                    if (options.onProgress) {\n                        options.onProgress({\n                            loadedBytes: transferProgress,\n                        });\n                    }\n                });\n            }\n            await batch.do();\n            return this.commitBlockList(blockList, updatedOptions);\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a local file in blocks to a block blob.\n     *\n     * When file size lesser than or equal to 256MB, this method will use 1 upload call to finish the upload.\n     * Otherwise, this method will call stageBlock to upload blocks, and finally call commitBlockList\n     * to commit the block list.\n     *\n     * @param filePath - Full path of local file\n     * @param options - Options to Upload to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadFile(filePath, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadFile\", options, async (updatedOptions) => {\n            const size = (await (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.fsStat)(filePath)).size;\n            return this.uploadSeekableInternal((offset, count) => {\n                return () => (0,_utils_utils_node__WEBPACK_IMPORTED_MODULE_16__.fsCreateReadStream)(filePath, {\n                    autoClose: true,\n                    end: count ? offset + count - 1 : Infinity,\n                    start: offset,\n                });\n            }, size, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions }));\n        });\n    }\n    /**\n     * ONLY AVAILABLE IN NODE.JS RUNTIME.\n     *\n     * Uploads a Node.js Readable stream into block blob.\n     *\n     * PERFORMANCE IMPROVEMENT TIPS:\n     * * Input stream highWaterMark is better to set a same value with bufferSize\n     *    parameter, which will avoid Buffer.concat() operations.\n     *\n     * @param stream - Node.js Readable stream\n     * @param bufferSize - Size of every buffer allocated, also the block size in the uploaded block blob. Default value is 8MB\n     * @param maxConcurrency -  Max concurrency indicates the max number of buffers that can be allocated,\n     *                                 positive correlation with max uploading concurrency. Default value is 5\n     * @param options - Options to Upload Stream to Block Blob operation.\n     * @returns Response data for the Blob Upload operation.\n     */\n    async uploadStream(stream, bufferSize = _utils_constants__WEBPACK_IMPORTED_MODULE_8__.DEFAULT_BLOCK_BUFFER_SIZE_BYTES, maxConcurrency = 5, options = {}) {\n        if (!options.blobHTTPHeaders) {\n            options.blobHTTPHeaders = {};\n        }\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"BlockBlobClient-uploadStream\", options, async (updatedOptions) => {\n            let blockNum = 0;\n            const blockIDPrefix = (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n            let transferProgress = 0;\n            const blockList = [];\n            const scheduler = new _storage_common_src__WEBPACK_IMPORTED_MODULE_19__.BufferScheduler(stream, bufferSize, maxConcurrency, async (body, length) => {\n                const blockID = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.generateBlockID)(blockIDPrefix, blockNum);\n                blockList.push(blockID);\n                blockNum++;\n                await this.stageBlock(blockID, body, length, {\n                    customerProvidedKey: options.customerProvidedKey,\n                    conditions: options.conditions,\n                    encryptionScope: options.encryptionScope,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                // Update progress after block is successfully uploaded to server, in case of block trying\n                transferProgress += length;\n                if (options.onProgress) {\n                    options.onProgress({ loadedBytes: transferProgress });\n                }\n            }, \n            // concurrency should set a smaller value than maxConcurrency, which is helpful to\n            // reduce the possibility when a outgoing handler waits for stream data, in\n            // this situation, outgoing handlers are blocked.\n            // Outgoing queue shouldn't be empty.\n            Math.ceil((maxConcurrency / 4) * 3));\n            await scheduler.do();\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.commitBlockList(blockList, Object.assign(Object.assign({}, options), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n}\n/**\n * PageBlobClient defines a set of operations applicable to page blobs.\n */\nclass PageBlobClient extends BlobClient {\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, blobNameOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        // In TypeScript we cannot simply pass all parameters to super() like below so have to duplicate the code instead.\n        //   super(s, credentialOrPipelineOrContainerNameOrOptions, blobNameOrOptions, options);\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_1__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            options = blobNameOrOptions;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\" &&\n            blobNameOrOptions &&\n            typeof blobNameOrOptions === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const blobName = blobNameOrOptions;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)), encodeURIComponent(blobName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName and blobName parameters\");\n        }\n        super(url, pipeline);\n        this.pageBlobContext = this.storageClientContext.pageBlob;\n    }\n    /**\n     * Creates a new PageBlobClient object identical to the source but with the\n     * specified snapshot timestamp.\n     * Provide \"\" will remove the snapshot and return a Client to the base blob.\n     *\n     * @param snapshot - The snapshot timestamp.\n     * @returns A new PageBlobClient object identical to the source but with the specified snapshot timestamp.\n     */\n    withSnapshot(snapshot) {\n        return new PageBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.setURLParameter)(this.url, _utils_constants__WEBPACK_IMPORTED_MODULE_8__.URLConstants.Parameters.SNAPSHOT, snapshot.length === 0 ? undefined : snapshot), this.pipeline);\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options - Options to the Page Blob Create operation.\n     * @returns Response data for the Page Blob Create operation.\n     */\n    async create(size, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-create\", options, async (updatedOptions) => {\n            var _a, _b, _c;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.create(0, size, {\n                abortSignal: options.abortSignal,\n                blobHttpHeaders: options.blobHTTPHeaders,\n                blobSequenceNumber: options.blobSequenceNumber,\n                leaseAccessConditions: options.conditions,\n                metadata: options.metadata,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                immutabilityPolicyExpiry: (_b = options.immutabilityPolicy) === null || _b === void 0 ? void 0 : _b.expiriesOn,\n                immutabilityPolicyMode: (_c = options.immutabilityPolicy) === null || _c === void 0 ? void 0 : _c.policyMode,\n                legalHold: options.legalHold,\n                tier: (0,_models__WEBPACK_IMPORTED_MODULE_9__.toAccessTier)(options.tier),\n                blobTagsString: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toBlobTagsString)(options.tags),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Creates a page blob of the specified length. Call uploadPages to upload data\n     * data to a page blob. If the blob with the same name already exists, the content\n     * of the existing blob will remain unchanged.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param size - size of the page blob.\n     * @param options -\n     */\n    async createIfNotExists(size, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const conditions = { ifNoneMatch: _utils_constants__WEBPACK_IMPORTED_MODULE_8__.ETagAny };\n                const res = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.create(size, Object.assign(Object.assign({}, options), { conditions, tracingOptions: updatedOptions.tracingOptions })));\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"BlobAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Writes 1 or more pages to the page blob. The start and end offsets must be a multiple of 512.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param body - Data to upload\n     * @param offset - Offset of destination page blob\n     * @param count - Content length of the body, also number of bytes to be uploaded\n     * @param options - Options to the Page Blob Upload Pages operation.\n     * @returns Response data for the Page Blob Upload Pages operation.\n     */\n    async uploadPages(body, offset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-uploadPages\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.uploadPages(count, body, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                requestOptions: {\n                    onUploadProgress: options.onProgress,\n                },\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                transactionalContentMD5: options.transactionalContentMD5,\n                transactionalContentCrc64: options.transactionalContentCrc64,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the\n     * contents are read from a URL.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/put-page-from-url\n     *\n     * @param sourceURL - Specify a URL to the copy source, Shared Access Signature(SAS) maybe needed for authentication\n     * @param sourceOffset - The source offset to copy from. Pass 0 to copy from the beginning of source page blob\n     * @param destOffset - Offset of destination page blob\n     * @param count - Number of bytes to be uploaded from source page blob\n     * @param options -\n     */\n    async uploadPagesFromURL(sourceURL, sourceOffset, destOffset, count, options = {}) {\n        options.conditions = options.conditions || {};\n        options.sourceConditions = options.sourceConditions || {};\n        (0,_models__WEBPACK_IMPORTED_MODULE_9__.ensureCpkIfSpecified)(options.customerProvidedKey, this.isHttps);\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-uploadPagesFromURL\", options, async (updatedOptions) => {\n            var _a, _b, _c, _d, _e;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.uploadPagesFromURL(sourceURL, (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: sourceOffset, count }), 0, (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset: destOffset, count }), {\n                abortSignal: options.abortSignal,\n                sourceContentMD5: options.sourceContentMD5,\n                sourceContentCrc64: options.sourceContentCrc64,\n                leaseAccessConditions: options.conditions,\n                sequenceNumberAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                sourceModifiedAccessConditions: {\n                    sourceIfMatch: (_b = options.sourceConditions) === null || _b === void 0 ? void 0 : _b.ifMatch,\n                    sourceIfModifiedSince: (_c = options.sourceConditions) === null || _c === void 0 ? void 0 : _c.ifModifiedSince,\n                    sourceIfNoneMatch: (_d = options.sourceConditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch,\n                    sourceIfUnmodifiedSince: (_e = options.sourceConditions) === null || _e === void 0 ? void 0 : _e.ifUnmodifiedSince,\n                },\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                copySourceAuthorization: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.httpAuthorizationToString)(options.sourceAuthorization),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Frees the specified pages from the page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-page\n     *\n     * @param offset - Starting byte position of the pages to clear.\n     * @param count - Number of bytes to clear.\n     * @param options - Options to the Page Blob Clear Pages operation.\n     * @returns Response data for the Page Blob Clear Pages operation.\n     */\n    async clearPages(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-clearPages\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.clearPages(0, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                sequenceNumberAccessConditions: options.conditions,\n                cpkInfo: options.customerProvidedKey,\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns the list of valid page ranges for a page blob or snapshot of a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns Response data for the Page Blob Get Ranges operation.\n     */\n    async getPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRanges\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(response);\n        });\n    }\n    /**\n     * getPageRangesSegment returns a single segment of page ranges starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to PageBlob Get Page Ranges Segment operation.\n     */\n    async listPageRangesSegment(offset = 0, count, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesSegment\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRanges({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                marker: marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesResponseModel}\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItemSegments() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeItemSegments_1(offset = 0, count, marker, options = {}) {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(this.listPageRangesSegment(offset, count, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to List Page Ranges operation.\n     */\n    listPageRangeItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeItems_1(offset = 0, count, options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)(this.listPageRangeItemSegments(offset, count, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ExtractPageRangeInfoItems)(getPageRangesSegment))));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges for a page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges for a page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRanges()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRanges();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRanges().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRanges().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRanges().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRanges(offset = 0, count, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeItems(offset, count, options);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeItemSegments(offset, count, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesDiff\", options, async (updatedOptions) => {\n            var _a;\n            const result = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshot,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(result);\n        });\n    }\n    /**\n     * getPageRangesDiffSegment returns a single segment of page ranges starting from the\n     * specified Marker for difference between previous snapshot and the target page blob.\n     * Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call getPageRangesDiffSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of the get to be returned with the next get operation.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    async listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-getPageRangesDiffSegment\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options === null || options === void 0 ? void 0 : options.abortSignal,\n                leaseAccessConditions: options === null || options === void 0 ? void 0 : options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.conditions), { ifTags: (_a = options === null || options === void 0 ? void 0 : options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevsnapshot: prevSnapshotOrUrl,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({\n                    offset: offset,\n                    count: count,\n                }),\n                marker: marker,\n                maxPageSize: options === null || options === void 0 ? void 0 : options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link PageBlobGetPageRangesDiffResponseModel}\n     *\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param marker - A string value that identifies the portion of\n     *                          the get of page ranges to be returned with the next getting operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          getting operation did not return all page ranges remaining within the current page.\n     *                          The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of get\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeDiffItemSegments_1() {\n            let getPageRangeItemSegmentsResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    getPageRangeItemSegmentsResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(this.listPageRangesDiffSegment(offset, count, prevSnapshotOrUrl, marker, options));\n                    marker = getPageRangeItemSegmentsResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(getPageRangeItemSegmentsResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link PageRangeInfo} objects\n     *\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshotOrUrl - Timestamp of snapshot to retrieve the difference or URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     */\n    listPageRangeDiffItems(offset, count, prevSnapshotOrUrl, options) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncGenerator)(this, arguments, function* listPageRangeDiffItems_1() {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)(this.listPageRangeDiffItemSegments(offset, count, prevSnapshotOrUrl, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const getPageRangesSegment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_21__.__asyncValues)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ExtractPageRangeInfoItems)(getPageRangesSegment))));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_21__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     *  .byPage() returns an async iterable iterator to list of page ranges that differ between a specified snapshot and this page blob.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the pageBlobClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\").getPageBlobClient(\"<your-blob-name>\");`\n     * let i = 1;\n     * for await (const pageRange of pageBlobClient.listPageRangesDiff()) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = pageBlobClient.listPageRangesDiff();\n     * let pageRangeItem = await iter.next();\n     * while (!pageRangeItem.done) {\n     *   console.log(`Page range ${i++}: ${pageRangeItem.value.start} - ${pageRangeItem.value.end}, IsClear: ${pageRangeItem.value.isClear}`);\n     *   pageRangeItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 20 })) {\n     *   for (const pageRange of response) {\n     *     console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = pageBlobClient.listPageRangesDiff().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 page ranges\n     * for (const pageRange of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = pageBlobClient.listPageRangesDiff().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 page ranges\n     * for (const blob of response) {\n     *   console.log(`Page range ${i++}: ${pageRange.start} - ${pageRange.end}`);\n     * }\n     * ```\n     * @param offset - Starting byte position of the page ranges.\n     * @param count - Number of bytes to get.\n     * @param prevSnapshot - Timestamp of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Ranges operation.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listPageRangesDiff(offset, count, prevSnapshot, options = {}) {\n        options.conditions = options.conditions || {};\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listPageRangeDiffItems(offset, count, prevSnapshot, Object.assign({}, options));\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listPageRangeDiffItemSegments(offset, count, prevSnapshot, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, options));\n            },\n        };\n    }\n    /**\n     * Gets the collection of page ranges that differ between a specified snapshot and this page blob for managed disks.\n     * @see https://docs.microsoft.com/rest/api/storageservices/get-page-ranges\n     *\n     * @param offset - Starting byte position of the page blob\n     * @param count - Number of bytes to get ranges diff.\n     * @param prevSnapshotUrl - URL of snapshot to retrieve the difference.\n     * @param options - Options to the Page Blob Get Page Ranges Diff operation.\n     * @returns Response data for the Page Blob Get Page Range Diff operation.\n     */\n    async getPageRangesDiffForManagedDisks(offset, count, prevSnapshotUrl, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-GetPageRangesDiffForManagedDisks\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.getPageRangesDiff({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                prevSnapshotUrl,\n                range: (0,_Range__WEBPACK_IMPORTED_MODULE_11__.rangeToString)({ offset, count }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            return (0,_PageBlobRangeResponse__WEBPACK_IMPORTED_MODULE_20__.rangeResponseFromModel)(response);\n        });\n    }\n    /**\n     * Resizes the page blob to the specified size (which must be a multiple of 512).\n     * @see https://docs.microsoft.com/rest/api/storageservices/set-blob-properties\n     *\n     * @param size - Target size\n     * @param options - Options to the Page Blob Resize operation.\n     * @returns Response data for the Page Blob Resize operation.\n     */\n    async resize(size, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-resize\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.resize(size, {\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                encryptionScope: options.encryptionScope,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Sets a page blob's sequence number.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n     *\n     * @param sequenceNumberAction - Indicates how the service should modify the blob's sequence number.\n     * @param sequenceNumber - Required if sequenceNumberAction is max or update\n     * @param options - Options to the Page Blob Update Sequence Number operation.\n     * @returns Response data for the Page Blob Update Sequence Number operation.\n     */\n    async updateSequenceNumber(sequenceNumberAction, sequenceNumber, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-updateSequenceNumber\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.updateSequenceNumber(sequenceNumberAction, {\n                abortSignal: options.abortSignal,\n                blobSequenceNumber: sequenceNumber,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Begins an operation to start an incremental copy from one page blob's snapshot to this page blob.\n     * The snapshot is copied such that only the differential changes between the previously\n     * copied snapshot are transferred to the destination.\n     * The copied snapshots are complete copies of the original snapshot and can be read or copied from as usual.\n     * @see https://docs.microsoft.com/rest/api/storageservices/incremental-copy-blob\n     * @see https://docs.microsoft.com/en-us/azure/virtual-machines/windows/incremental-snapshots\n     *\n     * @param copySource - Specifies the name of the source page blob snapshot. For example,\n     *                            https://myaccount.blob.core.windows.net/mycontainer/myblob?snapshot=<DateTime>\n     * @param options - Options to the Page Blob Copy Incremental operation.\n     * @returns Response data for the Page Blob Copy Incremental operation.\n     */\n    async startCopyIncremental(copySource, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_10__.tracingClient.withSpan(\"PageBlobClient-startCopyIncremental\", options, async (updatedOptions) => {\n            var _a;\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.pageBlobContext.copyIncremental(copySource, {\n                abortSignal: options.abortSignal,\n                modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_a = options.conditions) === null || _a === void 0 ? void 0 : _a.tagConditions }),\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n}\n//# sourceMappingURL=Clients.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerClient: () => (/* binding */ ContainerClient)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-auth */ \"./node_modules/@azure/core-auth/dist/browser/index.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Pipeline */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _StorageClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./StorageClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js\");\n/* harmony import */ var _utils_tracing__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/tracing */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./sas/BlobSASSignatureValues */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js\");\n/* harmony import */ var _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./BlobLeaseClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js\");\n/* harmony import */ var _Clients__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Clients */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Clients.js\");\n/* harmony import */ var _BlobBatchClient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./BlobBatchClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A ContainerClient represents a URL to the Azure Storage container allowing you to manipulate its blobs.\n */\nclass ContainerClient extends _StorageClient__WEBPACK_IMPORTED_MODULE_3__.StorageClient {\n    /**\n     * The name of the container.\n     */\n    get containerName() {\n        return this._containerName;\n    }\n    constructor(urlOrConnectionString, credentialOrPipelineOrContainerName, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        let url;\n        options = options || {};\n        if ((0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.isPipelineLike)(credentialOrPipelineOrContainerName)) {\n            // (url: string, pipeline: Pipeline)\n            url = urlOrConnectionString;\n            pipeline = credentialOrPipelineOrContainerName;\n        }\n        else if ((_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode && credentialOrPipelineOrContainerName instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential) ||\n            credentialOrPipelineOrContainerName instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential ||\n            (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_2__.isTokenCredential)(credentialOrPipelineOrContainerName)) {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(credentialOrPipelineOrContainerName, options);\n        }\n        else if (!credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName !== \"string\") {\n            // (url: string, credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential, options?: StoragePipelineOptions)\n            // The second parameter is undefined. Use anonymous credential.\n            url = urlOrConnectionString;\n            pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n        }\n        else if (credentialOrPipelineOrContainerName &&\n            typeof credentialOrPipelineOrContainerName === \"string\") {\n            // (connectionString: string, containerName: string, blobName: string, options?: StoragePipelineOptions)\n            const containerName = credentialOrPipelineOrContainerName;\n            const extractedCreds = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.extractConnectionStringParts)(urlOrConnectionString);\n            if (extractedCreds.kind === \"AccountConnString\") {\n                if (_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode) {\n                    const sharedKeyCredential = new _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                    url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName));\n                    if (!options.proxyOptions) {\n                        options.proxyOptions = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings)(extractedCreds.proxyUri);\n                    }\n                    pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(sharedKeyCredential, options);\n                }\n                else {\n                    throw new Error(\"Account connection string is only supported in Node.js environment\");\n                }\n            }\n            else if (extractedCreds.kind === \"SASConnString\") {\n                url =\n                    (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(extractedCreds.url, encodeURIComponent(containerName)) +\n                        \"?\" +\n                        extractedCreds.accountSas;\n                pipeline = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_4__.newPipeline)(new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential(), options);\n            }\n            else {\n                throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n            }\n        }\n        else {\n            throw new Error(\"Expecting non-empty strings for containerName parameter\");\n        }\n        super(url, pipeline);\n        this._containerName = this.getContainerNameFromUrl();\n        this.containerContext = this.storageClientContext.container;\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, the operation fails.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options - Options to Container Create operation.\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const containerClient = blobServiceClient.getContainerClient(\"<container name>\");\n     * const createContainerResponse = await containerClient.create();\n     * console.log(\"Container was created successfully\", createContainerResponse.requestId);\n     * ```\n     */\n    async create(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-create\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.create(updatedOptions));\n        });\n    }\n    /**\n     * Creates a new container under the specified account. If the container with\n     * the same name already exists, it is not changed.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n     * Naming rules: @see https://learn.microsoft.com/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n     *\n     * @param options -\n     */\n    async createIfNotExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-createIfNotExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.create(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerAlreadyExists\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n    /**\n     * Returns true if the Azure container resource represented by this client exists; false otherwise.\n     *\n     * NOTE: use this function with care since an existing container might be deleted by other clients or\n     * applications. Vice versa new containers with the same name might be added by other clients or\n     * applications after this function completes.\n     *\n     * @param options -\n     */\n    async exists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-exists\", options, async (updatedOptions) => {\n            try {\n                await this.getProperties({\n                    abortSignal: options.abortSignal,\n                    tracingOptions: updatedOptions.tracingOptions,\n                });\n                return true;\n            }\n            catch (e) {\n                if (e.statusCode === 404) {\n                    return false;\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Creates a {@link BlobClient}\n     *\n     * @param blobName - A blob name\n     * @returns A new BlobClient object for the given blob name.\n     */\n    getBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.BlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates an {@link AppendBlobClient}\n     *\n     * @param blobName - An append blob name\n     */\n    getAppendBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.AppendBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link BlockBlobClient}\n     *\n     * @param blobName - A block blob name\n     *\n     *\n     * Example usage:\n     *\n     * ```js\n     * const content = \"Hello world!\";\n     *\n     * const blockBlobClient = containerClient.getBlockBlobClient(\"<blob name>\");\n     * const uploadBlobResponse = await blockBlobClient.upload(content, content.length);\n     * ```\n     */\n    getBlockBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.BlockBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Creates a {@link PageBlobClient}\n     *\n     * @param blobName - A page blob name\n     */\n    getPageBlobClient(blobName) {\n        return new _Clients__WEBPACK_IMPORTED_MODULE_9__.PageBlobClient((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLPath)(this.url, (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.EscapePath)(blobName)), this.pipeline);\n    }\n    /**\n     * Returns all user-defined metadata and system properties for the specified\n     * container. The data returned does not include the container's list of blobs.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n     *\n     * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n     * they originally contained uppercase characters. This differs from the metadata keys returned by\n     * the `listContainers` method of {@link BlobServiceClient} using the `includeMetadata` option, which\n     * will retain their original casing.\n     *\n     * @param options - Options to Container Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getProperties\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getProperties(Object.assign(Object.assign({ abortSignal: options.abortSignal }, options.conditions), { tracingOptions: updatedOptions.tracingOptions })));\n        });\n    }\n    /**\n     * Marks the specified container for deletion. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async delete(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-delete\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.delete({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Marks the specified container for deletion if it exists. The container and any blobs\n     * contained within it are later deleted during garbage collection.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n     *\n     * @param options - Options to Container Delete operation.\n     */\n    async deleteIfExists(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-deleteIfExists\", options, async (updatedOptions) => {\n            var _a, _b;\n            try {\n                const res = await this.delete(updatedOptions);\n                return Object.assign(Object.assign({ succeeded: true }, res), { _response: res._response });\n            }\n            catch (e) {\n                if (((_a = e.details) === null || _a === void 0 ? void 0 : _a.errorCode) === \"ContainerNotFound\") {\n                    return Object.assign(Object.assign({ succeeded: false }, (_b = e.response) === null || _b === void 0 ? void 0 : _b.parsedHeaders), { _response: e.response });\n                }\n                throw e;\n            }\n        });\n    }\n    /**\n     * Sets one or more user-defined name-value pairs for the specified container.\n     *\n     * If no option provided, or no metadata defined in the parameter, the container\n     * metadata will be removed.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n     *\n     * @param metadata - Replace existing metadata with this value.\n     *                            If no value provided the existing metadata will be removed.\n     * @param options - Options to Container Set Metadata operation.\n     */\n    async setMetadata(metadata, options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        if (options.conditions.ifUnmodifiedSince) {\n            throw new RangeError(\"the IfUnmodifiedSince must have their default values because they are ignored by the blob service\");\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-setMetadata\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.setMetadata({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                metadata,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Gets the permissions for the specified container. The permissions indicate\n     * whether container data may be accessed publicly.\n     *\n     * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n     * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n     *\n     * @param options - Options to Container Get Access Policy operation.\n     */\n    async getAccessPolicy(options = {}) {\n        if (!options.conditions) {\n            options.conditions = {};\n        }\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getAccessPolicy\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getAccessPolicy({\n                abortSignal: options.abortSignal,\n                leaseAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const res = {\n                _response: response._response,\n                blobPublicAccess: response.blobPublicAccess,\n                date: response.date,\n                etag: response.etag,\n                errorCode: response.errorCode,\n                lastModified: response.lastModified,\n                requestId: response.requestId,\n                clientRequestId: response.clientRequestId,\n                signedIdentifiers: [],\n                version: response.version,\n            };\n            for (const identifier of response) {\n                let accessPolicy = undefined;\n                if (identifier.accessPolicy) {\n                    accessPolicy = {\n                        permissions: identifier.accessPolicy.permissions,\n                    };\n                    if (identifier.accessPolicy.expiresOn) {\n                        accessPolicy.expiresOn = new Date(identifier.accessPolicy.expiresOn);\n                    }\n                    if (identifier.accessPolicy.startsOn) {\n                        accessPolicy.startsOn = new Date(identifier.accessPolicy.startsOn);\n                    }\n                }\n                res.signedIdentifiers.push({\n                    accessPolicy,\n                    id: identifier.id,\n                });\n            }\n            return res;\n        });\n    }\n    /**\n     * Sets the permissions for the specified container. The permissions indicate\n     * whether blobs in a container may be accessed publicly.\n     *\n     * When you set permissions for a container, the existing permissions are replaced.\n     * If no access or containerAcl provided, the existing container ACL will be\n     * removed.\n     *\n     * When you establish a stored access policy on a container, it may take up to 30 seconds to take effect.\n     * During this interval, a shared access signature that is associated with the stored access policy will\n     * fail with status code 403 (Forbidden), until the access policy becomes active.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n     *\n     * @param access - The level of public access to data in the container.\n     * @param containerAcl - Array of elements each having a unique Id and details of the access policy.\n     * @param options - Options to Container Set Access Policy operation.\n     */\n    async setAccessPolicy(access, containerAcl, options = {}) {\n        options.conditions = options.conditions || {};\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-setAccessPolicy\", options, async (updatedOptions) => {\n            const acl = [];\n            for (const identifier of containerAcl || []) {\n                acl.push({\n                    accessPolicy: {\n                        expiresOn: identifier.accessPolicy.expiresOn\n                            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.truncatedISO8061Date)(identifier.accessPolicy.expiresOn)\n                            : \"\",\n                        permissions: identifier.accessPolicy.permissions,\n                        startsOn: identifier.accessPolicy.startsOn\n                            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.truncatedISO8061Date)(identifier.accessPolicy.startsOn)\n                            : \"\",\n                    },\n                    id: identifier.id,\n                });\n            }\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.setAccessPolicy({\n                abortSignal: options.abortSignal,\n                access,\n                containerAcl: acl,\n                leaseAccessConditions: options.conditions,\n                modifiedAccessConditions: options.conditions,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    /**\n     * Get a {@link BlobLeaseClient} that manages leases on the container.\n     *\n     * @param proposeLeaseId - Initial proposed lease Id.\n     * @returns A new BlobLeaseClient object for managing leases on the container.\n     */\n    getBlobLeaseClient(proposeLeaseId) {\n        return new _BlobLeaseClient__WEBPACK_IMPORTED_MODULE_10__.BlobLeaseClient(this, proposeLeaseId);\n    }\n    /**\n     * Creates a new block blob, or updates the content of an existing block blob.\n     *\n     * Updating an existing block blob overwrites any existing metadata on the blob.\n     * Partial updates are not supported; the content of the existing blob is\n     * overwritten with the new content. To perform a partial update of a block blob's,\n     * use {@link BlockBlobClient.stageBlock} and {@link BlockBlobClient.commitBlockList}.\n     *\n     * This is a non-parallel uploading method, please use {@link BlockBlobClient.uploadFile},\n     * {@link BlockBlobClient.uploadStream} or {@link BlockBlobClient.uploadBrowserData} for better\n     * performance with concurrency uploading.\n     *\n     * @see https://docs.microsoft.com/rest/api/storageservices/put-blob\n     *\n     * @param blobName - Name of the block blob to create or update.\n     * @param body - Blob, string, ArrayBuffer, ArrayBufferView or a function\n     *                               which returns a new Readable stream whose offset is from data source beginning.\n     * @param contentLength - Length of body in bytes. Use Buffer.byteLength() to calculate body length for a\n     *                               string including non non-Base64/Hex-encoded characters.\n     * @param options - Options to configure the Block Blob Upload operation.\n     * @returns Block Blob upload response data and the corresponding BlockBlobClient instance.\n     */\n    async uploadBlockBlob(blobName, body, contentLength, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-uploadBlockBlob\", options, async (updatedOptions) => {\n            const blockBlobClient = this.getBlockBlobClient(blobName);\n            const response = await blockBlobClient.upload(body, contentLength, updatedOptions);\n            return {\n                blockBlobClient,\n                response,\n            };\n        });\n    }\n    /**\n     * Marks the specified blob or snapshot for deletion. The blob is later deleted\n     * during garbage collection. Note that in order to delete a blob, you must delete\n     * all of its snapshots. You can delete both at the same time with the Delete\n     * Blob operation.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-blob\n     *\n     * @param blobName -\n     * @param options - Options to Blob Delete operation.\n     * @returns Block blob deletion response data.\n     */\n    async deleteBlob(blobName, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-deleteBlob\", options, async (updatedOptions) => {\n            let blobClient = this.getBlobClient(blobName);\n            if (options.versionId) {\n                blobClient = blobClient.withVersion(options.versionId);\n            }\n            return blobClient.delete(updatedOptions);\n        });\n    }\n    /**\n     * listBlobFlatSegment returns a single segment of blobs starting from the\n     * specified Marker. Use an empty Marker to start enumeration from the beginning.\n     * After getting a segment, process it, and then call listBlobsFlatSegment again\n     * (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Flat Segment operation.\n     */\n    async listBlobFlatSegment(marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-listBlobFlatSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.listBlobFlatSegment(Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ConvertInternalResponseOfListBlobFlat)(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobItemInternal.name), tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blobItemInternal.blobTags), objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * listBlobHierarchySegment returns a single segment of blobs starting from\n     * the specified Marker. Use an empty Marker to start enumeration from the\n     * beginning. After getting a segment, process it, and then call listBlobsHierarchicalSegment\n     * again (passing the the previously-returned Marker) to get the next segment.\n     * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of the list to be returned with the next list operation.\n     * @param options - Options to Container List Blob Hierarchy Segment operation.\n     */\n    async listBlobHierarchySegment(delimiter, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-listBlobHierarchySegment\", options, async (updatedOptions) => {\n            var _a;\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.listBlobHierarchySegment(delimiter, Object.assign(Object.assign({ marker }, options), { tracingOptions: updatedOptions.tracingOptions })));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: Object.assign(Object.assign({}, response._response), { parsedBody: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.ConvertInternalResponseOfListBlobHierarchy)(response._response.parsedBody) }), segment: Object.assign(Object.assign({}, response.segment), { blobItems: response.segment.blobItems.map((blobItemInternal) => {\n                        const blobItem = Object.assign(Object.assign({}, blobItemInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobItemInternal.name), tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blobItemInternal.blobTags), objectReplicationSourceProperties: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.parseObjectReplicationRecord)(blobItemInternal.objectReplicationMetadata) });\n                        return blobItem;\n                    }), blobPrefixes: (_a = response.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                        const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.BlobNameToString)(blobPrefixInternal.name) });\n                        return blobPrefix;\n                    }) }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobFlatSegmentResponse\n     *\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listSegments(marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listSegments_1(marker, options = {}) {\n            let listBlobsFlatSegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsFlatSegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.listBlobFlatSegment(marker, options));\n                    marker = listBlobsFlatSegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(listBlobsFlatSegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator of {@link BlobItem} objects\n     *\n     * @param options - Options to list blobs operation.\n     */\n    listItems() {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listItems_1(options = {}) {\n            var _a, e_1, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.listSegments(marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsFlatSegmentResponse = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(listBlobsFlatSegmentResponse.segment.blobItems)));\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * // Get the containerClient before you run these snippets,\n     * // Can be obtained from `blobServiceClient.getContainerClient(\"<your-container-name>\");`\n     * let i = 1;\n     * for await (const blob of containerClient.listBlobsFlat()) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * let iter = containerClient.listBlobsFlat();\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.listBlobsFlat().byPage({ maxPageSize: 20 })) {\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.listBlobsFlat().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     *\n     * // Passing next marker as continuationToken\n     *\n     * iterator = containerClient.listBlobsFlat().byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 blob names\n     * for (const blob of response.segment.blobItems) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * @param options - Options to list blobs.\n     * @returns An asyncIterableIterator that supports paging.\n     */\n    listBlobsFlat(options = {}) {\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blobs\n        const iter = this.listItems(updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listSegments(settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerListBlobHierarchySegmentResponse\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the ContinuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The ContinuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to list blobs operation.\n     */\n    listHierarchySegments(delimiter_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listHierarchySegments_1(delimiter, marker, options = {}) {\n            let listBlobsHierarchySegmentResponse;\n            if (!!marker || marker === undefined) {\n                do {\n                    listBlobsHierarchySegmentResponse = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.listBlobHierarchySegment(delimiter, marker, options));\n                    marker = listBlobsHierarchySegmentResponse.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(listBlobsHierarchySegmentResponse));\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for {@link BlobPrefix} and {@link BlobItem} objects.\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listItemsByHierarchy(delimiter_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* listItemsByHierarchy_1(delimiter, options = {}) {\n            var _a, e_2, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.listHierarchySegments(delimiter, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const listBlobsHierarchySegmentResponse = _c;\n                    const segment = listBlobsHierarchySegmentResponse.segment;\n                    if (segment.blobPrefixes) {\n                        for (const prefix of segment.blobPrefixes) {\n                            yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(Object.assign({ kind: \"prefix\" }, prefix));\n                        }\n                    }\n                    for (const blob of segment.blobItems) {\n                        yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(Object.assign({ kind: \"blob\" }, blob));\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to list all the blobs by hierarchy.\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs by hierarchy in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * for await (const item of containerClient.listBlobsByHierarchy(\"/\")) {\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let iter = containerClient.listBlobsByHierarchy(\"/\", { prefix: \"prefix1/\" });\n     * let entity = await iter.next();\n     * while (!entity.done) {\n     *   let item = entity.value;\n     *   if (item.kind === \"prefix\") {\n     *     console.log(`\\tBlobPrefix: ${item.name}`);\n     *   } else {\n     *     console.log(`\\tBlobItem: name - ${item.name}`);\n     *   }\n     *   entity = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page\");\n     * for await (const response of containerClient.listBlobsByHierarchy(\"/\").byPage()) {\n     *   const segment = response.segment;\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a max page size:\n     *\n     * ```js\n     * console.log(\"Listing blobs by hierarchy by page, specifying a prefix and a max page size\");\n     *\n     * let i = 1;\n     * for await (const response of containerClient\n     *   .listBlobsByHierarchy(\"/\", { prefix: \"prefix2/sub1/\" })\n     *   .byPage({ maxPageSize: 2 })) {\n     *   console.log(`Page ${i++}`);\n     *   const segment = response.segment;\n     *\n     *   if (segment.blobPrefixes) {\n     *     for (const prefix of segment.blobPrefixes) {\n     *       console.log(`\\tBlobPrefix: ${prefix.name}`);\n     *     }\n     *   }\n     *\n     *   for (const blob of response.segment.blobItems) {\n     *     console.log(`\\tBlobItem: name - ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param delimiter - The character or string used to define the virtual hierarchy\n     * @param options - Options to list blobs operation.\n     */\n    listBlobsByHierarchy(delimiter, options = {}) {\n        if (delimiter === \"\") {\n            throw new RangeError(\"delimiter should contain one or more characters\");\n        }\n        const include = [];\n        if (options.includeCopy) {\n            include.push(\"copy\");\n        }\n        if (options.includeDeleted) {\n            include.push(\"deleted\");\n        }\n        if (options.includeMetadata) {\n            include.push(\"metadata\");\n        }\n        if (options.includeSnapshots) {\n            include.push(\"snapshots\");\n        }\n        if (options.includeVersions) {\n            include.push(\"versions\");\n        }\n        if (options.includeUncommitedBlobs) {\n            include.push(\"uncommittedblobs\");\n        }\n        if (options.includeTags) {\n            include.push(\"tags\");\n        }\n        if (options.includeDeletedWithVersions) {\n            include.push(\"deletedwithversions\");\n        }\n        if (options.includeImmutabilityPolicy) {\n            include.push(\"immutabilitypolicy\");\n        }\n        if (options.includeLegalHold) {\n            include.push(\"legalhold\");\n        }\n        if (options.prefix === \"\") {\n            options.prefix = undefined;\n        }\n        const updatedOptions = Object.assign(Object.assign({}, options), (include.length > 0 ? { include: include } : {}));\n        // AsyncIterableIterator to iterate over blob prefixes and blobs\n        const iter = this.listItemsByHierarchy(delimiter, updatedOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            async next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.listHierarchySegments(delimiter, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, updatedOptions));\n            },\n        };\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in the container whose tags\n     * match a given search expression.\n     *\n     * @param tagFilterSqlExpression - The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                        The given expression must evaluate to true for a blob to be returned in the results.\n     *                                        The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                        however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    async findBlobsByTagsSegment(tagFilterSqlExpression, marker, options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-findBlobsByTagsSegment\", options, async (updatedOptions) => {\n            const response = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.filterBlobs({\n                abortSignal: options.abortSignal,\n                where: tagFilterSqlExpression,\n                marker,\n                maxPageSize: options.maxPageSize,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n            const wrappedResponse = Object.assign(Object.assign({}, response), { _response: response._response, blobs: response.blobs.map((blob) => {\n                    var _a;\n                    let tagValue = \"\";\n                    if (((_a = blob.tags) === null || _a === void 0 ? void 0 : _a.blobTagSet.length) === 1) {\n                        tagValue = blob.tags.blobTagSet[0].value;\n                    }\n                    return Object.assign(Object.assign({}, blob), { tags: (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.toTags)(blob.tags), tagValue });\n                }) });\n            return wrappedResponse;\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for ContainerFindBlobsByTagsSegmentResponse.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param marker - A string value that identifies the portion of\n     *                          the list of blobs to be returned with the next listing operation. The\n     *                          operation returns the continuationToken value within the response body if the\n     *                          listing operation did not return all blobs remaining to be listed\n     *                          with the current page. The continuationToken value can be used as the value for\n     *                          the marker parameter in a subsequent call to request the next page of list\n     *                          items. The marker value is opaque to the client.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTagsSegments(tagFilterSqlExpression_1, marker_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* findBlobsByTagsSegments_1(tagFilterSqlExpression, marker, options = {}) {\n            let response;\n            if (!!marker || marker === undefined) {\n                do {\n                    response = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(this.findBlobsByTagsSegment(tagFilterSqlExpression, marker, options));\n                    response.blobs = response.blobs || [];\n                    marker = response.continuationToken;\n                    yield yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(response);\n                } while (marker);\n            }\n        });\n    }\n    /**\n     * Returns an AsyncIterableIterator for blobs.\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to findBlobsByTagsItems.\n     */\n    findBlobsByTagsItems(tagFilterSqlExpression_1) {\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncGenerator)(this, arguments, function* findBlobsByTagsItems_1(tagFilterSqlExpression, options = {}) {\n            var _a, e_3, _b, _c;\n            let marker;\n            try {\n                for (var _d = true, _e = (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(this.findBlobsByTagsSegments(tagFilterSqlExpression, marker, options)), _f; _f = yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_e.next()), _a = _f.done, !_a; _d = true) {\n                    _c = _f.value;\n                    _d = false;\n                    const segment = _c;\n                    yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(yield* (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncDelegator)((0,tslib__WEBPACK_IMPORTED_MODULE_11__.__asyncValues)(segment.blobs)));\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (!_d && !_a && (_b = _e.return)) yield (0,tslib__WEBPACK_IMPORTED_MODULE_11__.__await)(_b.call(_e));\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    }\n    /**\n     * Returns an async iterable iterator to find all blobs with specified tag\n     * under the specified container.\n     *\n     * .byPage() returns an async iterable iterator to list the blobs in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const blob of containerClient.findBlobsByTags(\"tagkey='tagvalue'\")) {\n     *   console.log(`Blob ${i++}: ${blob.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = containerClient.findBlobsByTags(\"tagkey='tagvalue'\");\n     * let blobItem = await iter.next();\n     * while (!blobItem.done) {\n     *   console.log(`Blob ${i++}: ${blobItem.value.name}`);\n     *   blobItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 20 })) {\n     *   if (response.blobs) {\n     *     for (const blob of response.blobs) {\n     *       console.log(`Blob ${i++}: ${blob.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = containerClient.findBlobsByTags(\"tagkey='tagvalue'\").byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *     console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = containerClient\n     *   .findBlobsByTags(\"tagkey='tagvalue'\")\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints blob names\n     * if (response.blobs) {\n     *   for (const blob of response.blobs) {\n     *      console.log(`Blob ${i++}: ${blob.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @param tagFilterSqlExpression -  The where parameter enables the caller to query blobs whose tags match a given expression.\n     *                                         The given expression must evaluate to true for a blob to be returned in the results.\n     *                                         The[OData - ABNF] filter syntax rule defines the formal grammar for the value of the where query parameter;\n     *                                         however, only a subset of the OData filter syntax is supported in the Blob service.\n     * @param options - Options to find blobs by tags.\n     */\n    findBlobsByTags(tagFilterSqlExpression, options = {}) {\n        // AsyncIterableIterator to iterate over blobs\n        const listSegmentOptions = Object.assign({}, options);\n        const iter = this.findBlobsByTagsItems(tagFilterSqlExpression, listSegmentOptions);\n        return {\n            /**\n             * The next method, part of the iteration protocol\n             */\n            next() {\n                return iter.next();\n            },\n            /**\n             * The connection to the async iterator, part of the iteration protocol\n             */\n            [Symbol.asyncIterator]() {\n                return this;\n            },\n            /**\n             * Return an AsyncIterableIterator that works a page at a time\n             */\n            byPage: (settings = {}) => {\n                return this.findBlobsByTagsSegments(tagFilterSqlExpression, settings.continuationToken, Object.assign({ maxPageSize: settings.maxPageSize }, listSegmentOptions));\n            },\n        };\n    }\n    /**\n     * The Get Account Information operation returns the sku name and account kind\n     * for the specified account.\n     * The Get Account Information operation is available on service versions beginning\n     * with version 2018-03-28.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-account-information\n     *\n     * @param options - Options to the Service Get Account Info operation.\n     * @returns Response data for the Service Get Account Info operation.\n     */\n    async getAccountInfo(options = {}) {\n        return _utils_tracing__WEBPACK_IMPORTED_MODULE_8__.tracingClient.withSpan(\"ContainerClient-getAccountInfo\", options, async (updatedOptions) => {\n            return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.assertResponse)(await this.containerContext.getAccountInfo({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions,\n            }));\n        });\n    }\n    getContainerNameFromUrl() {\n        let containerName;\n        try {\n            //  URL may look like the following\n            // \"https://myaccount.blob.core.windows.net/mycontainer?sasString\";\n            // \"https://myaccount.blob.core.windows.net/mycontainer\";\n            // IPv4/IPv6 address hosts, Endpoints - `http://127.0.0.1:10000/devstoreaccount1/containername`\n            // http://localhost:10001/devstoreaccount1/containername\n            const parsedUrl = new URL(this.url);\n            if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n                // \"https://myaccount.blob.core.windows.net/containername\".\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            else if ((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.isIpEndpointStyle)(parsedUrl)) {\n                // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/containername\n                // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/containername\n                // .getPath() -> /devstoreaccount1/containername\n                containerName = parsedUrl.pathname.split(\"/\")[2];\n            }\n            else {\n                // \"https://customdomain.com/containername\".\n                // .getPath() -> /containername\n                containerName = parsedUrl.pathname.split(\"/\")[1];\n            }\n            // decode the encoded containerName - to get all the special characters that might be present in it\n            containerName = decodeURIComponent(containerName);\n            if (!containerName) {\n                throw new Error(\"Provided containerName is invalid.\");\n            }\n            return containerName;\n        }\n        catch (error) {\n            throw new Error(\"Unable to extract containerName with provided information.\");\n        }\n    }\n    /**\n     * Only available for ContainerClient constructed with a shared key credential.\n     *\n     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateSasUrl(options) {\n        return new Promise((resolve) => {\n            if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n                throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n            }\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName }, options), this.credential).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Only available for ContainerClient constructed with a shared key credential.\n     *\n     * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI\n     * based on the client properties and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    generateSasStringToSign(options) {\n        if (!(this.credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_5__.StorageSharedKeyCredential)) {\n            throw new RangeError(\"Can only generate the SAS when the client is initialized with a shared key credential\");\n        }\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName }, options), this.credential).stringToSign;\n    }\n    /**\n     * Generates a Blob Container Service Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasUrl(options, userDelegationKey) {\n        return new Promise((resolve) => {\n            const sas = (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParameters)(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).toString();\n            resolve((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_7__.appendToURLQuery)(this.url, sas));\n        });\n    }\n    /**\n     * Generates string to sign for a Blob Container Service Shared Access Signature (SAS) URI\n     * based on the client properties and parameters passed in. The SAS is signed by the input user delegation key.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     * @param options - Optional parameters.\n     * @param userDelegationKey -  Return value of `blobServiceClient.getUserDelegationKey()`\n     * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateUserDelegationSasStringToSign(options, userDelegationKey) {\n        return (0,_sas_BlobSASSignatureValues__WEBPACK_IMPORTED_MODULE_12__.generateBlobSASQueryParametersInternal)(Object.assign({ containerName: this._containerName }, options), userDelegationKey, this.accountName).stringToSign;\n    }\n    /**\n     * Creates a BlobBatchClient object to conduct batch operations.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @returns A new BlobBatchClient object for this container.\n     */\n    getBlobBatchClient() {\n        return new _BlobBatchClient__WEBPACK_IMPORTED_MODULE_13__.BlobBatchClient(this.url, this.pipeline);\n    }\n}\n//# sourceMappingURL=ContainerClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/ContainerClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rangeResponseFromModel: () => (/* binding */ rangeResponseFromModel)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Function that converts PageRange and ClearRange to a common Range object.\n * PageRange and ClearRange have start and end while Range offset and count\n * this function normalizes to Range.\n * @param response - Model PageBlob Range response\n */\nfunction rangeResponseFromModel(response) {\n    const pageRange = (response._response.parsedBody.pageRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    const clearRange = (response._response.parsedBody.clearRange || []).map((x) => ({\n        offset: x.start,\n        count: x.end - x.start,\n    }));\n    return Object.assign(Object.assign({}, response), { pageRange,\n        clearRange, _response: Object.assign(Object.assign({}, response._response), { parsedBody: {\n                pageRange,\n                clearRange,\n            } }) });\n}\n//# sourceMappingURL=PageBlobRangeResponse.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/PageBlobRangeResponse.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Pipeline: () => (/* binding */ Pipeline),\n/* harmony export */   StorageOAuthScopes: () => (/* reexport safe */ _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageOAuthScopes),\n/* harmony export */   getCoreClientOptions: () => (/* binding */ getCoreClientOptions),\n/* harmony export */   getCredentialFromPipeline: () => (/* binding */ getCredentialFromPipeline),\n/* harmony export */   isPipelineLike: () => (/* binding */ isPipelineLike),\n/* harmony export */   newPipeline: () => (/* binding */ newPipeline)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http-compat */ \"./node_modules/@azure/core-http-compat/dist/browser/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @azure/core-xml */ \"./node_modules/@azure/core-xml/dist/browser/index.js\");\n/* harmony import */ var _azure_core_auth__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-auth */ \"./node_modules/@azure/core-auth/dist/browser/index.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./log */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n/* harmony import */ var _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./StorageRetryPolicyFactory */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./credentials/StorageSharedKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js\");\n/* harmony import */ var _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./credentials/AnonymousCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_cache__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/cache */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js\");\n/* harmony import */ var _policies_StorageBrowserPolicyV2__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/StorageBrowserPolicyV2 */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js\");\n/* harmony import */ var _policies_StorageRetryPolicyV2__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/StorageRetryPolicyV2 */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js\");\n/* harmony import */ var _policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/StorageSharedKeyCredentialPolicyV2 */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js\");\n/* harmony import */ var _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./StorageBrowserPolicyFactory */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js\");\n/* harmony import */ var _policies_StorageCorrectContentLengthPolicy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/StorageCorrectContentLengthPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\n\n/**\n * A helper to decide if a given argument satisfies the Pipeline contract\n * @param pipeline - An argument that may be a Pipeline\n * @returns true when the argument satisfies the Pipeline contract\n */\nfunction isPipelineLike(pipeline) {\n    if (!pipeline || typeof pipeline !== \"object\") {\n        return false;\n    }\n    const castPipeline = pipeline;\n    return (Array.isArray(castPipeline.factories) &&\n        typeof castPipeline.options === \"object\" &&\n        typeof castPipeline.toServiceClientOptions === \"function\");\n}\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nclass Pipeline {\n    /**\n     * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n     *\n     * @param factories -\n     * @param options -\n     */\n    constructor(factories, options = {}) {\n        this.factories = factories;\n        this.options = options;\n    }\n    /**\n     * Transfer Pipeline object to ServiceClientOptions object which is required by\n     * ServiceClient constructor.\n     *\n     * @returns The ServiceClientOptions object from this Pipeline.\n     */\n    toServiceClientOptions() {\n        return {\n            httpClient: this.options.httpClient,\n            requestPolicyFactories: this.factories,\n        };\n    }\n}\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nfunction newPipeline(credential, pipelineOptions = {}) {\n    if (!credential) {\n        credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential();\n    }\n    const pipeline = new Pipeline([], pipelineOptions);\n    pipeline._credential = credential;\n    return pipeline;\n}\nfunction processDownlevelPipeline(pipeline) {\n    const knownFactoryFunctions = [\n        isAnonymousCredential,\n        isStorageSharedKeyCredential,\n        isCoreHttpBearerTokenFactory,\n        isStorageBrowserPolicyFactory,\n        isStorageRetryPolicyFactory,\n        isStorageTelemetryPolicyFactory,\n        isCoreHttpPolicyFactory,\n    ];\n    if (pipeline.factories.length) {\n        const novelFactories = pipeline.factories.filter((factory) => {\n            return !knownFactoryFunctions.some((knownFactory) => knownFactory(factory));\n        });\n        if (novelFactories.length) {\n            const hasInjector = novelFactories.some((factory) => isInjectorPolicyFactory(factory));\n            // if there are any left over, wrap in a requestPolicyFactoryPolicy\n            return {\n                wrappedPolicies: (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.createRequestPolicyFactoryPolicy)(novelFactories),\n                afterRetry: hasInjector,\n            };\n        }\n    }\n    return undefined;\n}\nfunction getCoreClientOptions(pipeline) {\n    var _a;\n    const _b = pipeline.options, { httpClient: v1Client } = _b, restOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_7__.__rest)(_b, [\"httpClient\"]);\n    let httpClient = pipeline._coreHttpClient;\n    if (!httpClient) {\n        httpClient = v1Client ? (0,_azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.convertHttpClient)(v1Client) : (0,_utils_cache__WEBPACK_IMPORTED_MODULE_8__.getCachedDefaultHttpClient)();\n        pipeline._coreHttpClient = httpClient;\n    }\n    let corePipeline = pipeline._corePipeline;\n    if (!corePipeline) {\n        const packageDetails = `azsdk-js-azure-storage-blob/${_utils_constants__WEBPACK_IMPORTED_MODULE_5__.SDK_VERSION}`;\n        const userAgentPrefix = restOptions.userAgentOptions && restOptions.userAgentOptions.userAgentPrefix\n            ? `${restOptions.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        corePipeline = (0,_azure_core_client__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline)(Object.assign(Object.assign({}, restOptions), { loggingOptions: {\n                additionalAllowedHeaderNames: _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageBlobLoggingAllowedHeaderNames,\n                additionalAllowedQueryParameters: _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageBlobLoggingAllowedQueryParameters,\n                logger: _log__WEBPACK_IMPORTED_MODULE_9__.logger.info,\n            }, userAgentOptions: {\n                userAgentPrefix,\n            }, serializationOptions: {\n                stringifyXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.stringifyXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            }, deserializationOptions: {\n                parseXML: _azure_core_xml__WEBPACK_IMPORTED_MODULE_3__.parseXML,\n                serializerOptions: {\n                    xml: {\n                        // Use customized XML char key of \"#\" so we can deserialize metadata\n                        // with \"_\" key\n                        xmlCharKey: \"#\",\n                    },\n                },\n            } }));\n        corePipeline.removePolicy({ phase: \"Retry\" });\n        corePipeline.removePolicy({ name: _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.decompressResponsePolicyName });\n        corePipeline.addPolicy((0,_policies_StorageCorrectContentLengthPolicy__WEBPACK_IMPORTED_MODULE_10__.storageCorrectContentLengthPolicy)());\n        corePipeline.addPolicy((0,_policies_StorageRetryPolicyV2__WEBPACK_IMPORTED_MODULE_11__.storageRetryPolicy)(restOptions.retryOptions), { phase: \"Retry\" });\n        corePipeline.addPolicy((0,_policies_StorageBrowserPolicyV2__WEBPACK_IMPORTED_MODULE_12__.storageBrowserPolicy)());\n        const downlevelResults = processDownlevelPipeline(pipeline);\n        if (downlevelResults) {\n            corePipeline.addPolicy(downlevelResults.wrappedPolicies, downlevelResults.afterRetry ? { afterPhase: \"Retry\" } : undefined);\n        }\n        const credential = getCredentialFromPipeline(pipeline);\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(credential)) {\n            corePipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n                credential,\n                scopes: (_a = restOptions.audience) !== null && _a !== void 0 ? _a : _utils_constants__WEBPACK_IMPORTED_MODULE_5__.StorageOAuthScopes,\n                challengeCallbacks: { authorizeRequestOnChallenge: _azure_core_client__WEBPACK_IMPORTED_MODULE_2__.authorizeRequestOnTenantChallenge },\n            }), { phase: \"Sign\" });\n        }\n        else if (credential instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_13__.StorageSharedKeyCredential) {\n            corePipeline.addPolicy((0,_policies_StorageSharedKeyCredentialPolicyV2__WEBPACK_IMPORTED_MODULE_14__.storageSharedKeyCredentialPolicy)({\n                accountName: credential.accountName,\n                accountKey: credential.accountKey,\n            }), { phase: \"Sign\" });\n        }\n        pipeline._corePipeline = corePipeline;\n    }\n    return Object.assign(Object.assign({}, restOptions), { allowInsecureConnection: true, httpClient, pipeline: corePipeline });\n}\nfunction getCredentialFromPipeline(pipeline) {\n    // see if we squirreled one away on the type itself\n    if (pipeline._credential) {\n        return pipeline._credential;\n    }\n    // if it came from another package, loop over the factories and look for one like before\n    let credential = new _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential();\n    for (const factory of pipeline.factories) {\n        if ((0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(factory.credential)) {\n            // Only works if the factory has been attached a \"credential\" property.\n            // We do that in newPipeline() when using TokenCredential.\n            credential = factory.credential;\n        }\n        else if (isStorageSharedKeyCredential(factory)) {\n            return factory;\n        }\n    }\n    return credential;\n}\nfunction isStorageSharedKeyCredential(factory) {\n    if (factory instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_13__.StorageSharedKeyCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageSharedKeyCredential\";\n}\nfunction isAnonymousCredential(factory) {\n    if (factory instanceof _credentials_AnonymousCredential__WEBPACK_IMPORTED_MODULE_6__.AnonymousCredential) {\n        return true;\n    }\n    return factory.constructor.name === \"AnonymousCredential\";\n}\nfunction isCoreHttpBearerTokenFactory(factory) {\n    return (0,_azure_core_auth__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)(factory.credential);\n}\nfunction isStorageBrowserPolicyFactory(factory) {\n    if (factory instanceof _StorageBrowserPolicyFactory__WEBPACK_IMPORTED_MODULE_15__.StorageBrowserPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageBrowserPolicyFactory\";\n}\nfunction isStorageRetryPolicyFactory(factory) {\n    if (factory instanceof _StorageRetryPolicyFactory__WEBPACK_IMPORTED_MODULE_16__.StorageRetryPolicyFactory) {\n        return true;\n    }\n    return factory.constructor.name === \"StorageRetryPolicyFactory\";\n}\nfunction isStorageTelemetryPolicyFactory(factory) {\n    return factory.constructor.name === \"TelemetryPolicyFactory\";\n}\nfunction isInjectorPolicyFactory(factory) {\n    return factory.constructor.name === \"InjectorPolicyFactory\";\n}\nfunction isCoreHttpPolicyFactory(factory) {\n    const knownPolicies = [\n        \"GenerateClientRequestIdPolicy\",\n        \"TracingPolicy\",\n        \"LogPolicy\",\n        \"ProxyPolicy\",\n        \"DisableResponseDecompressionPolicy\",\n        \"KeepAlivePolicy\",\n        \"DeserializationPolicy\",\n    ];\n    const mockHttpClient = {\n        sendRequest: async (request) => {\n            return {\n                request,\n                headers: request.headers.clone(),\n                status: 500,\n            };\n        },\n    };\n    const mockRequestPolicyOptions = {\n        log(_logLevel, _message) {\n            /* do nothing */\n        },\n        shouldLog(_logLevel) {\n            return false;\n        },\n    };\n    const policyInstance = factory.create(mockHttpClient, mockRequestPolicyOptions);\n    const policyName = policyInstance.constructor.name;\n    // bundlers sometimes add a custom suffix to the class name to make it unique\n    return knownPolicies.some((knownPolicyName) => {\n        return policyName.startsWith(knownPolicyName);\n    });\n}\n//# sourceMappingURL=Pipeline.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rangeToString: () => (/* binding */ rangeToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generate a range string. For example:\n *\n * \"bytes=255-\" or \"bytes=0-511\"\n *\n * @param iRange -\n */\nfunction rangeToString(iRange) {\n    if (iRange.offset < 0) {\n        throw new RangeError(`Range.offset cannot be smaller than 0.`);\n    }\n    if (iRange.count && iRange.count <= 0) {\n        throw new RangeError(`Range.count must be larger than 0. Leave it undefined if you want a range from offset to the end.`);\n    }\n    return iRange.count\n        ? `bytes=${iRange.offset}-${iRange.offset + iRange.count - 1}`\n        : `bytes=${iRange.offset}-`;\n}\n//# sourceMappingURL=Range.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Range.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageBrowserPolicy: () => (/* reexport safe */ _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageBrowserPolicy),\n/* harmony export */   StorageBrowserPolicyFactory: () => (/* binding */ StorageBrowserPolicyFactory)\n/* harmony export */ });\n/* harmony import */ var _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageBrowserPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nclass StorageBrowserPolicyFactory {\n    /**\n     * Creates a StorageBrowserPolicyFactory object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageBrowserPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageBrowserPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicyFactory.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageBrowserPolicyFactory.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _StorageContextClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StorageContextClient */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js\");\n/* harmony import */ var _Pipeline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pipeline */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/Pipeline.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nclass StorageClient {\n    /**\n     * Creates an instance of StorageClient.\n     * @param url - url to resource\n     * @param pipeline - request policy pipeline.\n     */\n    constructor(url, pipeline) {\n        // URL should be encoded and only once, protocol layer shouldn't encode URL again\n        this.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.escapeURLPath)(url);\n        this.accountName = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.getAccountNameFromUrl)(url);\n        this.pipeline = pipeline;\n        this.storageClientContext = new _StorageContextClient__WEBPACK_IMPORTED_MODULE_1__.StorageContextClient(this.url, (0,_Pipeline__WEBPACK_IMPORTED_MODULE_2__.getCoreClientOptions)(pipeline));\n        this.isHttps = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.iEqual)((0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.getURLScheme)(this.url) || \"\", \"https\");\n        this.credential = (0,_Pipeline__WEBPACK_IMPORTED_MODULE_2__.getCredentialFromPipeline)(pipeline);\n        // Override protocol layer's default content-type\n        const storageClientContext = this.storageClientContext;\n        storageClientContext.requestContentType = undefined;\n    }\n}\n//# sourceMappingURL=StorageClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageContextClient: () => (/* binding */ StorageContextClient)\n/* harmony export */ });\n/* harmony import */ var _generated_src__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/src */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * @internal\n */\nclass StorageContextClient extends _generated_src__WEBPACK_IMPORTED_MODULE_0__.StorageClient {\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const operationSpecToSend = Object.assign({}, operationSpec);\n        if (operationSpecToSend.path === \"/{containerName}\" ||\n            operationSpecToSend.path === \"/{containerName}/{blob}\") {\n            operationSpecToSend.path = \"\";\n        }\n        return super.sendOperationRequest(operationArguments, operationSpecToSend);\n    }\n}\n//# sourceMappingURL=StorageContextClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageContextClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageRetryPolicy: () => (/* reexport safe */ _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyFactory: () => (/* binding */ StorageRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicyType: () => (/* reexport safe */ _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicyType)\n/* harmony export */ });\n/* harmony import */ var _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/StorageRetryPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nclass StorageRetryPolicyFactory {\n    /**\n     * Creates an instance of StorageRetryPolicyFactory.\n     * @param retryOptions -\n     */\n    constructor(retryOptions) {\n        this.retryOptions = retryOptions;\n    }\n    /**\n     * Creates a StorageRetryPolicy object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_StorageRetryPolicy__WEBPACK_IMPORTED_MODULE_0__.StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicyFactory.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/StorageRetryPolicyFactory.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCredential: () => (/* binding */ AnonymousCredential)\n/* harmony export */ });\n/* harmony import */ var _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../policies/AnonymousCredentialPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js\");\n/* harmony import */ var _Credential__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Credential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nclass AnonymousCredential extends _Credential__WEBPACK_IMPORTED_MODULE_0__.Credential {\n    /**\n     * Creates an {@link AnonymousCredentialPolicy} object.\n     *\n     * @param nextPolicy -\n     * @param options -\n     */\n    create(nextPolicy, options) {\n        return new _policies_AnonymousCredentialPolicy__WEBPACK_IMPORTED_MODULE_1__.AnonymousCredentialPolicy(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/AnonymousCredential.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Credential: () => (/* binding */ Credential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nclass Credential {\n    /**\n     * Creates a RequestPolicy object.\n     *\n     * @param _nextPolicy -\n     * @param _options -\n     */\n    create(_nextPolicy, _options) {\n        throw new Error(\"Method should be implemented in children classes.\");\n    }\n}\n//# sourceMappingURL=Credential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/Credential.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageSharedKeyCredential: () => (/* binding */ StorageSharedKeyCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nclass StorageSharedKeyCredential {\n}\n//# sourceMappingURL=StorageSharedKeyCredential.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UserDelegationKeyCredential: () => (/* binding */ UserDelegationKeyCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nclass UserDelegationKeyCredential {\n}\n//# sourceMappingURL=UserDelegationKeyCredential.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessPolicy: () => (/* binding */ AccessPolicy),\n/* harmony export */   AppendBlobAppendBlockExceptionHeaders: () => (/* binding */ AppendBlobAppendBlockExceptionHeaders),\n/* harmony export */   AppendBlobAppendBlockFromUrlExceptionHeaders: () => (/* binding */ AppendBlobAppendBlockFromUrlExceptionHeaders),\n/* harmony export */   AppendBlobAppendBlockFromUrlHeaders: () => (/* binding */ AppendBlobAppendBlockFromUrlHeaders),\n/* harmony export */   AppendBlobAppendBlockHeaders: () => (/* binding */ AppendBlobAppendBlockHeaders),\n/* harmony export */   AppendBlobCreateExceptionHeaders: () => (/* binding */ AppendBlobCreateExceptionHeaders),\n/* harmony export */   AppendBlobCreateHeaders: () => (/* binding */ AppendBlobCreateHeaders),\n/* harmony export */   AppendBlobSealExceptionHeaders: () => (/* binding */ AppendBlobSealExceptionHeaders),\n/* harmony export */   AppendBlobSealHeaders: () => (/* binding */ AppendBlobSealHeaders),\n/* harmony export */   ArrowConfiguration: () => (/* binding */ ArrowConfiguration),\n/* harmony export */   ArrowField: () => (/* binding */ ArrowField),\n/* harmony export */   BlobAbortCopyFromURLExceptionHeaders: () => (/* binding */ BlobAbortCopyFromURLExceptionHeaders),\n/* harmony export */   BlobAbortCopyFromURLHeaders: () => (/* binding */ BlobAbortCopyFromURLHeaders),\n/* harmony export */   BlobAcquireLeaseExceptionHeaders: () => (/* binding */ BlobAcquireLeaseExceptionHeaders),\n/* harmony export */   BlobAcquireLeaseHeaders: () => (/* binding */ BlobAcquireLeaseHeaders),\n/* harmony export */   BlobBreakLeaseExceptionHeaders: () => (/* binding */ BlobBreakLeaseExceptionHeaders),\n/* harmony export */   BlobBreakLeaseHeaders: () => (/* binding */ BlobBreakLeaseHeaders),\n/* harmony export */   BlobChangeLeaseExceptionHeaders: () => (/* binding */ BlobChangeLeaseExceptionHeaders),\n/* harmony export */   BlobChangeLeaseHeaders: () => (/* binding */ BlobChangeLeaseHeaders),\n/* harmony export */   BlobCopyFromURLExceptionHeaders: () => (/* binding */ BlobCopyFromURLExceptionHeaders),\n/* harmony export */   BlobCopyFromURLHeaders: () => (/* binding */ BlobCopyFromURLHeaders),\n/* harmony export */   BlobCreateSnapshotExceptionHeaders: () => (/* binding */ BlobCreateSnapshotExceptionHeaders),\n/* harmony export */   BlobCreateSnapshotHeaders: () => (/* binding */ BlobCreateSnapshotHeaders),\n/* harmony export */   BlobDeleteExceptionHeaders: () => (/* binding */ BlobDeleteExceptionHeaders),\n/* harmony export */   BlobDeleteHeaders: () => (/* binding */ BlobDeleteHeaders),\n/* harmony export */   BlobDeleteImmutabilityPolicyExceptionHeaders: () => (/* binding */ BlobDeleteImmutabilityPolicyExceptionHeaders),\n/* harmony export */   BlobDeleteImmutabilityPolicyHeaders: () => (/* binding */ BlobDeleteImmutabilityPolicyHeaders),\n/* harmony export */   BlobDownloadExceptionHeaders: () => (/* binding */ BlobDownloadExceptionHeaders),\n/* harmony export */   BlobDownloadHeaders: () => (/* binding */ BlobDownloadHeaders),\n/* harmony export */   BlobFlatListSegment: () => (/* binding */ BlobFlatListSegment),\n/* harmony export */   BlobGetAccountInfoExceptionHeaders: () => (/* binding */ BlobGetAccountInfoExceptionHeaders),\n/* harmony export */   BlobGetAccountInfoHeaders: () => (/* binding */ BlobGetAccountInfoHeaders),\n/* harmony export */   BlobGetPropertiesExceptionHeaders: () => (/* binding */ BlobGetPropertiesExceptionHeaders),\n/* harmony export */   BlobGetPropertiesHeaders: () => (/* binding */ BlobGetPropertiesHeaders),\n/* harmony export */   BlobGetTagsExceptionHeaders: () => (/* binding */ BlobGetTagsExceptionHeaders),\n/* harmony export */   BlobGetTagsHeaders: () => (/* binding */ BlobGetTagsHeaders),\n/* harmony export */   BlobHierarchyListSegment: () => (/* binding */ BlobHierarchyListSegment),\n/* harmony export */   BlobItemInternal: () => (/* binding */ BlobItemInternal),\n/* harmony export */   BlobName: () => (/* binding */ BlobName),\n/* harmony export */   BlobPrefix: () => (/* binding */ BlobPrefix),\n/* harmony export */   BlobPropertiesInternal: () => (/* binding */ BlobPropertiesInternal),\n/* harmony export */   BlobQueryExceptionHeaders: () => (/* binding */ BlobQueryExceptionHeaders),\n/* harmony export */   BlobQueryHeaders: () => (/* binding */ BlobQueryHeaders),\n/* harmony export */   BlobReleaseLeaseExceptionHeaders: () => (/* binding */ BlobReleaseLeaseExceptionHeaders),\n/* harmony export */   BlobReleaseLeaseHeaders: () => (/* binding */ BlobReleaseLeaseHeaders),\n/* harmony export */   BlobRenewLeaseExceptionHeaders: () => (/* binding */ BlobRenewLeaseExceptionHeaders),\n/* harmony export */   BlobRenewLeaseHeaders: () => (/* binding */ BlobRenewLeaseHeaders),\n/* harmony export */   BlobServiceProperties: () => (/* binding */ BlobServiceProperties),\n/* harmony export */   BlobServiceStatistics: () => (/* binding */ BlobServiceStatistics),\n/* harmony export */   BlobSetExpiryExceptionHeaders: () => (/* binding */ BlobSetExpiryExceptionHeaders),\n/* harmony export */   BlobSetExpiryHeaders: () => (/* binding */ BlobSetExpiryHeaders),\n/* harmony export */   BlobSetHttpHeadersExceptionHeaders: () => (/* binding */ BlobSetHttpHeadersExceptionHeaders),\n/* harmony export */   BlobSetHttpHeadersHeaders: () => (/* binding */ BlobSetHttpHeadersHeaders),\n/* harmony export */   BlobSetImmutabilityPolicyExceptionHeaders: () => (/* binding */ BlobSetImmutabilityPolicyExceptionHeaders),\n/* harmony export */   BlobSetImmutabilityPolicyHeaders: () => (/* binding */ BlobSetImmutabilityPolicyHeaders),\n/* harmony export */   BlobSetLegalHoldExceptionHeaders: () => (/* binding */ BlobSetLegalHoldExceptionHeaders),\n/* harmony export */   BlobSetLegalHoldHeaders: () => (/* binding */ BlobSetLegalHoldHeaders),\n/* harmony export */   BlobSetMetadataExceptionHeaders: () => (/* binding */ BlobSetMetadataExceptionHeaders),\n/* harmony export */   BlobSetMetadataHeaders: () => (/* binding */ BlobSetMetadataHeaders),\n/* harmony export */   BlobSetTagsExceptionHeaders: () => (/* binding */ BlobSetTagsExceptionHeaders),\n/* harmony export */   BlobSetTagsHeaders: () => (/* binding */ BlobSetTagsHeaders),\n/* harmony export */   BlobSetTierExceptionHeaders: () => (/* binding */ BlobSetTierExceptionHeaders),\n/* harmony export */   BlobSetTierHeaders: () => (/* binding */ BlobSetTierHeaders),\n/* harmony export */   BlobStartCopyFromURLExceptionHeaders: () => (/* binding */ BlobStartCopyFromURLExceptionHeaders),\n/* harmony export */   BlobStartCopyFromURLHeaders: () => (/* binding */ BlobStartCopyFromURLHeaders),\n/* harmony export */   BlobTag: () => (/* binding */ BlobTag),\n/* harmony export */   BlobTags: () => (/* binding */ BlobTags),\n/* harmony export */   BlobUndeleteExceptionHeaders: () => (/* binding */ BlobUndeleteExceptionHeaders),\n/* harmony export */   BlobUndeleteHeaders: () => (/* binding */ BlobUndeleteHeaders),\n/* harmony export */   Block: () => (/* binding */ Block),\n/* harmony export */   BlockBlobCommitBlockListExceptionHeaders: () => (/* binding */ BlockBlobCommitBlockListExceptionHeaders),\n/* harmony export */   BlockBlobCommitBlockListHeaders: () => (/* binding */ BlockBlobCommitBlockListHeaders),\n/* harmony export */   BlockBlobGetBlockListExceptionHeaders: () => (/* binding */ BlockBlobGetBlockListExceptionHeaders),\n/* harmony export */   BlockBlobGetBlockListHeaders: () => (/* binding */ BlockBlobGetBlockListHeaders),\n/* harmony export */   BlockBlobPutBlobFromUrlExceptionHeaders: () => (/* binding */ BlockBlobPutBlobFromUrlExceptionHeaders),\n/* harmony export */   BlockBlobPutBlobFromUrlHeaders: () => (/* binding */ BlockBlobPutBlobFromUrlHeaders),\n/* harmony export */   BlockBlobStageBlockExceptionHeaders: () => (/* binding */ BlockBlobStageBlockExceptionHeaders),\n/* harmony export */   BlockBlobStageBlockFromURLExceptionHeaders: () => (/* binding */ BlockBlobStageBlockFromURLExceptionHeaders),\n/* harmony export */   BlockBlobStageBlockFromURLHeaders: () => (/* binding */ BlockBlobStageBlockFromURLHeaders),\n/* harmony export */   BlockBlobStageBlockHeaders: () => (/* binding */ BlockBlobStageBlockHeaders),\n/* harmony export */   BlockBlobUploadExceptionHeaders: () => (/* binding */ BlockBlobUploadExceptionHeaders),\n/* harmony export */   BlockBlobUploadHeaders: () => (/* binding */ BlockBlobUploadHeaders),\n/* harmony export */   BlockList: () => (/* binding */ BlockList),\n/* harmony export */   BlockLookupList: () => (/* binding */ BlockLookupList),\n/* harmony export */   ClearRange: () => (/* binding */ ClearRange),\n/* harmony export */   ContainerAcquireLeaseExceptionHeaders: () => (/* binding */ ContainerAcquireLeaseExceptionHeaders),\n/* harmony export */   ContainerAcquireLeaseHeaders: () => (/* binding */ ContainerAcquireLeaseHeaders),\n/* harmony export */   ContainerBreakLeaseExceptionHeaders: () => (/* binding */ ContainerBreakLeaseExceptionHeaders),\n/* harmony export */   ContainerBreakLeaseHeaders: () => (/* binding */ ContainerBreakLeaseHeaders),\n/* harmony export */   ContainerChangeLeaseExceptionHeaders: () => (/* binding */ ContainerChangeLeaseExceptionHeaders),\n/* harmony export */   ContainerChangeLeaseHeaders: () => (/* binding */ ContainerChangeLeaseHeaders),\n/* harmony export */   ContainerCreateExceptionHeaders: () => (/* binding */ ContainerCreateExceptionHeaders),\n/* harmony export */   ContainerCreateHeaders: () => (/* binding */ ContainerCreateHeaders),\n/* harmony export */   ContainerDeleteExceptionHeaders: () => (/* binding */ ContainerDeleteExceptionHeaders),\n/* harmony export */   ContainerDeleteHeaders: () => (/* binding */ ContainerDeleteHeaders),\n/* harmony export */   ContainerFilterBlobsExceptionHeaders: () => (/* binding */ ContainerFilterBlobsExceptionHeaders),\n/* harmony export */   ContainerFilterBlobsHeaders: () => (/* binding */ ContainerFilterBlobsHeaders),\n/* harmony export */   ContainerGetAccessPolicyExceptionHeaders: () => (/* binding */ ContainerGetAccessPolicyExceptionHeaders),\n/* harmony export */   ContainerGetAccessPolicyHeaders: () => (/* binding */ ContainerGetAccessPolicyHeaders),\n/* harmony export */   ContainerGetAccountInfoExceptionHeaders: () => (/* binding */ ContainerGetAccountInfoExceptionHeaders),\n/* harmony export */   ContainerGetAccountInfoHeaders: () => (/* binding */ ContainerGetAccountInfoHeaders),\n/* harmony export */   ContainerGetPropertiesExceptionHeaders: () => (/* binding */ ContainerGetPropertiesExceptionHeaders),\n/* harmony export */   ContainerGetPropertiesHeaders: () => (/* binding */ ContainerGetPropertiesHeaders),\n/* harmony export */   ContainerItem: () => (/* binding */ ContainerItem),\n/* harmony export */   ContainerListBlobFlatSegmentExceptionHeaders: () => (/* binding */ ContainerListBlobFlatSegmentExceptionHeaders),\n/* harmony export */   ContainerListBlobFlatSegmentHeaders: () => (/* binding */ ContainerListBlobFlatSegmentHeaders),\n/* harmony export */   ContainerListBlobHierarchySegmentExceptionHeaders: () => (/* binding */ ContainerListBlobHierarchySegmentExceptionHeaders),\n/* harmony export */   ContainerListBlobHierarchySegmentHeaders: () => (/* binding */ ContainerListBlobHierarchySegmentHeaders),\n/* harmony export */   ContainerProperties: () => (/* binding */ ContainerProperties),\n/* harmony export */   ContainerReleaseLeaseExceptionHeaders: () => (/* binding */ ContainerReleaseLeaseExceptionHeaders),\n/* harmony export */   ContainerReleaseLeaseHeaders: () => (/* binding */ ContainerReleaseLeaseHeaders),\n/* harmony export */   ContainerRenameExceptionHeaders: () => (/* binding */ ContainerRenameExceptionHeaders),\n/* harmony export */   ContainerRenameHeaders: () => (/* binding */ ContainerRenameHeaders),\n/* harmony export */   ContainerRenewLeaseExceptionHeaders: () => (/* binding */ ContainerRenewLeaseExceptionHeaders),\n/* harmony export */   ContainerRenewLeaseHeaders: () => (/* binding */ ContainerRenewLeaseHeaders),\n/* harmony export */   ContainerRestoreExceptionHeaders: () => (/* binding */ ContainerRestoreExceptionHeaders),\n/* harmony export */   ContainerRestoreHeaders: () => (/* binding */ ContainerRestoreHeaders),\n/* harmony export */   ContainerSetAccessPolicyExceptionHeaders: () => (/* binding */ ContainerSetAccessPolicyExceptionHeaders),\n/* harmony export */   ContainerSetAccessPolicyHeaders: () => (/* binding */ ContainerSetAccessPolicyHeaders),\n/* harmony export */   ContainerSetMetadataExceptionHeaders: () => (/* binding */ ContainerSetMetadataExceptionHeaders),\n/* harmony export */   ContainerSetMetadataHeaders: () => (/* binding */ ContainerSetMetadataHeaders),\n/* harmony export */   ContainerSubmitBatchExceptionHeaders: () => (/* binding */ ContainerSubmitBatchExceptionHeaders),\n/* harmony export */   ContainerSubmitBatchHeaders: () => (/* binding */ ContainerSubmitBatchHeaders),\n/* harmony export */   CorsRule: () => (/* binding */ CorsRule),\n/* harmony export */   DelimitedTextConfiguration: () => (/* binding */ DelimitedTextConfiguration),\n/* harmony export */   FilterBlobItem: () => (/* binding */ FilterBlobItem),\n/* harmony export */   FilterBlobSegment: () => (/* binding */ FilterBlobSegment),\n/* harmony export */   GeoReplication: () => (/* binding */ GeoReplication),\n/* harmony export */   JsonTextConfiguration: () => (/* binding */ JsonTextConfiguration),\n/* harmony export */   KeyInfo: () => (/* binding */ KeyInfo),\n/* harmony export */   ListBlobsFlatSegmentResponse: () => (/* binding */ ListBlobsFlatSegmentResponse),\n/* harmony export */   ListBlobsHierarchySegmentResponse: () => (/* binding */ ListBlobsHierarchySegmentResponse),\n/* harmony export */   ListContainersSegmentResponse: () => (/* binding */ ListContainersSegmentResponse),\n/* harmony export */   Logging: () => (/* binding */ Logging),\n/* harmony export */   Metrics: () => (/* binding */ Metrics),\n/* harmony export */   PageBlobClearPagesExceptionHeaders: () => (/* binding */ PageBlobClearPagesExceptionHeaders),\n/* harmony export */   PageBlobClearPagesHeaders: () => (/* binding */ PageBlobClearPagesHeaders),\n/* harmony export */   PageBlobCopyIncrementalExceptionHeaders: () => (/* binding */ PageBlobCopyIncrementalExceptionHeaders),\n/* harmony export */   PageBlobCopyIncrementalHeaders: () => (/* binding */ PageBlobCopyIncrementalHeaders),\n/* harmony export */   PageBlobCreateExceptionHeaders: () => (/* binding */ PageBlobCreateExceptionHeaders),\n/* harmony export */   PageBlobCreateHeaders: () => (/* binding */ PageBlobCreateHeaders),\n/* harmony export */   PageBlobGetPageRangesDiffExceptionHeaders: () => (/* binding */ PageBlobGetPageRangesDiffExceptionHeaders),\n/* harmony export */   PageBlobGetPageRangesDiffHeaders: () => (/* binding */ PageBlobGetPageRangesDiffHeaders),\n/* harmony export */   PageBlobGetPageRangesExceptionHeaders: () => (/* binding */ PageBlobGetPageRangesExceptionHeaders),\n/* harmony export */   PageBlobGetPageRangesHeaders: () => (/* binding */ PageBlobGetPageRangesHeaders),\n/* harmony export */   PageBlobResizeExceptionHeaders: () => (/* binding */ PageBlobResizeExceptionHeaders),\n/* harmony export */   PageBlobResizeHeaders: () => (/* binding */ PageBlobResizeHeaders),\n/* harmony export */   PageBlobUpdateSequenceNumberExceptionHeaders: () => (/* binding */ PageBlobUpdateSequenceNumberExceptionHeaders),\n/* harmony export */   PageBlobUpdateSequenceNumberHeaders: () => (/* binding */ PageBlobUpdateSequenceNumberHeaders),\n/* harmony export */   PageBlobUploadPagesExceptionHeaders: () => (/* binding */ PageBlobUploadPagesExceptionHeaders),\n/* harmony export */   PageBlobUploadPagesFromURLExceptionHeaders: () => (/* binding */ PageBlobUploadPagesFromURLExceptionHeaders),\n/* harmony export */   PageBlobUploadPagesFromURLHeaders: () => (/* binding */ PageBlobUploadPagesFromURLHeaders),\n/* harmony export */   PageBlobUploadPagesHeaders: () => (/* binding */ PageBlobUploadPagesHeaders),\n/* harmony export */   PageList: () => (/* binding */ PageList),\n/* harmony export */   PageRange: () => (/* binding */ PageRange),\n/* harmony export */   QueryFormat: () => (/* binding */ QueryFormat),\n/* harmony export */   QueryRequest: () => (/* binding */ QueryRequest),\n/* harmony export */   QuerySerialization: () => (/* binding */ QuerySerialization),\n/* harmony export */   RetentionPolicy: () => (/* binding */ RetentionPolicy),\n/* harmony export */   ServiceFilterBlobsExceptionHeaders: () => (/* binding */ ServiceFilterBlobsExceptionHeaders),\n/* harmony export */   ServiceFilterBlobsHeaders: () => (/* binding */ ServiceFilterBlobsHeaders),\n/* harmony export */   ServiceGetAccountInfoExceptionHeaders: () => (/* binding */ ServiceGetAccountInfoExceptionHeaders),\n/* harmony export */   ServiceGetAccountInfoHeaders: () => (/* binding */ ServiceGetAccountInfoHeaders),\n/* harmony export */   ServiceGetPropertiesExceptionHeaders: () => (/* binding */ ServiceGetPropertiesExceptionHeaders),\n/* harmony export */   ServiceGetPropertiesHeaders: () => (/* binding */ ServiceGetPropertiesHeaders),\n/* harmony export */   ServiceGetStatisticsExceptionHeaders: () => (/* binding */ ServiceGetStatisticsExceptionHeaders),\n/* harmony export */   ServiceGetStatisticsHeaders: () => (/* binding */ ServiceGetStatisticsHeaders),\n/* harmony export */   ServiceGetUserDelegationKeyExceptionHeaders: () => (/* binding */ ServiceGetUserDelegationKeyExceptionHeaders),\n/* harmony export */   ServiceGetUserDelegationKeyHeaders: () => (/* binding */ ServiceGetUserDelegationKeyHeaders),\n/* harmony export */   ServiceListContainersSegmentExceptionHeaders: () => (/* binding */ ServiceListContainersSegmentExceptionHeaders),\n/* harmony export */   ServiceListContainersSegmentHeaders: () => (/* binding */ ServiceListContainersSegmentHeaders),\n/* harmony export */   ServiceSetPropertiesExceptionHeaders: () => (/* binding */ ServiceSetPropertiesExceptionHeaders),\n/* harmony export */   ServiceSetPropertiesHeaders: () => (/* binding */ ServiceSetPropertiesHeaders),\n/* harmony export */   ServiceSubmitBatchExceptionHeaders: () => (/* binding */ ServiceSubmitBatchExceptionHeaders),\n/* harmony export */   ServiceSubmitBatchHeaders: () => (/* binding */ ServiceSubmitBatchHeaders),\n/* harmony export */   SignedIdentifier: () => (/* binding */ SignedIdentifier),\n/* harmony export */   StaticWebsite: () => (/* binding */ StaticWebsite),\n/* harmony export */   StorageError: () => (/* binding */ StorageError),\n/* harmony export */   UserDelegationKey: () => (/* binding */ UserDelegationKey)\n/* harmony export */ });\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\nconst BlobServiceProperties = {\n    serializedName: \"BlobServiceProperties\",\n    xmlName: \"StorageServiceProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceProperties\",\n        modelProperties: {\n            blobAnalyticsLogging: {\n                serializedName: \"Logging\",\n                xmlName: \"Logging\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Logging\",\n                },\n            },\n            hourMetrics: {\n                serializedName: \"HourMetrics\",\n                xmlName: \"HourMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            minuteMetrics: {\n                serializedName: \"MinuteMetrics\",\n                xmlName: \"MinuteMetrics\",\n                type: {\n                    name: \"Composite\",\n                    className: \"Metrics\",\n                },\n            },\n            cors: {\n                serializedName: \"Cors\",\n                xmlName: \"Cors\",\n                xmlIsWrapped: true,\n                xmlElementName: \"CorsRule\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"CorsRule\",\n                        },\n                    },\n                },\n            },\n            defaultServiceVersion: {\n                serializedName: \"DefaultServiceVersion\",\n                xmlName: \"DefaultServiceVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteRetentionPolicy: {\n                serializedName: \"DeleteRetentionPolicy\",\n                xmlName: \"DeleteRetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n            staticWebsite: {\n                serializedName: \"StaticWebsite\",\n                xmlName: \"StaticWebsite\",\n                type: {\n                    name: \"Composite\",\n                    className: \"StaticWebsite\",\n                },\n            },\n        },\n    },\n};\nconst Logging = {\n    serializedName: \"Logging\",\n    type: {\n        name: \"Composite\",\n        className: \"Logging\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                required: true,\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleteProperty: {\n                serializedName: \"Delete\",\n                required: true,\n                xmlName: \"Delete\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            read: {\n                serializedName: \"Read\",\n                required: true,\n                xmlName: \"Read\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            write: {\n                serializedName: \"Write\",\n                required: true,\n                xmlName: \"Write\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nconst RetentionPolicy = {\n    serializedName: \"RetentionPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"RetentionPolicy\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            days: {\n                constraints: {\n                    InclusiveMinimum: 1,\n                },\n                serializedName: \"Days\",\n                xmlName: \"Days\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst Metrics = {\n    serializedName: \"Metrics\",\n    type: {\n        name: \"Composite\",\n        className: \"Metrics\",\n        modelProperties: {\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            includeAPIs: {\n                serializedName: \"IncludeAPIs\",\n                xmlName: \"IncludeAPIs\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            retentionPolicy: {\n                serializedName: \"RetentionPolicy\",\n                xmlName: \"RetentionPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"RetentionPolicy\",\n                },\n            },\n        },\n    },\n};\nconst CorsRule = {\n    serializedName: \"CorsRule\",\n    type: {\n        name: \"Composite\",\n        className: \"CorsRule\",\n        modelProperties: {\n            allowedOrigins: {\n                serializedName: \"AllowedOrigins\",\n                required: true,\n                xmlName: \"AllowedOrigins\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedMethods: {\n                serializedName: \"AllowedMethods\",\n                required: true,\n                xmlName: \"AllowedMethods\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            allowedHeaders: {\n                serializedName: \"AllowedHeaders\",\n                required: true,\n                xmlName: \"AllowedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            exposedHeaders: {\n                serializedName: \"ExposedHeaders\",\n                required: true,\n                xmlName: \"ExposedHeaders\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxAgeInSeconds: {\n                constraints: {\n                    InclusiveMinimum: 0,\n                },\n                serializedName: \"MaxAgeInSeconds\",\n                required: true,\n                xmlName: \"MaxAgeInSeconds\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst StaticWebsite = {\n    serializedName: \"StaticWebsite\",\n    type: {\n        name: \"Composite\",\n        className: \"StaticWebsite\",\n        modelProperties: {\n            enabled: {\n                serializedName: \"Enabled\",\n                required: true,\n                xmlName: \"Enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            indexDocument: {\n                serializedName: \"IndexDocument\",\n                xmlName: \"IndexDocument\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorDocument404Path: {\n                serializedName: \"ErrorDocument404Path\",\n                xmlName: \"ErrorDocument404Path\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            defaultIndexDocumentPath: {\n                serializedName: \"DefaultIndexDocumentPath\",\n                xmlName: \"DefaultIndexDocumentPath\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst StorageError = {\n    serializedName: \"StorageError\",\n    type: {\n        name: \"Composite\",\n        className: \"StorageError\",\n        modelProperties: {\n            message: {\n                serializedName: \"Message\",\n                xmlName: \"Message\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            code: {\n                serializedName: \"Code\",\n                xmlName: \"Code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            authenticationErrorDetail: {\n                serializedName: \"AuthenticationErrorDetail\",\n                xmlName: \"AuthenticationErrorDetail\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobServiceStatistics = {\n    serializedName: \"BlobServiceStatistics\",\n    xmlName: \"StorageServiceStats\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobServiceStatistics\",\n        modelProperties: {\n            geoReplication: {\n                serializedName: \"GeoReplication\",\n                xmlName: \"GeoReplication\",\n                type: {\n                    name: \"Composite\",\n                    className: \"GeoReplication\",\n                },\n            },\n        },\n    },\n};\nconst GeoReplication = {\n    serializedName: \"GeoReplication\",\n    type: {\n        name: \"Composite\",\n        className: \"GeoReplication\",\n        modelProperties: {\n            status: {\n                serializedName: \"Status\",\n                required: true,\n                xmlName: \"Status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"live\", \"bootstrap\", \"unavailable\"],\n                },\n            },\n            lastSyncOn: {\n                serializedName: \"LastSyncTime\",\n                required: true,\n                xmlName: \"LastSyncTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ListContainersSegmentResponse = {\n    serializedName: \"ListContainersSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListContainersSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            containerItems: {\n                serializedName: \"ContainerItems\",\n                required: true,\n                xmlName: \"Containers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Container\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ContainerItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerItem = {\n    serializedName: \"ContainerItem\",\n    xmlName: \"Container\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            version: {\n                serializedName: \"Version\",\n                xmlName: \"Version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ContainerProperties\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n        },\n    },\n};\nconst ContainerProperties = {\n    serializedName: \"ContainerProperties\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerProperties\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            publicAccess: {\n                serializedName: \"PublicAccess\",\n                xmlName: \"PublicAccess\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"HasImmutabilityPolicy\",\n                xmlName: \"HasImmutabilityPolicy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"HasLegalHold\",\n                xmlName: \"HasLegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"DefaultEncryptionScope\",\n                xmlName: \"DefaultEncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            preventEncryptionScopeOverride: {\n                serializedName: \"DenyEncryptionScopeOverride\",\n                xmlName: \"DenyEncryptionScopeOverride\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"ImmutableStorageWithVersioningEnabled\",\n                xmlName: \"ImmutableStorageWithVersioningEnabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst KeyInfo = {\n    serializedName: \"KeyInfo\",\n    type: {\n        name: \"Composite\",\n        className: \"KeyInfo\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                required: true,\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst UserDelegationKey = {\n    serializedName: \"UserDelegationKey\",\n    type: {\n        name: \"Composite\",\n        className: \"UserDelegationKey\",\n        modelProperties: {\n            signedObjectId: {\n                serializedName: \"SignedOid\",\n                required: true,\n                xmlName: \"SignedOid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedTenantId: {\n                serializedName: \"SignedTid\",\n                required: true,\n                xmlName: \"SignedTid\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedStartsOn: {\n                serializedName: \"SignedStart\",\n                required: true,\n                xmlName: \"SignedStart\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedExpiresOn: {\n                serializedName: \"SignedExpiry\",\n                required: true,\n                xmlName: \"SignedExpiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedService: {\n                serializedName: \"SignedService\",\n                required: true,\n                xmlName: \"SignedService\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            signedVersion: {\n                serializedName: \"SignedVersion\",\n                required: true,\n                xmlName: \"SignedVersion\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst FilterBlobSegment = {\n    serializedName: \"FilterBlobSegment\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobSegment\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            where: {\n                serializedName: \"Where\",\n                required: true,\n                xmlName: \"Where\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobs: {\n                serializedName: \"Blobs\",\n                required: true,\n                xmlName: \"Blobs\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"FilterBlobItem\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst FilterBlobItem = {\n    serializedName: \"FilterBlobItem\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"FilterBlobItem\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            tags: {\n                serializedName: \"Tags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n        },\n    },\n};\nconst BlobTags = {\n    serializedName: \"BlobTags\",\n    xmlName: \"Tags\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTags\",\n        modelProperties: {\n            blobTagSet: {\n                serializedName: \"BlobTagSet\",\n                required: true,\n                xmlName: \"TagSet\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Tag\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobTag\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobTag = {\n    serializedName: \"BlobTag\",\n    xmlName: \"Tag\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobTag\",\n        modelProperties: {\n            key: {\n                serializedName: \"Key\",\n                required: true,\n                xmlName: \"Key\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            value: {\n                serializedName: \"Value\",\n                required: true,\n                xmlName: \"Value\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst SignedIdentifier = {\n    serializedName: \"SignedIdentifier\",\n    xmlName: \"SignedIdentifier\",\n    type: {\n        name: \"Composite\",\n        className: \"SignedIdentifier\",\n        modelProperties: {\n            id: {\n                serializedName: \"Id\",\n                required: true,\n                xmlName: \"Id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessPolicy: {\n                serializedName: \"AccessPolicy\",\n                xmlName: \"AccessPolicy\",\n                type: {\n                    name: \"Composite\",\n                    className: \"AccessPolicy\",\n                },\n            },\n        },\n    },\n};\nconst AccessPolicy = {\n    serializedName: \"AccessPolicy\",\n    type: {\n        name: \"Composite\",\n        className: \"AccessPolicy\",\n        modelProperties: {\n            startsOn: {\n                serializedName: \"Start\",\n                xmlName: \"Start\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry\",\n                xmlName: \"Expiry\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            permissions: {\n                serializedName: \"Permission\",\n                xmlName: \"Permission\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ListBlobsFlatSegmentResponse = {\n    serializedName: \"ListBlobsFlatSegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsFlatSegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobFlatListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobFlatListSegment = {\n    serializedName: \"BlobFlatListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobFlatListSegment\",\n        modelProperties: {\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobItemInternal = {\n    serializedName: \"BlobItemInternal\",\n    xmlName: \"Blob\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobItemInternal\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n            deleted: {\n                serializedName: \"Deleted\",\n                required: true,\n                xmlName: \"Deleted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            snapshot: {\n                serializedName: \"Snapshot\",\n                required: true,\n                xmlName: \"Snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"VersionId\",\n                xmlName: \"VersionId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"IsCurrentVersion\",\n                xmlName: \"IsCurrentVersion\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            properties: {\n                serializedName: \"Properties\",\n                xmlName: \"Properties\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobPropertiesInternal\",\n                },\n            },\n            metadata: {\n                serializedName: \"Metadata\",\n                xmlName: \"Metadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobTags: {\n                serializedName: \"BlobTags\",\n                xmlName: \"Tags\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobTags\",\n                },\n            },\n            objectReplicationMetadata: {\n                serializedName: \"ObjectReplicationMetadata\",\n                xmlName: \"OrMetadata\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            hasVersionsOnly: {\n                serializedName: \"HasVersionsOnly\",\n                xmlName: \"HasVersionsOnly\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobName = {\n    serializedName: \"BlobName\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobName\",\n        modelProperties: {\n            encoded: {\n                serializedName: \"Encoded\",\n                xmlName: \"Encoded\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            content: {\n                serializedName: \"content\",\n                xmlName: \"content\",\n                xmlIsMsText: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobPropertiesInternal = {\n    serializedName: \"BlobPropertiesInternal\",\n    xmlName: \"Properties\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPropertiesInternal\",\n        modelProperties: {\n            createdOn: {\n                serializedName: \"Creation-Time\",\n                xmlName: \"Creation-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            lastModified: {\n                serializedName: \"Last-Modified\",\n                required: true,\n                xmlName: \"Last-Modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"Etag\",\n                required: true,\n                xmlName: \"Etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLength: {\n                serializedName: \"Content-Length\",\n                xmlName: \"Content-Length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"Content-Type\",\n                xmlName: \"Content-Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"Content-Encoding\",\n                xmlName: \"Content-Encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"Content-Language\",\n                xmlName: \"Content-Language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"Content-MD5\",\n                xmlName: \"Content-MD5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"Content-Disposition\",\n                xmlName: \"Content-Disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"Cache-Control\",\n                xmlName: \"Cache-Control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"BlobType\",\n                xmlName: \"BlobType\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"LeaseStatus\",\n                xmlName: \"LeaseStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"LeaseState\",\n                xmlName: \"LeaseState\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"LeaseDuration\",\n                xmlName: \"LeaseDuration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            copyId: {\n                serializedName: \"CopyId\",\n                xmlName: \"CopyId\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"CopyStatus\",\n                xmlName: \"CopyStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            copySource: {\n                serializedName: \"CopySource\",\n                xmlName: \"CopySource\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"CopyProgress\",\n                xmlName: \"CopyProgress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"CopyCompletionTime\",\n                xmlName: \"CopyCompletionTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"CopyStatusDescription\",\n                xmlName: \"CopyStatusDescription\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            serverEncrypted: {\n                serializedName: \"ServerEncrypted\",\n                xmlName: \"ServerEncrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            incrementalCopy: {\n                serializedName: \"IncrementalCopy\",\n                xmlName: \"IncrementalCopy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"DestinationSnapshot\",\n                xmlName: \"DestinationSnapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            deletedOn: {\n                serializedName: \"DeletedTime\",\n                xmlName: \"DeletedTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            remainingRetentionDays: {\n                serializedName: \"RemainingRetentionDays\",\n                xmlName: \"RemainingRetentionDays\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            accessTier: {\n                serializedName: \"AccessTier\",\n                xmlName: \"AccessTier\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"P4\",\n                        \"P6\",\n                        \"P10\",\n                        \"P15\",\n                        \"P20\",\n                        \"P30\",\n                        \"P40\",\n                        \"P50\",\n                        \"P60\",\n                        \"P70\",\n                        \"P80\",\n                        \"Hot\",\n                        \"Cool\",\n                        \"Archive\",\n                        \"Cold\",\n                    ],\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"AccessTierInferred\",\n                xmlName: \"AccessTierInferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"ArchiveStatus\",\n                xmlName: \"ArchiveStatus\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"rehydrate-pending-to-hot\",\n                        \"rehydrate-pending-to-cool\",\n                        \"rehydrate-pending-to-cold\",\n                    ],\n                },\n            },\n            customerProvidedKeySha256: {\n                serializedName: \"CustomerProvidedKeySha256\",\n                xmlName: \"CustomerProvidedKeySha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"EncryptionScope\",\n                xmlName: \"EncryptionScope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"AccessTierChangeTime\",\n                xmlName: \"AccessTierChangeTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            tagCount: {\n                serializedName: \"TagCount\",\n                xmlName: \"TagCount\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"Expiry-Time\",\n                xmlName: \"Expiry-Time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"Sealed\",\n                xmlName: \"Sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"RehydratePriority\",\n                xmlName: \"RehydratePriority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessedOn: {\n                serializedName: \"LastAccessTime\",\n                xmlName: \"LastAccessTime\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"ImmutabilityPolicyUntilDate\",\n                xmlName: \"ImmutabilityPolicyUntilDate\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"ImmutabilityPolicyMode\",\n                xmlName: \"ImmutabilityPolicyMode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"LegalHold\",\n                xmlName: \"LegalHold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst ListBlobsHierarchySegmentResponse = {\n    serializedName: \"ListBlobsHierarchySegmentResponse\",\n    xmlName: \"EnumerationResults\",\n    type: {\n        name: \"Composite\",\n        className: \"ListBlobsHierarchySegmentResponse\",\n        modelProperties: {\n            serviceEndpoint: {\n                serializedName: \"ServiceEndpoint\",\n                required: true,\n                xmlName: \"ServiceEndpoint\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            containerName: {\n                serializedName: \"ContainerName\",\n                required: true,\n                xmlName: \"ContainerName\",\n                xmlIsAttribute: true,\n                type: {\n                    name: \"String\",\n                },\n            },\n            prefix: {\n                serializedName: \"Prefix\",\n                xmlName: \"Prefix\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            marker: {\n                serializedName: \"Marker\",\n                xmlName: \"Marker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            maxPageSize: {\n                serializedName: \"MaxResults\",\n                xmlName: \"MaxResults\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            delimiter: {\n                serializedName: \"Delimiter\",\n                xmlName: \"Delimiter\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            segment: {\n                serializedName: \"Segment\",\n                xmlName: \"Blobs\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobHierarchyListSegment\",\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobHierarchyListSegment = {\n    serializedName: \"BlobHierarchyListSegment\",\n    xmlName: \"Blobs\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobHierarchyListSegment\",\n        modelProperties: {\n            blobPrefixes: {\n                serializedName: \"BlobPrefixes\",\n                xmlName: \"BlobPrefixes\",\n                xmlElementName: \"BlobPrefix\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobPrefix\",\n                        },\n                    },\n                },\n            },\n            blobItems: {\n                serializedName: \"BlobItems\",\n                required: true,\n                xmlName: \"BlobItems\",\n                xmlElementName: \"Blob\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"BlobItemInternal\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlobPrefix = {\n    serializedName: \"BlobPrefix\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobPrefix\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"Composite\",\n                    className: \"BlobName\",\n                },\n            },\n        },\n    },\n};\nconst BlockLookupList = {\n    serializedName: \"BlockLookupList\",\n    xmlName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockLookupList\",\n        modelProperties: {\n            committed: {\n                serializedName: \"Committed\",\n                xmlName: \"Committed\",\n                xmlElementName: \"Committed\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            uncommitted: {\n                serializedName: \"Uncommitted\",\n                xmlName: \"Uncommitted\",\n                xmlElementName: \"Uncommitted\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n            latest: {\n                serializedName: \"Latest\",\n                xmlName: \"Latest\",\n                xmlElementName: \"Latest\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"String\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst BlockList = {\n    serializedName: \"BlockList\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockList\",\n        modelProperties: {\n            committedBlocks: {\n                serializedName: \"CommittedBlocks\",\n                xmlName: \"CommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n            uncommittedBlocks: {\n                serializedName: \"UncommittedBlocks\",\n                xmlName: \"UncommittedBlocks\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Block\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"Block\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst Block = {\n    serializedName: \"Block\",\n    type: {\n        name: \"Composite\",\n        className: \"Block\",\n        modelProperties: {\n            name: {\n                serializedName: \"Name\",\n                required: true,\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            size: {\n                serializedName: \"Size\",\n                required: true,\n                xmlName: \"Size\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst PageList = {\n    serializedName: \"PageList\",\n    type: {\n        name: \"Composite\",\n        className: \"PageList\",\n        modelProperties: {\n            pageRange: {\n                serializedName: \"PageRange\",\n                xmlName: \"PageRange\",\n                xmlElementName: \"PageRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"PageRange\",\n                        },\n                    },\n                },\n            },\n            clearRange: {\n                serializedName: \"ClearRange\",\n                xmlName: \"ClearRange\",\n                xmlElementName: \"ClearRange\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ClearRange\",\n                        },\n                    },\n                },\n            },\n            continuationToken: {\n                serializedName: \"NextMarker\",\n                xmlName: \"NextMarker\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageRange = {\n    serializedName: \"PageRange\",\n    xmlName: \"PageRange\",\n    type: {\n        name: \"Composite\",\n        className: \"PageRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst ClearRange = {\n    serializedName: \"ClearRange\",\n    xmlName: \"ClearRange\",\n    type: {\n        name: \"Composite\",\n        className: \"ClearRange\",\n        modelProperties: {\n            start: {\n                serializedName: \"Start\",\n                required: true,\n                xmlName: \"Start\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            end: {\n                serializedName: \"End\",\n                required: true,\n                xmlName: \"End\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst QueryRequest = {\n    serializedName: \"QueryRequest\",\n    xmlName: \"QueryRequest\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryRequest\",\n        modelProperties: {\n            queryType: {\n                serializedName: \"QueryType\",\n                required: true,\n                xmlName: \"QueryType\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            expression: {\n                serializedName: \"Expression\",\n                required: true,\n                xmlName: \"Expression\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            inputSerialization: {\n                serializedName: \"InputSerialization\",\n                xmlName: \"InputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n            outputSerialization: {\n                serializedName: \"OutputSerialization\",\n                xmlName: \"OutputSerialization\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QuerySerialization\",\n                },\n            },\n        },\n    },\n};\nconst QuerySerialization = {\n    serializedName: \"QuerySerialization\",\n    type: {\n        name: \"Composite\",\n        className: \"QuerySerialization\",\n        modelProperties: {\n            format: {\n                serializedName: \"Format\",\n                xmlName: \"Format\",\n                type: {\n                    name: \"Composite\",\n                    className: \"QueryFormat\",\n                },\n            },\n        },\n    },\n};\nconst QueryFormat = {\n    serializedName: \"QueryFormat\",\n    type: {\n        name: \"Composite\",\n        className: \"QueryFormat\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"delimited\", \"json\", \"arrow\", \"parquet\"],\n                },\n            },\n            delimitedTextConfiguration: {\n                serializedName: \"DelimitedTextConfiguration\",\n                xmlName: \"DelimitedTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"DelimitedTextConfiguration\",\n                },\n            },\n            jsonTextConfiguration: {\n                serializedName: \"JsonTextConfiguration\",\n                xmlName: \"JsonTextConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"JsonTextConfiguration\",\n                },\n            },\n            arrowConfiguration: {\n                serializedName: \"ArrowConfiguration\",\n                xmlName: \"ArrowConfiguration\",\n                type: {\n                    name: \"Composite\",\n                    className: \"ArrowConfiguration\",\n                },\n            },\n            parquetTextConfiguration: {\n                serializedName: \"ParquetTextConfiguration\",\n                xmlName: \"ParquetTextConfiguration\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"any\" } },\n                },\n            },\n        },\n    },\n};\nconst DelimitedTextConfiguration = {\n    serializedName: \"DelimitedTextConfiguration\",\n    xmlName: \"DelimitedTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"DelimitedTextConfiguration\",\n        modelProperties: {\n            columnSeparator: {\n                serializedName: \"ColumnSeparator\",\n                xmlName: \"ColumnSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            fieldQuote: {\n                serializedName: \"FieldQuote\",\n                xmlName: \"FieldQuote\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            escapeChar: {\n                serializedName: \"EscapeChar\",\n                xmlName: \"EscapeChar\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            headersPresent: {\n                serializedName: \"HeadersPresent\",\n                xmlName: \"HasHeaders\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst JsonTextConfiguration = {\n    serializedName: \"JsonTextConfiguration\",\n    xmlName: \"JsonTextConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"JsonTextConfiguration\",\n        modelProperties: {\n            recordSeparator: {\n                serializedName: \"RecordSeparator\",\n                xmlName: \"RecordSeparator\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ArrowConfiguration = {\n    serializedName: \"ArrowConfiguration\",\n    xmlName: \"ArrowConfiguration\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowConfiguration\",\n        modelProperties: {\n            schema: {\n                serializedName: \"Schema\",\n                required: true,\n                xmlName: \"Schema\",\n                xmlIsWrapped: true,\n                xmlElementName: \"Field\",\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: {\n                            name: \"Composite\",\n                            className: \"ArrowField\",\n                        },\n                    },\n                },\n            },\n        },\n    },\n};\nconst ArrowField = {\n    serializedName: \"ArrowField\",\n    xmlName: \"Field\",\n    type: {\n        name: \"Composite\",\n        className: \"ArrowField\",\n        modelProperties: {\n            type: {\n                serializedName: \"Type\",\n                required: true,\n                xmlName: \"Type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            name: {\n                serializedName: \"Name\",\n                xmlName: \"Name\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            precision: {\n                serializedName: \"Precision\",\n                xmlName: \"Precision\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            scale: {\n                serializedName: \"Scale\",\n                xmlName: \"Scale\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSetPropertiesHeaders = {\n    serializedName: \"Service_setPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSetPropertiesExceptionHeaders = {\n    serializedName: \"Service_setPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetPropertiesHeaders = {\n    serializedName: \"Service_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetPropertiesExceptionHeaders = {\n    serializedName: \"Service_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetStatisticsHeaders = {\n    serializedName: \"Service_getStatisticsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetStatisticsExceptionHeaders = {\n    serializedName: \"Service_getStatisticsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetStatisticsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceListContainersSegmentHeaders = {\n    serializedName: \"Service_listContainersSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceListContainersSegmentExceptionHeaders = {\n    serializedName: \"Service_listContainersSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceListContainersSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetUserDelegationKeyHeaders = {\n    serializedName: \"Service_getUserDelegationKeyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetUserDelegationKeyExceptionHeaders = {\n    serializedName: \"Service_getUserDelegationKeyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetUserDelegationKeyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetAccountInfoHeaders = {\n    serializedName: \"Service_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceGetAccountInfoExceptionHeaders = {\n    serializedName: \"Service_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSubmitBatchHeaders = {\n    serializedName: \"Service_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceSubmitBatchExceptionHeaders = {\n    serializedName: \"Service_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceFilterBlobsHeaders = {\n    serializedName: \"Service_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ServiceFilterBlobsExceptionHeaders = {\n    serializedName: \"Service_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ServiceFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerCreateHeaders = {\n    serializedName: \"Container_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerCreateExceptionHeaders = {\n    serializedName: \"Container_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetPropertiesHeaders = {\n    serializedName: \"Container_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesHeaders\",\n        modelProperties: {\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            hasImmutabilityPolicy: {\n                serializedName: \"x-ms-has-immutability-policy\",\n                xmlName: \"x-ms-has-immutability-policy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            hasLegalHold: {\n                serializedName: \"x-ms-has-legal-hold\",\n                xmlName: \"x-ms-has-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            defaultEncryptionScope: {\n                serializedName: \"x-ms-default-encryption-scope\",\n                xmlName: \"x-ms-default-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            denyEncryptionScopeOverride: {\n                serializedName: \"x-ms-deny-encryption-scope-override\",\n                xmlName: \"x-ms-deny-encryption-scope-override\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            isImmutableStorageWithVersioningEnabled: {\n                serializedName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                xmlName: \"x-ms-immutable-storage-with-versioning-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetPropertiesExceptionHeaders = {\n    serializedName: \"Container_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerDeleteHeaders = {\n    serializedName: \"Container_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerDeleteExceptionHeaders = {\n    serializedName: \"Container_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetMetadataHeaders = {\n    serializedName: \"Container_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetMetadataExceptionHeaders = {\n    serializedName: \"Container_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccessPolicyHeaders = {\n    serializedName: \"Container_getAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyHeaders\",\n        modelProperties: {\n            blobPublicAccess: {\n                serializedName: \"x-ms-blob-public-access\",\n                xmlName: \"x-ms-blob-public-access\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"container\", \"blob\"],\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_getAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetAccessPolicyHeaders = {\n    serializedName: \"Container_setAccessPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSetAccessPolicyExceptionHeaders = {\n    serializedName: \"Container_setAccessPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSetAccessPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRestoreHeaders = {\n    serializedName: \"Container_restoreHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRestoreExceptionHeaders = {\n    serializedName: \"Container_restoreExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRestoreExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenameHeaders = {\n    serializedName: \"Container_renameHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenameExceptionHeaders = {\n    serializedName: \"Container_renameExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenameExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSubmitBatchHeaders = {\n    serializedName: \"Container_submitBatchHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerSubmitBatchExceptionHeaders = {\n    serializedName: \"Container_submitBatchExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerSubmitBatchExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerFilterBlobsHeaders = {\n    serializedName: \"Container_filterBlobsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerFilterBlobsExceptionHeaders = {\n    serializedName: \"Container_filterBlobsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerFilterBlobsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerAcquireLeaseHeaders = {\n    serializedName: \"Container_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerAcquireLeaseExceptionHeaders = {\n    serializedName: \"Container_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerReleaseLeaseHeaders = {\n    serializedName: \"Container_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerReleaseLeaseExceptionHeaders = {\n    serializedName: \"Container_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenewLeaseHeaders = {\n    serializedName: \"Container_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerRenewLeaseExceptionHeaders = {\n    serializedName: \"Container_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerBreakLeaseHeaders = {\n    serializedName: \"Container_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerBreakLeaseExceptionHeaders = {\n    serializedName: \"Container_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerChangeLeaseHeaders = {\n    serializedName: \"Container_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst ContainerChangeLeaseExceptionHeaders = {\n    serializedName: \"Container_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobFlatSegmentHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobFlatSegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobFlatSegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobFlatSegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobHierarchySegmentHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentHeaders\",\n        modelProperties: {\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerListBlobHierarchySegmentExceptionHeaders = {\n    serializedName: \"Container_listBlobHierarchySegmentExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerListBlobHierarchySegmentExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccountInfoHeaders = {\n    serializedName: \"Container_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst ContainerGetAccountInfoExceptionHeaders = {\n    serializedName: \"Container_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"ContainerGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDownloadHeaders = {\n    serializedName: \"Blob_downloadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nconst BlobDownloadExceptionHeaders = {\n    serializedName: \"Blob_downloadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDownloadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetPropertiesHeaders = {\n    serializedName: \"Blob_getPropertiesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            createdOn: {\n                serializedName: \"x-ms-creation-time\",\n                xmlName: \"x-ms-creation-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            objectReplicationPolicyId: {\n                serializedName: \"x-ms-or-policy-id\",\n                xmlName: \"x-ms-or-policy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            objectReplicationRules: {\n                serializedName: \"x-ms-or\",\n                headerCollectionPrefix: \"x-ms-or-\",\n                xmlName: \"x-ms-or\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletedOn: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            isIncrementalCopy: {\n                serializedName: \"x-ms-incremental-copy\",\n                xmlName: \"x-ms-incremental-copy\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            destinationSnapshot: {\n                serializedName: \"x-ms-copy-destination-snapshot\",\n                xmlName: \"x-ms-copy-destination-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTier: {\n                serializedName: \"x-ms-access-tier\",\n                xmlName: \"x-ms-access-tier\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierInferred: {\n                serializedName: \"x-ms-access-tier-inferred\",\n                xmlName: \"x-ms-access-tier-inferred\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            archiveStatus: {\n                serializedName: \"x-ms-archive-status\",\n                xmlName: \"x-ms-archive-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            accessTierChangedOn: {\n                serializedName: \"x-ms-access-tier-change-time\",\n                xmlName: \"x-ms-access-tier-change-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isCurrentVersion: {\n                serializedName: \"x-ms-is-current-version\",\n                xmlName: \"x-ms-is-current-version\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            tagCount: {\n                serializedName: \"x-ms-tag-count\",\n                xmlName: \"x-ms-tag-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            expiresOn: {\n                serializedName: \"x-ms-expiry-time\",\n                xmlName: \"x-ms-expiry-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            rehydratePriority: {\n                serializedName: \"x-ms-rehydrate-priority\",\n                xmlName: \"x-ms-rehydrate-priority\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"High\", \"Standard\"],\n                },\n            },\n            lastAccessed: {\n                serializedName: \"x-ms-last-access-time\",\n                xmlName: \"x-ms-last-access-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiresOn: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetPropertiesExceptionHeaders = {\n    serializedName: \"Blob_getPropertiesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetPropertiesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteHeaders = {\n    serializedName: \"Blob_deleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteExceptionHeaders = {\n    serializedName: \"Blob_deleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobUndeleteHeaders = {\n    serializedName: \"Blob_undeleteHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobUndeleteExceptionHeaders = {\n    serializedName: \"Blob_undeleteExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobUndeleteExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetExpiryHeaders = {\n    serializedName: \"Blob_setExpiryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetExpiryExceptionHeaders = {\n    serializedName: \"Blob_setExpiryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetExpiryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetHttpHeadersHeaders = {\n    serializedName: \"Blob_setHttpHeadersHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetHttpHeadersExceptionHeaders = {\n    serializedName: \"Blob_setHttpHeadersExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetHttpHeadersExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyExpiry: {\n                serializedName: \"x-ms-immutability-policy-until-date\",\n                xmlName: \"x-ms-immutability-policy-until-date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            immutabilityPolicyMode: {\n                serializedName: \"x-ms-immutability-policy-mode\",\n                xmlName: \"x-ms-immutability-policy-mode\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n                },\n            },\n        },\n    },\n};\nconst BlobSetImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_setImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteImmutabilityPolicyHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobDeleteImmutabilityPolicyExceptionHeaders = {\n    serializedName: \"Blob_deleteImmutabilityPolicyExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobDeleteImmutabilityPolicyExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetLegalHoldHeaders = {\n    serializedName: \"Blob_setLegalHoldHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            legalHold: {\n                serializedName: \"x-ms-legal-hold\",\n                xmlName: \"x-ms-legal-hold\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetLegalHoldExceptionHeaders = {\n    serializedName: \"Blob_setLegalHoldExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetLegalHoldExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetMetadataHeaders = {\n    serializedName: \"Blob_setMetadataHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetMetadataExceptionHeaders = {\n    serializedName: \"Blob_setMetadataExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetMetadataExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAcquireLeaseHeaders = {\n    serializedName: \"Blob_acquireLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobAcquireLeaseExceptionHeaders = {\n    serializedName: \"Blob_acquireLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAcquireLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobReleaseLeaseHeaders = {\n    serializedName: \"Blob_releaseLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobReleaseLeaseExceptionHeaders = {\n    serializedName: \"Blob_releaseLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobReleaseLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobRenewLeaseHeaders = {\n    serializedName: \"Blob_renewLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobRenewLeaseExceptionHeaders = {\n    serializedName: \"Blob_renewLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobRenewLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobChangeLeaseHeaders = {\n    serializedName: \"Blob_changeLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            leaseId: {\n                serializedName: \"x-ms-lease-id\",\n                xmlName: \"x-ms-lease-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobChangeLeaseExceptionHeaders = {\n    serializedName: \"Blob_changeLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobChangeLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobBreakLeaseHeaders = {\n    serializedName: \"Blob_breakLeaseHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            leaseTime: {\n                serializedName: \"x-ms-lease-time\",\n                xmlName: \"x-ms-lease-time\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n        },\n    },\n};\nconst BlobBreakLeaseExceptionHeaders = {\n    serializedName: \"Blob_breakLeaseExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobBreakLeaseExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCreateSnapshotHeaders = {\n    serializedName: \"Blob_createSnapshotHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotHeaders\",\n        modelProperties: {\n            snapshot: {\n                serializedName: \"x-ms-snapshot\",\n                xmlName: \"x-ms-snapshot\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCreateSnapshotExceptionHeaders = {\n    serializedName: \"Blob_createSnapshotExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCreateSnapshotExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobStartCopyFromURLHeaders = {\n    serializedName: \"Blob_startCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobStartCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_startCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobStartCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCopyFromURLHeaders = {\n    serializedName: \"Blob_copyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                defaultValue: \"success\",\n                isConstant: true,\n                serializedName: \"x-ms-copy-status\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_copyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAbortCopyFromURLHeaders = {\n    serializedName: \"Blob_abortCopyFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobAbortCopyFromURLExceptionHeaders = {\n    serializedName: \"Blob_abortCopyFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobAbortCopyFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTierHeaders = {\n    serializedName: \"Blob_setTierHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTierExceptionHeaders = {\n    serializedName: \"Blob_setTierExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTierExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetAccountInfoHeaders = {\n    serializedName: \"Blob_getAccountInfoHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            skuName: {\n                serializedName: \"x-ms-sku-name\",\n                xmlName: \"x-ms-sku-name\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Standard_LRS\",\n                        \"Standard_GRS\",\n                        \"Standard_RAGRS\",\n                        \"Standard_ZRS\",\n                        \"Premium_LRS\",\n                    ],\n                },\n            },\n            accountKind: {\n                serializedName: \"x-ms-account-kind\",\n                xmlName: \"x-ms-account-kind\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"Storage\",\n                        \"BlobStorage\",\n                        \"StorageV2\",\n                        \"FileStorage\",\n                        \"BlockBlobStorage\",\n                    ],\n                },\n            },\n            isHierarchicalNamespaceEnabled: {\n                serializedName: \"x-ms-is-hns-enabled\",\n                xmlName: \"x-ms-is-hns-enabled\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetAccountInfoExceptionHeaders = {\n    serializedName: \"Blob_getAccountInfoExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetAccountInfoExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobQueryHeaders = {\n    serializedName: \"Blob_queryHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            metadata: {\n                serializedName: \"x-ms-meta\",\n                headerCollectionPrefix: \"x-ms-meta-\",\n                xmlName: \"x-ms-meta\",\n                type: {\n                    name: \"Dictionary\",\n                    value: { type: { name: \"String\" } },\n                },\n            },\n            contentLength: {\n                serializedName: \"content-length\",\n                xmlName: \"content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentRange: {\n                serializedName: \"content-range\",\n                xmlName: \"content-range\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            contentEncoding: {\n                serializedName: \"content-encoding\",\n                xmlName: \"content-encoding\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            cacheControl: {\n                serializedName: \"cache-control\",\n                xmlName: \"cache-control\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentDisposition: {\n                serializedName: \"content-disposition\",\n                xmlName: \"content-disposition\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentLanguage: {\n                serializedName: \"content-language\",\n                xmlName: \"content-language\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            blobType: {\n                serializedName: \"x-ms-blob-type\",\n                xmlName: \"x-ms-blob-type\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"BlockBlob\", \"PageBlob\", \"AppendBlob\"],\n                },\n            },\n            copyCompletionTime: {\n                serializedName: \"x-ms-copy-completion-time\",\n                xmlName: \"x-ms-copy-completion-time\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyStatusDescription: {\n                serializedName: \"x-ms-copy-status-description\",\n                xmlName: \"x-ms-copy-status-description\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyProgress: {\n                serializedName: \"x-ms-copy-progress\",\n                xmlName: \"x-ms-copy-progress\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copySource: {\n                serializedName: \"x-ms-copy-source\",\n                xmlName: \"x-ms-copy-source\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            leaseDuration: {\n                serializedName: \"x-ms-lease-duration\",\n                xmlName: \"x-ms-lease-duration\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"infinite\", \"fixed\"],\n                },\n            },\n            leaseState: {\n                serializedName: \"x-ms-lease-state\",\n                xmlName: \"x-ms-lease-state\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"available\",\n                        \"leased\",\n                        \"expired\",\n                        \"breaking\",\n                        \"broken\",\n                    ],\n                },\n            },\n            leaseStatus: {\n                serializedName: \"x-ms-lease-status\",\n                xmlName: \"x-ms-lease-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"locked\", \"unlocked\"],\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            acceptRanges: {\n                serializedName: \"accept-ranges\",\n                xmlName: \"accept-ranges\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-server-encrypted\",\n                xmlName: \"x-ms-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentMD5: {\n                serializedName: \"x-ms-blob-content-md5\",\n                xmlName: \"x-ms-blob-content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n        },\n    },\n};\nconst BlobQueryExceptionHeaders = {\n    serializedName: \"Blob_queryExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobQueryExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetTagsHeaders = {\n    serializedName: \"Blob_getTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobGetTagsExceptionHeaders = {\n    serializedName: \"Blob_getTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobGetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTagsHeaders = {\n    serializedName: \"Blob_setTagsHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsHeaders\",\n        modelProperties: {\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlobSetTagsExceptionHeaders = {\n    serializedName: \"Blob_setTagsExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlobSetTagsExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCreateHeaders = {\n    serializedName: \"PageBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCreateExceptionHeaders = {\n    serializedName: \"PageBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesHeaders = {\n    serializedName: \"PageBlob_uploadPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobClearPagesHeaders = {\n    serializedName: \"PageBlob_clearPagesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobClearPagesExceptionHeaders = {\n    serializedName: \"PageBlob_clearPagesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobClearPagesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesFromURLHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUploadPagesFromURLExceptionHeaders = {\n    serializedName: \"PageBlob_uploadPagesFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUploadPagesFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesHeaders = {\n    serializedName: \"PageBlob_getPageRangesHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesDiffHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobGetPageRangesDiffExceptionHeaders = {\n    serializedName: \"PageBlob_getPageRangesDiffExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobGetPageRangesDiffExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobResizeHeaders = {\n    serializedName: \"PageBlob_resizeHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobResizeExceptionHeaders = {\n    serializedName: \"PageBlob_resizeExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobResizeExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUpdateSequenceNumberHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobSequenceNumber: {\n                serializedName: \"x-ms-blob-sequence-number\",\n                xmlName: \"x-ms-blob-sequence-number\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobUpdateSequenceNumberExceptionHeaders = {\n    serializedName: \"PageBlob_updateSequenceNumberExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobUpdateSequenceNumberExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCopyIncrementalHeaders = {\n    serializedName: \"PageBlob_copyIncrementalHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            copyId: {\n                serializedName: \"x-ms-copy-id\",\n                xmlName: \"x-ms-copy-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            copyStatus: {\n                serializedName: \"x-ms-copy-status\",\n                xmlName: \"x-ms-copy-status\",\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"pending\", \"success\", \"aborted\", \"failed\"],\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst PageBlobCopyIncrementalExceptionHeaders = {\n    serializedName: \"PageBlob_copyIncrementalExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"PageBlobCopyIncrementalExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobCreateHeaders = {\n    serializedName: \"AppendBlob_createHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobCreateExceptionHeaders = {\n    serializedName: \"AppendBlob_createExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobCreateExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockHeaders = {\n    serializedName: \"AppendBlob_appendBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockFromUrlHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            blobAppendOffset: {\n                serializedName: \"x-ms-blob-append-offset\",\n                xmlName: \"x-ms-blob-append-offset\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobCommittedBlockCount: {\n                serializedName: \"x-ms-blob-committed-block-count\",\n                xmlName: \"x-ms-blob-committed-block-count\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobAppendBlockFromUrlExceptionHeaders = {\n    serializedName: \"AppendBlob_appendBlockFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobAppendBlockFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobSealHeaders = {\n    serializedName: \"AppendBlob_sealHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isSealed: {\n                serializedName: \"x-ms-blob-sealed\",\n                xmlName: \"x-ms-blob-sealed\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n        },\n    },\n};\nconst AppendBlobSealExceptionHeaders = {\n    serializedName: \"AppendBlob_sealExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"AppendBlobSealExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobUploadHeaders = {\n    serializedName: \"BlockBlob_uploadHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobUploadExceptionHeaders = {\n    serializedName: \"BlockBlob_uploadExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobUploadExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobPutBlobFromUrlHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobPutBlobFromUrlExceptionHeaders = {\n    serializedName: \"BlockBlob_putBlobFromUrlExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobPutBlobFromUrlExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockHeaders = {\n    serializedName: \"BlockBlob_stageBlockHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockFromURLHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLHeaders\",\n        modelProperties: {\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobStageBlockFromURLExceptionHeaders = {\n    serializedName: \"BlockBlob_stageBlockFromURLExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobStageBlockFromURLExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobCommitBlockListHeaders = {\n    serializedName: \"BlockBlob_commitBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListHeaders\",\n        modelProperties: {\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            contentMD5: {\n                serializedName: \"content-md5\",\n                xmlName: \"content-md5\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            xMsContentCrc64: {\n                serializedName: \"x-ms-content-crc64\",\n                xmlName: \"x-ms-content-crc64\",\n                type: {\n                    name: \"ByteArray\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            versionId: {\n                serializedName: \"x-ms-version-id\",\n                xmlName: \"x-ms-version-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            isServerEncrypted: {\n                serializedName: \"x-ms-request-server-encrypted\",\n                xmlName: \"x-ms-request-server-encrypted\",\n                type: {\n                    name: \"Boolean\",\n                },\n            },\n            encryptionKeySha256: {\n                serializedName: \"x-ms-encryption-key-sha256\",\n                xmlName: \"x-ms-encryption-key-sha256\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            encryptionScope: {\n                serializedName: \"x-ms-encryption-scope\",\n                xmlName: \"x-ms-encryption-scope\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobCommitBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_commitBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobCommitBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobGetBlockListHeaders = {\n    serializedName: \"BlockBlob_getBlockListHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListHeaders\",\n        modelProperties: {\n            lastModified: {\n                serializedName: \"last-modified\",\n                xmlName: \"last-modified\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            etag: {\n                serializedName: \"etag\",\n                xmlName: \"etag\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            contentType: {\n                serializedName: \"content-type\",\n                xmlName: \"content-type\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            blobContentLength: {\n                serializedName: \"x-ms-blob-content-length\",\n                xmlName: \"x-ms-blob-content-length\",\n                type: {\n                    name: \"Number\",\n                },\n            },\n            clientRequestId: {\n                serializedName: \"x-ms-client-request-id\",\n                xmlName: \"x-ms-client-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            requestId: {\n                serializedName: \"x-ms-request-id\",\n                xmlName: \"x-ms-request-id\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            version: {\n                serializedName: \"x-ms-version\",\n                xmlName: \"x-ms-version\",\n                type: {\n                    name: \"String\",\n                },\n            },\n            date: {\n                serializedName: \"date\",\n                xmlName: \"date\",\n                type: {\n                    name: \"DateTimeRfc1123\",\n                },\n            },\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\nconst BlockBlobGetBlockListExceptionHeaders = {\n    serializedName: \"BlockBlob_getBlockListExceptionHeaders\",\n    type: {\n        name: \"Composite\",\n        className: \"BlockBlobGetBlockListExceptionHeaders\",\n        modelProperties: {\n            errorCode: {\n                serializedName: \"x-ms-error-code\",\n                xmlName: \"x-ms-error-code\",\n                type: {\n                    name: \"String\",\n                },\n            },\n        },\n    },\n};\n//# sourceMappingURL=mappers.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   accept: () => (/* binding */ accept),\n/* harmony export */   accept1: () => (/* binding */ accept1),\n/* harmony export */   accept2: () => (/* binding */ accept2),\n/* harmony export */   access: () => (/* binding */ access),\n/* harmony export */   action: () => (/* binding */ action),\n/* harmony export */   action1: () => (/* binding */ action1),\n/* harmony export */   action2: () => (/* binding */ action2),\n/* harmony export */   action3: () => (/* binding */ action3),\n/* harmony export */   action4: () => (/* binding */ action4),\n/* harmony export */   appendPosition: () => (/* binding */ appendPosition),\n/* harmony export */   blobCacheControl: () => (/* binding */ blobCacheControl),\n/* harmony export */   blobContentDisposition: () => (/* binding */ blobContentDisposition),\n/* harmony export */   blobContentEncoding: () => (/* binding */ blobContentEncoding),\n/* harmony export */   blobContentLanguage: () => (/* binding */ blobContentLanguage),\n/* harmony export */   blobContentLength: () => (/* binding */ blobContentLength),\n/* harmony export */   blobContentMD5: () => (/* binding */ blobContentMD5),\n/* harmony export */   blobContentType: () => (/* binding */ blobContentType),\n/* harmony export */   blobDeleteType: () => (/* binding */ blobDeleteType),\n/* harmony export */   blobSequenceNumber: () => (/* binding */ blobSequenceNumber),\n/* harmony export */   blobServiceProperties: () => (/* binding */ blobServiceProperties),\n/* harmony export */   blobTagsString: () => (/* binding */ blobTagsString),\n/* harmony export */   blobType: () => (/* binding */ blobType),\n/* harmony export */   blobType1: () => (/* binding */ blobType1),\n/* harmony export */   blobType2: () => (/* binding */ blobType2),\n/* harmony export */   blockId: () => (/* binding */ blockId),\n/* harmony export */   blocks: () => (/* binding */ blocks),\n/* harmony export */   body: () => (/* binding */ body),\n/* harmony export */   body1: () => (/* binding */ body1),\n/* harmony export */   breakPeriod: () => (/* binding */ breakPeriod),\n/* harmony export */   comp: () => (/* binding */ comp),\n/* harmony export */   comp1: () => (/* binding */ comp1),\n/* harmony export */   comp10: () => (/* binding */ comp10),\n/* harmony export */   comp11: () => (/* binding */ comp11),\n/* harmony export */   comp12: () => (/* binding */ comp12),\n/* harmony export */   comp13: () => (/* binding */ comp13),\n/* harmony export */   comp14: () => (/* binding */ comp14),\n/* harmony export */   comp15: () => (/* binding */ comp15),\n/* harmony export */   comp16: () => (/* binding */ comp16),\n/* harmony export */   comp17: () => (/* binding */ comp17),\n/* harmony export */   comp18: () => (/* binding */ comp18),\n/* harmony export */   comp19: () => (/* binding */ comp19),\n/* harmony export */   comp2: () => (/* binding */ comp2),\n/* harmony export */   comp20: () => (/* binding */ comp20),\n/* harmony export */   comp21: () => (/* binding */ comp21),\n/* harmony export */   comp22: () => (/* binding */ comp22),\n/* harmony export */   comp23: () => (/* binding */ comp23),\n/* harmony export */   comp24: () => (/* binding */ comp24),\n/* harmony export */   comp25: () => (/* binding */ comp25),\n/* harmony export */   comp3: () => (/* binding */ comp3),\n/* harmony export */   comp4: () => (/* binding */ comp4),\n/* harmony export */   comp5: () => (/* binding */ comp5),\n/* harmony export */   comp6: () => (/* binding */ comp6),\n/* harmony export */   comp7: () => (/* binding */ comp7),\n/* harmony export */   comp8: () => (/* binding */ comp8),\n/* harmony export */   comp9: () => (/* binding */ comp9),\n/* harmony export */   containerAcl: () => (/* binding */ containerAcl),\n/* harmony export */   contentLength: () => (/* binding */ contentLength),\n/* harmony export */   contentType: () => (/* binding */ contentType),\n/* harmony export */   contentType1: () => (/* binding */ contentType1),\n/* harmony export */   copyActionAbortConstant: () => (/* binding */ copyActionAbortConstant),\n/* harmony export */   copyId: () => (/* binding */ copyId),\n/* harmony export */   copySource: () => (/* binding */ copySource),\n/* harmony export */   copySourceAuthorization: () => (/* binding */ copySourceAuthorization),\n/* harmony export */   copySourceBlobProperties: () => (/* binding */ copySourceBlobProperties),\n/* harmony export */   copySourceTags: () => (/* binding */ copySourceTags),\n/* harmony export */   defaultEncryptionScope: () => (/* binding */ defaultEncryptionScope),\n/* harmony export */   deleteSnapshots: () => (/* binding */ deleteSnapshots),\n/* harmony export */   deletedContainerName: () => (/* binding */ deletedContainerName),\n/* harmony export */   deletedContainerVersion: () => (/* binding */ deletedContainerVersion),\n/* harmony export */   delimiter: () => (/* binding */ delimiter),\n/* harmony export */   duration: () => (/* binding */ duration),\n/* harmony export */   encryptionAlgorithm: () => (/* binding */ encryptionAlgorithm),\n/* harmony export */   encryptionKey: () => (/* binding */ encryptionKey),\n/* harmony export */   encryptionKeySha256: () => (/* binding */ encryptionKeySha256),\n/* harmony export */   encryptionScope: () => (/* binding */ encryptionScope),\n/* harmony export */   expiresOn: () => (/* binding */ expiresOn),\n/* harmony export */   expiryOptions: () => (/* binding */ expiryOptions),\n/* harmony export */   ifMatch: () => (/* binding */ ifMatch),\n/* harmony export */   ifModifiedSince: () => (/* binding */ ifModifiedSince),\n/* harmony export */   ifNoneMatch: () => (/* binding */ ifNoneMatch),\n/* harmony export */   ifSequenceNumberEqualTo: () => (/* binding */ ifSequenceNumberEqualTo),\n/* harmony export */   ifSequenceNumberLessThan: () => (/* binding */ ifSequenceNumberLessThan),\n/* harmony export */   ifSequenceNumberLessThanOrEqualTo: () => (/* binding */ ifSequenceNumberLessThanOrEqualTo),\n/* harmony export */   ifTags: () => (/* binding */ ifTags),\n/* harmony export */   ifUnmodifiedSince: () => (/* binding */ ifUnmodifiedSince),\n/* harmony export */   immutabilityPolicyExpiry: () => (/* binding */ immutabilityPolicyExpiry),\n/* harmony export */   immutabilityPolicyMode: () => (/* binding */ immutabilityPolicyMode),\n/* harmony export */   include: () => (/* binding */ include),\n/* harmony export */   include1: () => (/* binding */ include1),\n/* harmony export */   keyInfo: () => (/* binding */ keyInfo),\n/* harmony export */   leaseId: () => (/* binding */ leaseId),\n/* harmony export */   leaseId1: () => (/* binding */ leaseId1),\n/* harmony export */   legalHold: () => (/* binding */ legalHold),\n/* harmony export */   legalHold1: () => (/* binding */ legalHold1),\n/* harmony export */   listType: () => (/* binding */ listType),\n/* harmony export */   marker: () => (/* binding */ marker),\n/* harmony export */   maxPageSize: () => (/* binding */ maxPageSize),\n/* harmony export */   maxSize: () => (/* binding */ maxSize),\n/* harmony export */   metadata: () => (/* binding */ metadata),\n/* harmony export */   multipartContentType: () => (/* binding */ multipartContentType),\n/* harmony export */   pageWrite: () => (/* binding */ pageWrite),\n/* harmony export */   pageWrite1: () => (/* binding */ pageWrite1),\n/* harmony export */   prefix: () => (/* binding */ prefix),\n/* harmony export */   prevSnapshotUrl: () => (/* binding */ prevSnapshotUrl),\n/* harmony export */   preventEncryptionScopeOverride: () => (/* binding */ preventEncryptionScopeOverride),\n/* harmony export */   prevsnapshot: () => (/* binding */ prevsnapshot),\n/* harmony export */   proposedLeaseId: () => (/* binding */ proposedLeaseId),\n/* harmony export */   proposedLeaseId1: () => (/* binding */ proposedLeaseId1),\n/* harmony export */   queryRequest: () => (/* binding */ queryRequest),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   range1: () => (/* binding */ range1),\n/* harmony export */   rangeGetContentCRC64: () => (/* binding */ rangeGetContentCRC64),\n/* harmony export */   rangeGetContentMD5: () => (/* binding */ rangeGetContentMD5),\n/* harmony export */   rehydratePriority: () => (/* binding */ rehydratePriority),\n/* harmony export */   requestId: () => (/* binding */ requestId),\n/* harmony export */   restype: () => (/* binding */ restype),\n/* harmony export */   restype1: () => (/* binding */ restype1),\n/* harmony export */   restype2: () => (/* binding */ restype2),\n/* harmony export */   sealBlob: () => (/* binding */ sealBlob),\n/* harmony export */   sequenceNumberAction: () => (/* binding */ sequenceNumberAction),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   sourceContainerName: () => (/* binding */ sourceContainerName),\n/* harmony export */   sourceContentCrc64: () => (/* binding */ sourceContentCrc64),\n/* harmony export */   sourceContentMD5: () => (/* binding */ sourceContentMD5),\n/* harmony export */   sourceIfMatch: () => (/* binding */ sourceIfMatch),\n/* harmony export */   sourceIfModifiedSince: () => (/* binding */ sourceIfModifiedSince),\n/* harmony export */   sourceIfNoneMatch: () => (/* binding */ sourceIfNoneMatch),\n/* harmony export */   sourceIfTags: () => (/* binding */ sourceIfTags),\n/* harmony export */   sourceIfUnmodifiedSince: () => (/* binding */ sourceIfUnmodifiedSince),\n/* harmony export */   sourceLeaseId: () => (/* binding */ sourceLeaseId),\n/* harmony export */   sourceRange: () => (/* binding */ sourceRange),\n/* harmony export */   sourceRange1: () => (/* binding */ sourceRange1),\n/* harmony export */   sourceUrl: () => (/* binding */ sourceUrl),\n/* harmony export */   tags: () => (/* binding */ tags),\n/* harmony export */   tier: () => (/* binding */ tier),\n/* harmony export */   tier1: () => (/* binding */ tier1),\n/* harmony export */   timeoutInSeconds: () => (/* binding */ timeoutInSeconds),\n/* harmony export */   transactionalContentCrc64: () => (/* binding */ transactionalContentCrc64),\n/* harmony export */   transactionalContentMD5: () => (/* binding */ transactionalContentMD5),\n/* harmony export */   url: () => (/* binding */ url),\n/* harmony export */   version: () => (/* binding */ version),\n/* harmony export */   versionId: () => (/* binding */ versionId),\n/* harmony export */   where: () => (/* binding */ where),\n/* harmony export */   xMsRequiresSync: () => (/* binding */ xMsRequiresSync)\n/* harmony export */ });\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nconst contentType = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobServiceProperties = {\n    parameterPath: \"blobServiceProperties\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlobServiceProperties,\n};\nconst accept = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst url = {\n    parameterPath: \"url\",\n    mapper: {\n        serializedName: \"url\",\n        required: true,\n        xmlName: \"url\",\n        type: {\n            name: \"String\",\n        },\n    },\n    skipEncoding: true,\n};\nconst restype = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"service\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"properties\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst timeoutInSeconds = {\n    parameterPath: [\"options\", \"timeoutInSeconds\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 0,\n        },\n        serializedName: \"timeout\",\n        xmlName: \"timeout\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst version = {\n    parameterPath: \"version\",\n    mapper: {\n        defaultValue: \"2025-01-05\",\n        isConstant: true,\n        serializedName: \"x-ms-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst requestId = {\n    parameterPath: [\"options\", \"requestId\"],\n    mapper: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst accept1 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp1 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"stats\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp2 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"list\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prefix = {\n    parameterPath: [\"options\", \"prefix\"],\n    mapper: {\n        serializedName: \"prefix\",\n        xmlName: \"prefix\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst marker = {\n    parameterPath: [\"options\", \"marker\"],\n    mapper: {\n        serializedName: \"marker\",\n        xmlName: \"marker\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst maxPageSize = {\n    parameterPath: [\"options\", \"maxPageSize\"],\n    mapper: {\n        constraints: {\n            InclusiveMinimum: 1,\n        },\n        serializedName: \"maxresults\",\n        xmlName: \"maxresults\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst include = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListContainersIncludeType\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\"metadata\", \"deleted\", \"system\"],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nconst keyInfo = {\n    parameterPath: \"keyInfo\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.KeyInfo,\n};\nconst comp3 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"userdelegationkey\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst restype1 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"account\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst body = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nconst comp4 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"batch\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst contentLength = {\n    parameterPath: \"contentLength\",\n    mapper: {\n        serializedName: \"Content-Length\",\n        required: true,\n        xmlName: \"Content-Length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst multipartContentType = {\n    parameterPath: \"multipartContentType\",\n    mapper: {\n        serializedName: \"Content-Type\",\n        required: true,\n        xmlName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp5 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blobs\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst where = {\n    parameterPath: [\"options\", \"where\"],\n    mapper: {\n        serializedName: \"where\",\n        xmlName: \"where\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst restype2 = {\n    parameterPath: \"restype\",\n    mapper: {\n        defaultValue: \"container\",\n        isConstant: true,\n        serializedName: \"restype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst metadata = {\n    parameterPath: [\"options\", \"metadata\"],\n    mapper: {\n        serializedName: \"x-ms-meta\",\n        xmlName: \"x-ms-meta\",\n        headerCollectionPrefix: \"x-ms-meta-\",\n        type: {\n            name: \"Dictionary\",\n            value: { type: { name: \"String\" } },\n        },\n    },\n};\nconst access = {\n    parameterPath: [\"options\", \"access\"],\n    mapper: {\n        serializedName: \"x-ms-blob-public-access\",\n        xmlName: \"x-ms-blob-public-access\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"container\", \"blob\"],\n        },\n    },\n};\nconst defaultEncryptionScope = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"defaultEncryptionScope\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-default-encryption-scope\",\n        xmlName: \"x-ms-default-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst preventEncryptionScopeOverride = {\n    parameterPath: [\n        \"options\",\n        \"containerEncryptionScope\",\n        \"preventEncryptionScopeOverride\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-deny-encryption-scope-override\",\n        xmlName: \"x-ms-deny-encryption-scope-override\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst leaseId = {\n    parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifModifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n    mapper: {\n        serializedName: \"If-Modified-Since\",\n        xmlName: \"If-Modified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst ifUnmodifiedSince = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n    mapper: {\n        serializedName: \"If-Unmodified-Since\",\n        xmlName: \"If-Unmodified-Since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst comp6 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"metadata\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp7 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"acl\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst containerAcl = {\n    parameterPath: [\"options\", \"containerAcl\"],\n    mapper: {\n        serializedName: \"containerAcl\",\n        xmlName: \"SignedIdentifiers\",\n        xmlIsWrapped: true,\n        xmlElementName: \"SignedIdentifier\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Composite\",\n                    className: \"SignedIdentifier\",\n                },\n            },\n        },\n    },\n};\nconst comp8 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"undelete\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deletedContainerName = {\n    parameterPath: [\"options\", \"deletedContainerName\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-name\",\n        xmlName: \"x-ms-deleted-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deletedContainerVersion = {\n    parameterPath: [\"options\", \"deletedContainerVersion\"],\n    mapper: {\n        serializedName: \"x-ms-deleted-container-version\",\n        xmlName: \"x-ms-deleted-container-version\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp9 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"rename\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContainerName = {\n    parameterPath: \"sourceContainerName\",\n    mapper: {\n        serializedName: \"x-ms-source-container-name\",\n        required: true,\n        xmlName: \"x-ms-source-container-name\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceLeaseId = {\n    parameterPath: [\"options\", \"sourceLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-source-lease-id\",\n        xmlName: \"x-ms-source-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp10 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"lease\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"acquire\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst duration = {\n    parameterPath: [\"options\", \"duration\"],\n    mapper: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst proposedLeaseId = {\n    parameterPath: [\"options\", \"proposedLeaseId\"],\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action1 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"release\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst leaseId1 = {\n    parameterPath: \"leaseId\",\n    mapper: {\n        serializedName: \"x-ms-lease-id\",\n        required: true,\n        xmlName: \"x-ms-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action2 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"renew\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst action3 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"break\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst breakPeriod = {\n    parameterPath: [\"options\", \"breakPeriod\"],\n    mapper: {\n        serializedName: \"x-ms-lease-break-period\",\n        xmlName: \"x-ms-lease-break-period\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst action4 = {\n    parameterPath: \"action\",\n    mapper: {\n        defaultValue: \"change\",\n        isConstant: true,\n        serializedName: \"x-ms-lease-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst proposedLeaseId1 = {\n    parameterPath: \"proposedLeaseId\",\n    mapper: {\n        serializedName: \"x-ms-proposed-lease-id\",\n        required: true,\n        xmlName: \"x-ms-proposed-lease-id\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst include1 = {\n    parameterPath: [\"options\", \"include\"],\n    mapper: {\n        serializedName: \"include\",\n        xmlName: \"include\",\n        xmlElementName: \"ListBlobsIncludeItem\",\n        type: {\n            name: \"Sequence\",\n            element: {\n                type: {\n                    name: \"Enum\",\n                    allowedValues: [\n                        \"copy\",\n                        \"deleted\",\n                        \"metadata\",\n                        \"snapshots\",\n                        \"uncommittedblobs\",\n                        \"versions\",\n                        \"tags\",\n                        \"immutabilitypolicy\",\n                        \"legalhold\",\n                        \"deletedwithversions\",\n                    ],\n                },\n            },\n        },\n    },\n    collectionFormat: \"CSV\",\n};\nconst delimiter = {\n    parameterPath: \"delimiter\",\n    mapper: {\n        serializedName: \"delimiter\",\n        required: true,\n        xmlName: \"delimiter\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst snapshot = {\n    parameterPath: [\"options\", \"snapshot\"],\n    mapper: {\n        serializedName: \"snapshot\",\n        xmlName: \"snapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst versionId = {\n    parameterPath: [\"options\", \"versionId\"],\n    mapper: {\n        serializedName: \"versionid\",\n        xmlName: \"versionid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst range = {\n    parameterPath: [\"options\", \"range\"],\n    mapper: {\n        serializedName: \"x-ms-range\",\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst rangeGetContentMD5 = {\n    parameterPath: [\"options\", \"rangeGetContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-md5\",\n        xmlName: \"x-ms-range-get-content-md5\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst rangeGetContentCRC64 = {\n    parameterPath: [\"options\", \"rangeGetContentCRC64\"],\n    mapper: {\n        serializedName: \"x-ms-range-get-content-crc64\",\n        xmlName: \"x-ms-range-get-content-crc64\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst encryptionKey = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKey\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key\",\n        xmlName: \"x-ms-encryption-key\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst encryptionKeySha256 = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionKeySha256\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-key-sha256\",\n        xmlName: \"x-ms-encryption-key-sha256\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst encryptionAlgorithm = {\n    parameterPath: [\"options\", \"cpkInfo\", \"encryptionAlgorithm\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-algorithm\",\n        xmlName: \"x-ms-encryption-algorithm\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n    mapper: {\n        serializedName: \"If-Match\",\n        xmlName: \"If-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifNoneMatch = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n    mapper: {\n        serializedName: \"If-None-Match\",\n        xmlName: \"If-None-Match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifTags = {\n    parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifTags\"],\n    mapper: {\n        serializedName: \"x-ms-if-tags\",\n        xmlName: \"x-ms-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst deleteSnapshots = {\n    parameterPath: [\"options\", \"deleteSnapshots\"],\n    mapper: {\n        serializedName: \"x-ms-delete-snapshots\",\n        xmlName: \"x-ms-delete-snapshots\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"include\", \"only\"],\n        },\n    },\n};\nconst blobDeleteType = {\n    parameterPath: [\"options\", \"blobDeleteType\"],\n    mapper: {\n        serializedName: \"deletetype\",\n        xmlName: \"deletetype\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp11 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"expiry\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst expiryOptions = {\n    parameterPath: \"expiryOptions\",\n    mapper: {\n        serializedName: \"x-ms-expiry-option\",\n        required: true,\n        xmlName: \"x-ms-expiry-option\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst expiresOn = {\n    parameterPath: [\"options\", \"expiresOn\"],\n    mapper: {\n        serializedName: \"x-ms-expiry-time\",\n        xmlName: \"x-ms-expiry-time\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobCacheControl = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobCacheControl\"],\n    mapper: {\n        serializedName: \"x-ms-blob-cache-control\",\n        xmlName: \"x-ms-blob-cache-control\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentType = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentType\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-type\",\n        xmlName: \"x-ms-blob-content-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentMD5 = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-md5\",\n        xmlName: \"x-ms-blob-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst blobContentEncoding = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentEncoding\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-encoding\",\n        xmlName: \"x-ms-blob-content-encoding\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentLanguage = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentLanguage\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-language\",\n        xmlName: \"x-ms-blob-content-language\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentDisposition = {\n    parameterPath: [\"options\", \"blobHttpHeaders\", \"blobContentDisposition\"],\n    mapper: {\n        serializedName: \"x-ms-blob-content-disposition\",\n        xmlName: \"x-ms-blob-content-disposition\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp12 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"immutabilityPolicies\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst immutabilityPolicyExpiry = {\n    parameterPath: [\"options\", \"immutabilityPolicyExpiry\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-until-date\",\n        xmlName: \"x-ms-immutability-policy-until-date\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst immutabilityPolicyMode = {\n    parameterPath: [\"options\", \"immutabilityPolicyMode\"],\n    mapper: {\n        serializedName: \"x-ms-immutability-policy-mode\",\n        xmlName: \"x-ms-immutability-policy-mode\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"Mutable\", \"Unlocked\", \"Locked\"],\n        },\n    },\n};\nconst comp13 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"legalhold\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst legalHold = {\n    parameterPath: \"legalHold\",\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        required: true,\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst encryptionScope = {\n    parameterPath: [\"options\", \"encryptionScope\"],\n    mapper: {\n        serializedName: \"x-ms-encryption-scope\",\n        xmlName: \"x-ms-encryption-scope\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp14 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"snapshot\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tier = {\n    parameterPath: [\"options\", \"tier\"],\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nconst rehydratePriority = {\n    parameterPath: [\"options\", \"rehydratePriority\"],\n    mapper: {\n        serializedName: \"x-ms-rehydrate-priority\",\n        xmlName: \"x-ms-rehydrate-priority\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"High\", \"Standard\"],\n        },\n    },\n};\nconst sourceIfModifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfModifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-modified-since\",\n        xmlName: \"x-ms-source-if-modified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst sourceIfUnmodifiedSince = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfUnmodifiedSince\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-unmodified-since\",\n        xmlName: \"x-ms-source-if-unmodified-since\",\n        type: {\n            name: \"DateTimeRfc1123\",\n        },\n    },\n};\nconst sourceIfMatch = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-match\",\n        xmlName: \"x-ms-source-if-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceIfNoneMatch = {\n    parameterPath: [\n        \"options\",\n        \"sourceModifiedAccessConditions\",\n        \"sourceIfNoneMatch\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-source-if-none-match\",\n        xmlName: \"x-ms-source-if-none-match\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceIfTags = {\n    parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfTags\"],\n    mapper: {\n        serializedName: \"x-ms-source-if-tags\",\n        xmlName: \"x-ms-source-if-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySource = {\n    parameterPath: \"copySource\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobTagsString = {\n    parameterPath: [\"options\", \"blobTagsString\"],\n    mapper: {\n        serializedName: \"x-ms-tags\",\n        xmlName: \"x-ms-tags\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sealBlob = {\n    parameterPath: [\"options\", \"sealBlob\"],\n    mapper: {\n        serializedName: \"x-ms-seal-blob\",\n        xmlName: \"x-ms-seal-blob\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst legalHold1 = {\n    parameterPath: [\"options\", \"legalHold\"],\n    mapper: {\n        serializedName: \"x-ms-legal-hold\",\n        xmlName: \"x-ms-legal-hold\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst xMsRequiresSync = {\n    parameterPath: \"xMsRequiresSync\",\n    mapper: {\n        defaultValue: \"true\",\n        isConstant: true,\n        serializedName: \"x-ms-requires-sync\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContentMD5 = {\n    parameterPath: [\"options\", \"sourceContentMD5\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-md5\",\n        xmlName: \"x-ms-source-content-md5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst copySourceAuthorization = {\n    parameterPath: [\"options\", \"copySourceAuthorization\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-authorization\",\n        xmlName: \"x-ms-copy-source-authorization\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySourceTags = {\n    parameterPath: [\"options\", \"copySourceTags\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-tag-option\",\n        xmlName: \"x-ms-copy-source-tag-option\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"REPLACE\", \"COPY\"],\n        },\n    },\n};\nconst comp15 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"copy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copyActionAbortConstant = {\n    parameterPath: \"copyActionAbortConstant\",\n    mapper: {\n        defaultValue: \"abort\",\n        isConstant: true,\n        serializedName: \"x-ms-copy-action\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copyId = {\n    parameterPath: \"copyId\",\n    mapper: {\n        serializedName: \"copyid\",\n        required: true,\n        xmlName: \"copyid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp16 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tier\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tier1 = {\n    parameterPath: \"tier\",\n    mapper: {\n        serializedName: \"x-ms-access-tier\",\n        required: true,\n        xmlName: \"x-ms-access-tier\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\n                \"P4\",\n                \"P6\",\n                \"P10\",\n                \"P15\",\n                \"P20\",\n                \"P30\",\n                \"P40\",\n                \"P50\",\n                \"P60\",\n                \"P70\",\n                \"P80\",\n                \"Hot\",\n                \"Cool\",\n                \"Archive\",\n                \"Cold\",\n            ],\n        },\n    },\n};\nconst queryRequest = {\n    parameterPath: [\"options\", \"queryRequest\"],\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.QueryRequest,\n};\nconst comp17 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"query\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp18 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"tags\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst tags = {\n    parameterPath: [\"options\", \"tags\"],\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlobTags,\n};\nconst transactionalContentMD5 = {\n    parameterPath: [\"options\", \"transactionalContentMD5\"],\n    mapper: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst transactionalContentCrc64 = {\n    parameterPath: [\"options\", \"transactionalContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst blobType = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"PageBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobContentLength = {\n    parameterPath: \"blobContentLength\",\n    mapper: {\n        serializedName: \"x-ms-blob-content-length\",\n        required: true,\n        xmlName: \"x-ms-blob-content-length\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst blobSequenceNumber = {\n    parameterPath: [\"options\", \"blobSequenceNumber\"],\n    mapper: {\n        defaultValue: 0,\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst contentType1 = {\n    parameterPath: [\"options\", \"contentType\"],\n    mapper: {\n        defaultValue: \"application/octet-stream\",\n        isConstant: true,\n        serializedName: \"Content-Type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst body1 = {\n    parameterPath: \"body\",\n    mapper: {\n        serializedName: \"body\",\n        required: true,\n        xmlName: \"body\",\n        type: {\n            name: \"Stream\",\n        },\n    },\n};\nconst accept2 = {\n    parameterPath: \"accept\",\n    mapper: {\n        defaultValue: \"application/xml\",\n        isConstant: true,\n        serializedName: \"Accept\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp19 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"page\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst pageWrite = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"update\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst ifSequenceNumberLessThanOrEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThanOrEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-le\",\n        xmlName: \"x-ms-if-sequence-number-le\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst ifSequenceNumberLessThan = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberLessThan\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-lt\",\n        xmlName: \"x-ms-if-sequence-number-lt\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst ifSequenceNumberEqualTo = {\n    parameterPath: [\n        \"options\",\n        \"sequenceNumberAccessConditions\",\n        \"ifSequenceNumberEqualTo\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-if-sequence-number-eq\",\n        xmlName: \"x-ms-if-sequence-number-eq\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst pageWrite1 = {\n    parameterPath: \"pageWrite\",\n    mapper: {\n        defaultValue: \"clear\",\n        isConstant: true,\n        serializedName: \"x-ms-page-write\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceUrl = {\n    parameterPath: \"sourceUrl\",\n    mapper: {\n        serializedName: \"x-ms-copy-source\",\n        required: true,\n        xmlName: \"x-ms-copy-source\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceRange = {\n    parameterPath: \"sourceRange\",\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        required: true,\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sourceContentCrc64 = {\n    parameterPath: [\"options\", \"sourceContentCrc64\"],\n    mapper: {\n        serializedName: \"x-ms-source-content-crc64\",\n        xmlName: \"x-ms-source-content-crc64\",\n        type: {\n            name: \"ByteArray\",\n        },\n    },\n};\nconst range1 = {\n    parameterPath: \"range\",\n    mapper: {\n        serializedName: \"x-ms-range\",\n        required: true,\n        xmlName: \"x-ms-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp20 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"pagelist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prevsnapshot = {\n    parameterPath: [\"options\", \"prevsnapshot\"],\n    mapper: {\n        serializedName: \"prevsnapshot\",\n        xmlName: \"prevsnapshot\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst prevSnapshotUrl = {\n    parameterPath: [\"options\", \"prevSnapshotUrl\"],\n    mapper: {\n        serializedName: \"x-ms-previous-snapshot-url\",\n        xmlName: \"x-ms-previous-snapshot-url\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst sequenceNumberAction = {\n    parameterPath: \"sequenceNumberAction\",\n    mapper: {\n        serializedName: \"x-ms-sequence-number-action\",\n        required: true,\n        xmlName: \"x-ms-sequence-number-action\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"max\", \"update\", \"increment\"],\n        },\n    },\n};\nconst comp21 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"incrementalcopy\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobType1 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"AppendBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp22 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"appendblock\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst maxSize = {\n    parameterPath: [\"options\", \"appendPositionAccessConditions\", \"maxSize\"],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-maxsize\",\n        xmlName: \"x-ms-blob-condition-maxsize\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst appendPosition = {\n    parameterPath: [\n        \"options\",\n        \"appendPositionAccessConditions\",\n        \"appendPosition\",\n    ],\n    mapper: {\n        serializedName: \"x-ms-blob-condition-appendpos\",\n        xmlName: \"x-ms-blob-condition-appendpos\",\n        type: {\n            name: \"Number\",\n        },\n    },\n};\nconst sourceRange1 = {\n    parameterPath: [\"options\", \"sourceRange\"],\n    mapper: {\n        serializedName: \"x-ms-source-range\",\n        xmlName: \"x-ms-source-range\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst comp23 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"seal\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blobType2 = {\n    parameterPath: \"blobType\",\n    mapper: {\n        defaultValue: \"BlockBlob\",\n        isConstant: true,\n        serializedName: \"x-ms-blob-type\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst copySourceBlobProperties = {\n    parameterPath: [\"options\", \"copySourceBlobProperties\"],\n    mapper: {\n        serializedName: \"x-ms-copy-source-blob-properties\",\n        xmlName: \"x-ms-copy-source-blob-properties\",\n        type: {\n            name: \"Boolean\",\n        },\n    },\n};\nconst comp24 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"block\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blockId = {\n    parameterPath: \"blockId\",\n    mapper: {\n        serializedName: \"blockid\",\n        required: true,\n        xmlName: \"blockid\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst blocks = {\n    parameterPath: \"blocks\",\n    mapper: _models_mappers__WEBPACK_IMPORTED_MODULE_0__.BlockLookupList,\n};\nconst comp25 = {\n    parameterPath: \"comp\",\n    mapper: {\n        defaultValue: \"blocklist\",\n        isConstant: true,\n        serializedName: \"comp\",\n        type: {\n            name: \"String\",\n        },\n    },\n};\nconst listType = {\n    parameterPath: \"listType\",\n    mapper: {\n        defaultValue: \"committed\",\n        serializedName: \"blocklisttype\",\n        required: true,\n        xmlName: \"blocklisttype\",\n        type: {\n            name: \"Enum\",\n            allowedValues: [\"committed\", \"uncommitted\", \"all\"],\n        },\n    },\n};\n//# sourceMappingURL=parameters.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppendBlobImpl: () => (/* binding */ AppendBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing AppendBlob operations. */\nclass AppendBlobImpl {\n    /**\n     * Initialize a new instance of the class AppendBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create Append Blob operation creates a new append blob.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    create(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob. The\n     * Append Block operation is permitted only if the blob was created with x-ms-blob-type set to\n     * AppendBlob. Append Block is supported only on version 2015-02-21 version or later.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    appendBlock(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, appendBlockOperationSpec);\n    }\n    /**\n     * The Append Block operation commits a new block of data to the end of an existing append blob where\n     * the contents are read from a source url. The Append Block operation is permitted only if the blob\n     * was created with x-ms-blob-type set to AppendBlob. Append Block is supported only on version\n     * 2015-02-21 version or later.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    appendBlockFromUrl(sourceUrl, contentLength, options) {\n        return this.client.sendOperationRequest({ sourceUrl, contentLength, options }, appendBlockFromUrlOperationSpec);\n    }\n    /**\n     * The Seal operation seals the Append Blob to make it read-only. Seal is supported only on version\n     * 2019-12-12 version or later.\n     * @param options The options parameters.\n     */\n    seal(options) {\n        return this.client.sendOperationRequest({ options }, sealOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst appendBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp22],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst appendBlockFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobAppendBlockFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp22],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst sealOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobSealHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.AppendBlobSealExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp23],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.appendPosition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=appendBlob.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobImpl: () => (/* binding */ BlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Blob operations. */\nclass BlobImpl {\n    /**\n     * Initialize a new instance of the class Blob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Download operation reads or downloads a blob from the system, including its metadata and\n     * properties. You can also call Download to read a snapshot.\n     * @param options The options parameters.\n     */\n    download(options) {\n        return this.client.sendOperationRequest({ options }, downloadOperationSpec);\n    }\n    /**\n     * The Get Properties operation returns all user-defined metadata, standard HTTP properties, and system\n     * properties for the blob. It does not return the content of the blob.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * If the storage account's soft delete feature is disabled then, when a blob is deleted, it is\n     * permanently removed from the storage account. If the storage account's soft delete feature is\n     * enabled, then, when a blob is deleted, it is marked for deletion and becomes inaccessible\n     * immediately. However, the blob service retains the blob or snapshot for the number of days specified\n     * by the DeleteRetentionPolicy section of [Storage service properties]\n     * (Set-Blob-Service-Properties.md). After the specified number of days has passed, the blob's data is\n     * permanently removed from the storage account. Note that you continue to be charged for the\n     * soft-deleted blob's storage until it is permanently removed. Use the List Blobs API and specify the\n     * \"include=deleted\" query parameter to discover which blobs and snapshots have been soft deleted. You\n     * can then use the Undelete Blob API to restore a soft-deleted blob. All other operations on a\n     * soft-deleted blob or snapshot causes the service to return an HTTP status code of 404\n     * (ResourceNotFound).\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * Undelete a blob that was previously soft deleted\n     * @param options The options parameters.\n     */\n    undelete(options) {\n        return this.client.sendOperationRequest({ options }, undeleteOperationSpec);\n    }\n    /**\n     * Sets the time a blob will expire and be deleted.\n     * @param expiryOptions Required. Indicates mode of the expiry time\n     * @param options The options parameters.\n     */\n    setExpiry(expiryOptions, options) {\n        return this.client.sendOperationRequest({ expiryOptions, options }, setExpiryOperationSpec);\n    }\n    /**\n     * The Set HTTP Headers operation sets system properties on the blob\n     * @param options The options parameters.\n     */\n    setHttpHeaders(options) {\n        return this.client.sendOperationRequest({ options }, setHttpHeadersOperationSpec);\n    }\n    /**\n     * The Set Immutability Policy operation sets the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    setImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Delete Immutability Policy operation deletes the immutability policy on the blob\n     * @param options The options parameters.\n     */\n    deleteImmutabilityPolicy(options) {\n        return this.client.sendOperationRequest({ options }, deleteImmutabilityPolicyOperationSpec);\n    }\n    /**\n     * The Set Legal Hold operation sets a legal hold on the blob.\n     * @param legalHold Specified if a legal hold should be set on the blob.\n     * @param options The options parameters.\n     */\n    setLegalHold(legalHold, options) {\n        return this.client.sendOperationRequest({ legalHold, options }, setLegalHoldOperationSpec);\n    }\n    /**\n     * The Set Blob Metadata operation sets user-defined metadata for the specified blob as one or more\n     * name-value pairs\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The Lease Blob operation establishes and manages a lock on a blob for write and delete\n     * operations\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * The Create Snapshot operation creates a read-only snapshot of a blob\n     * @param options The options parameters.\n     */\n    createSnapshot(options) {\n        return this.client.sendOperationRequest({ options }, createSnapshotOperationSpec);\n    }\n    /**\n     * The Start Copy From URL operation copies a blob or an internet resource to a new blob.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    startCopyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, startCopyFromURLOperationSpec);\n    }\n    /**\n     * The Copy From URL operation copies a blob or an internet resource to a new blob. It will not return\n     * a response until the copy is complete.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyFromURL(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyFromURLOperationSpec);\n    }\n    /**\n     * The Abort Copy From URL operation aborts a pending Copy From URL operation, and leaves a destination\n     * blob with zero length and full metadata.\n     * @param copyId The copy identifier provided in the x-ms-copy-id header of the original Copy Blob\n     *               operation.\n     * @param options The options parameters.\n     */\n    abortCopyFromURL(copyId, options) {\n        return this.client.sendOperationRequest({ copyId, options }, abortCopyFromURLOperationSpec);\n    }\n    /**\n     * The Set Tier operation sets the tier on a blob. The operation is allowed on a page blob in a premium\n     * storage account and on a block blob in a blob storage account (locally redundant storage only). A\n     * premium page blob's tier determines the allowed size, IOPS, and bandwidth of the blob. A block\n     * blob's tier determines Hot/Cool/Archive storage type. This operation does not update the blob's\n     * ETag.\n     * @param tier Indicates the tier to be set on the blob.\n     * @param options The options parameters.\n     */\n    setTier(tier, options) {\n        return this.client.sendOperationRequest({ tier, options }, setTierOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Query operation enables users to select/project on blob data by providing simple query\n     * expressions.\n     * @param options The options parameters.\n     */\n    query(options) {\n        return this.client.sendOperationRequest({ options }, queryOperationSpec);\n    }\n    /**\n     * The Get Tags operation enables users to get the tags associated with a blob.\n     * @param options The options parameters.\n     */\n    getTags(options) {\n        return this.client.sendOperationRequest({ options }, getTagsOperationSpec);\n    }\n    /**\n     * The Set Tags operation enables users to set tags on a blob.\n     * @param options The options parameters.\n     */\n    setTags(options) {\n        return this.client.sendOperationRequest({ options }, setTagsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst downloadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDownloadExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rangeGetContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rangeGetContentCRC64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"HEAD\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobDeleteType,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deleteSnapshots,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst undeleteOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobUndeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobUndeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp8],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setExpiryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetExpiryHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetExpiryExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp11],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.expiryOptions,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.expiresOn,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setHttpHeadersOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetHttpHeadersHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetHttpHeadersExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp12,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteImmutabilityPolicyOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteImmutabilityPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobDeleteImmutabilityPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp12,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setLegalHoldOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetLegalHoldHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetLegalHoldExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp13,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp6],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.duration,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action3,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.breakPeriod,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst createSnapshotOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCreateSnapshotHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCreateSnapshotExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp14],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst startCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobStartCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobStartCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rehydratePriority,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sealBlob,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.xMsRequiresSync,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst abortCopyFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAbortCopyFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobAbortCopyFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp15,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copyId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copyActionAbortConstant,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTierOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierHeaders,\n        },\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTierExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp16,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.rehydratePriority,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst queryOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryHeaders,\n        },\n        206: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobQueryExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.queryRequest,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp17,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobTags,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetTagsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobGetTagsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp18,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setTagsOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        204: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTagsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobSetTagsExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tags,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.versionId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp18,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blob.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockBlobImpl: () => (/* binding */ BlockBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing BlockBlob operations. */\nclass BlockBlobImpl {\n    /**\n     * Initialize a new instance of the class BlockBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Upload Block Blob operation updates the content of an existing block blob. Updating an existing\n     * block blob overwrites any existing metadata on the blob. Partial updates are not supported with Put\n     * Blob; the content of the existing blob is overwritten with the content of the new blob. To perform a\n     * partial update of the content of a block blob, use the Put Block List operation.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    upload(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadOperationSpec);\n    }\n    /**\n     * The Put Blob from URL operation creates a new Block Blob where the contents of the blob are read\n     * from a given URL.  This API is supported beginning with the 2020-04-08 version. Partial updates are\n     * not supported with Put Blob from URL; the content of an existing blob is overwritten with the\n     * content of the new blob.  To perform partial updates to a block blob’s contents using a source URL,\n     * use the Put Block from URL API in conjunction with Put Block List.\n     * @param contentLength The length of the request.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    putBlobFromUrl(contentLength, copySource, options) {\n        return this.client.sendOperationRequest({ contentLength, copySource, options }, putBlobFromUrlOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    stageBlock(blockId, contentLength, body, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, body, options }, stageBlockOperationSpec);\n    }\n    /**\n     * The Stage Block operation creates a new block to be committed as part of a blob where the contents\n     * are read from a URL.\n     * @param blockId A valid Base64 string value that identifies the block. Prior to encoding, the string\n     *                must be less than or equal to 64 bytes in size. For a given blob, the length of the value specified\n     *                for the blockid parameter must be the same size for each block.\n     * @param contentLength The length of the request.\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param options The options parameters.\n     */\n    stageBlockFromURL(blockId, contentLength, sourceUrl, options) {\n        return this.client.sendOperationRequest({ blockId, contentLength, sourceUrl, options }, stageBlockFromURLOperationSpec);\n    }\n    /**\n     * The Commit Block List operation writes a blob by specifying the list of block IDs that make up the\n     * blob. In order to be written as part of a blob, a block must have been successfully written to the\n     * server in a prior Put Block operation. You can call Put Block List to update a blob by uploading\n     * only those blocks that have changed, then committing the new and existing blocks together. You can\n     * do this by specifying whether to commit a block from the committed block list or from the\n     * uncommitted block list, or to commit the most recently uploaded version of the block, whichever list\n     * it may belong to.\n     * @param blocks Blob Blocks.\n     * @param options The options parameters.\n     */\n    commitBlockList(blocks, options) {\n        return this.client.sendOperationRequest({ blocks, options }, commitBlockListOperationSpec);\n    }\n    /**\n     * The Get Block List operation retrieves the list of blocks that have been uploaded as part of a block\n     * blob\n     * @param listType Specifies whether to return the list of committed blocks, the list of uncommitted\n     *                 blocks, or both lists together.\n     * @param options The options parameters.\n     */\n    getBlockList(listType, options) {\n        return this.client.sendOperationRequest({ listType, options }, getBlockListOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst uploadOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobUploadHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobUploadExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst putBlobFromUrlOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobPutBlobFromUrlHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobPutBlobFromUrlExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceBlobProperties,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst stageBlockOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp24,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blockId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst stageBlockFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobStageBlockFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp24,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blockId,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst commitBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobCommitBlockListHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobCommitBlockListExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blocks,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp25],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getBlockListOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobGetBlockListHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlockBlobGetBlockListExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp25,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.listType,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=blockBlob.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerImpl: () => (/* binding */ ContainerImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Container operations. */\nclass ContainerImpl {\n    /**\n     * Initialize a new instance of the class Container class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * creates a new container under the specified account. If the container with the same name already\n     * exists, the operation fails\n     * @param options The options parameters.\n     */\n    create(options) {\n        return this.client.sendOperationRequest({ options }, createOperationSpec);\n    }\n    /**\n     * returns all user-defined metadata and system properties for the specified container. The data\n     * returned does not include the container's list of blobs\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * operation marks the specified container for deletion. The container and any blobs contained within\n     * it are later deleted during garbage collection\n     * @param options The options parameters.\n     */\n    delete(options) {\n        return this.client.sendOperationRequest({ options }, deleteOperationSpec);\n    }\n    /**\n     * operation sets one or more user-defined name-value pairs for the specified container.\n     * @param options The options parameters.\n     */\n    setMetadata(options) {\n        return this.client.sendOperationRequest({ options }, setMetadataOperationSpec);\n    }\n    /**\n     * gets the permissions for the specified container. The permissions indicate whether container data\n     * may be accessed publicly.\n     * @param options The options parameters.\n     */\n    getAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, getAccessPolicyOperationSpec);\n    }\n    /**\n     * sets the permissions for the specified container. The permissions indicate whether blobs in a\n     * container may be accessed publicly.\n     * @param options The options parameters.\n     */\n    setAccessPolicy(options) {\n        return this.client.sendOperationRequest({ options }, setAccessPolicyOperationSpec);\n    }\n    /**\n     * Restores a previously-deleted container.\n     * @param options The options parameters.\n     */\n    restore(options) {\n        return this.client.sendOperationRequest({ options }, restoreOperationSpec);\n    }\n    /**\n     * Renames an existing container.\n     * @param sourceContainerName Required.  Specifies the name of the container to rename.\n     * @param options The options parameters.\n     */\n    rename(sourceContainerName, options) {\n        return this.client.sendOperationRequest({ sourceContainerName, options }, renameOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs in a container whose tags match a given\n     * search expression.  Filter blobs searches within the given container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    acquireLease(options) {\n        return this.client.sendOperationRequest({ options }, acquireLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    releaseLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, releaseLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param options The options parameters.\n     */\n    renewLease(leaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, options }, renewLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param options The options parameters.\n     */\n    breakLease(options) {\n        return this.client.sendOperationRequest({ options }, breakLeaseOperationSpec);\n    }\n    /**\n     * [Update] establishes and manages a lock on a container for delete operations. The lock duration can\n     * be 15 to 60 seconds, or can be infinite\n     * @param leaseId Specifies the current lease ID on the resource.\n     * @param proposedLeaseId Proposed lease ID, in a GUID string format. The Blob service returns 400\n     *                        (Invalid request) if the proposed lease ID is not in the correct format. See Guid Constructor\n     *                        (String) for a list of valid GUID string formats.\n     * @param options The options parameters.\n     */\n    changeLease(leaseId, proposedLeaseId, options) {\n        return this.client.sendOperationRequest({ leaseId, proposedLeaseId, options }, changeLeaseOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param options The options parameters.\n     */\n    listBlobFlatSegment(options) {\n        return this.client.sendOperationRequest({ options }, listBlobFlatSegmentOperationSpec);\n    }\n    /**\n     * [Update] The List Blobs operation returns a list of the blobs under the specified container\n     * @param delimiter When the request includes this parameter, the operation returns a BlobPrefix\n     *                  element in the response body that acts as a placeholder for all blobs whose names begin with the\n     *                  same substring up to the appearance of the delimiter character. The delimiter may be a single\n     *                  character or a string.\n     * @param options The options parameters.\n     */\n    listBlobHierarchySegment(delimiter, options) {\n        return this.client.sendOperationRequest({ delimiter, options }, listBlobHierarchySegmentOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.access,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.defaultEncryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.preventEncryptionScopeOverride,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst deleteOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"DELETE\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerDeleteHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerDeleteExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setMetadataOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetMetadataHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetMetadataExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp6,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: {\n                type: {\n                    name: \"Sequence\",\n                    element: {\n                        type: { name: \"Composite\", className: \"SignedIdentifier\" },\n                    },\n                },\n                serializedName: \"SignedIdentifiers\",\n                xmlName: \"SignedIdentifiers\",\n                xmlIsWrapped: true,\n                xmlElementName: \"SignedIdentifier\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccessPolicyExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp7,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst setAccessPolicyOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetAccessPolicyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSetAccessPolicyExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.containerAcl,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp7,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.access,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst restoreOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRestoreHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRestoreExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp8,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deletedContainerName,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.deletedContainerVersion,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renameOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenameHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenameExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp9,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContainerName,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.FilterBlobSegment,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.where,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst acquireLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerAcquireLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerAcquireLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.duration,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst releaseLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerReleaseLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerReleaseLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst renewLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenewLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerRenewLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action2,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst breakLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerBreakLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerBreakLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action3,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.breakPeriod,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst changeLeaseOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerChangeLeaseHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerChangeLeaseExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp10,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.action4,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.proposedLeaseId1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobFlatSegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListBlobsFlatSegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobFlatSegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobFlatSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listBlobHierarchySegmentOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListBlobsHierarchySegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobHierarchySegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerListBlobHierarchySegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.delimiter,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/{containerName}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ContainerGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=container.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PageBlobImpl: () => (/* binding */ PageBlobImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing PageBlob operations. */\nclass PageBlobImpl {\n    /**\n     * Initialize a new instance of the class PageBlob class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * The Create operation creates a new page blob.\n     * @param contentLength The length of the request.\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    create(contentLength, blobContentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, blobContentLength, options }, createOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob\n     * @param contentLength The length of the request.\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    uploadPages(contentLength, body, options) {\n        return this.client.sendOperationRequest({ contentLength, body, options }, uploadPagesOperationSpec);\n    }\n    /**\n     * The Clear Pages operation clears a set of pages from a page blob\n     * @param contentLength The length of the request.\n     * @param options The options parameters.\n     */\n    clearPages(contentLength, options) {\n        return this.client.sendOperationRequest({ contentLength, options }, clearPagesOperationSpec);\n    }\n    /**\n     * The Upload Pages operation writes a range of pages to a page blob where the contents are read from a\n     * URL\n     * @param sourceUrl Specify a URL to the copy source.\n     * @param sourceRange Bytes of source data in the specified range. The length of this range should\n     *                    match the ContentLength header and x-ms-range/Range destination range header.\n     * @param contentLength The length of the request.\n     * @param range The range of bytes to which the source range would be written. The range should be 512\n     *              aligned and range-end is required.\n     * @param options The options parameters.\n     */\n    uploadPagesFromURL(sourceUrl, sourceRange, contentLength, range, options) {\n        return this.client.sendOperationRequest({ sourceUrl, sourceRange, contentLength, range, options }, uploadPagesFromURLOperationSpec);\n    }\n    /**\n     * The Get Page Ranges operation returns the list of valid page ranges for a page blob or snapshot of a\n     * page blob\n     * @param options The options parameters.\n     */\n    getPageRanges(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesOperationSpec);\n    }\n    /**\n     * The Get Page Ranges Diff operation returns the list of valid page ranges for a page blob that were\n     * changed between target blob and previous snapshot.\n     * @param options The options parameters.\n     */\n    getPageRangesDiff(options) {\n        return this.client.sendOperationRequest({ options }, getPageRangesDiffOperationSpec);\n    }\n    /**\n     * Resize the Blob\n     * @param blobContentLength This header specifies the maximum size for the page blob, up to 1 TB. The\n     *                          page blob size must be aligned to a 512-byte boundary.\n     * @param options The options parameters.\n     */\n    resize(blobContentLength, options) {\n        return this.client.sendOperationRequest({ blobContentLength, options }, resizeOperationSpec);\n    }\n    /**\n     * Update the sequence number of the blob\n     * @param sequenceNumberAction Required if the x-ms-blob-sequence-number header is set for the request.\n     *                             This property applies to page blobs only. This property indicates how the service should modify the\n     *                             blob's sequence number\n     * @param options The options parameters.\n     */\n    updateSequenceNumber(sequenceNumberAction, options) {\n        return this.client.sendOperationRequest({ sequenceNumberAction, options }, updateSequenceNumberOperationSpec);\n    }\n    /**\n     * The Copy Incremental operation copies a snapshot of the source page blob to a destination page blob.\n     * The snapshot is copied such that only the differential changes between the previously copied\n     * snapshot are transferred to the destination. The copied snapshots are complete copies of the\n     * original snapshot and can be read or copied from as usual. This API is supported since REST version\n     * 2016-05-31.\n     * @param copySource Specifies the name of the source page blob snapshot. This value is a URL of up to\n     *                   2 KB in length that specifies a page blob snapshot. The value should be URL-encoded as it would\n     *                   appear in a request URI. The source blob must either be public or must be authenticated via a shared\n     *                   access signature.\n     * @param options The options parameters.\n     */\n    copyIncremental(copySource, options) {\n        return this.client.sendOperationRequest({ copySource, options }, copyIncrementalOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst createOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCreateHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCreateExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.metadata,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobCacheControl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentEncoding,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLanguage,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentDisposition,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyExpiry,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.immutabilityPolicyMode,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.tier,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobTagsString,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.legalHold1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobSequenceNumber,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body1,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.transactionalContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"binary\",\n    serializer: xmlSerializer,\n};\nconst clearPagesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobClearPagesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobClearPagesExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst uploadPagesFromURLOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        201: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesFromURLHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUploadPagesFromURLExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp19],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceIfNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentMD5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySourceAuthorization,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.pageWrite,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThanOrEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberLessThan,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifSequenceNumberEqualTo,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceUrl,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceRange,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sourceContentCrc64,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp20,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getPageRangesDiffOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageList,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesDiffHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobGetPageRangesDiffExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.snapshot,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp20,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prevsnapshot,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.range,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prevSnapshotUrl,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst resizeOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobResizeHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobResizeExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKey,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionKeySha256,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionAlgorithm,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.encryptionScope,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobContentLength,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst updateSequenceNumberOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUpdateSequenceNumberHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobUpdateSequenceNumberExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.leaseId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobSequenceNumber,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.sequenceNumberAction,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst copyIncrementalOperationSpec = {\n    path: \"/{containerName}/{blob}\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCopyIncrementalHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.PageBlobCopyIncrementalExceptionHeaders,\n        },\n    },\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp21],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifModifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifUnmodifiedSince,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifNoneMatch,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.ifTags,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.copySource,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=pageBlob.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceImpl: () => (/* binding */ ServiceImpl)\n/* harmony export */ });\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _models_mappers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/mappers */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/mappers.js\");\n/* harmony import */ var _models_parameters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/parameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/models/parameters.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\n\n/** Class containing Service operations. */\nclass ServiceImpl {\n    /**\n     * Initialize a new instance of the class Service class.\n     * @param client Reference to the service client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sets properties for a storage account's Blob service endpoint, including properties for Storage\n     * Analytics and CORS (Cross-Origin Resource Sharing) rules\n     * @param blobServiceProperties The StorageService properties.\n     * @param options The options parameters.\n     */\n    setProperties(blobServiceProperties, options) {\n        return this.client.sendOperationRequest({ blobServiceProperties, options }, setPropertiesOperationSpec);\n    }\n    /**\n     * gets the properties of a storage account's Blob service, including properties for Storage Analytics\n     * and CORS (Cross-Origin Resource Sharing) rules.\n     * @param options The options parameters.\n     */\n    getProperties(options) {\n        return this.client.sendOperationRequest({ options }, getPropertiesOperationSpec);\n    }\n    /**\n     * Retrieves statistics related to replication for the Blob service. It is only available on the\n     * secondary location endpoint when read-access geo-redundant replication is enabled for the storage\n     * account.\n     * @param options The options parameters.\n     */\n    getStatistics(options) {\n        return this.client.sendOperationRequest({ options }, getStatisticsOperationSpec);\n    }\n    /**\n     * The List Containers Segment operation returns a list of the containers under the specified account\n     * @param options The options parameters.\n     */\n    listContainersSegment(options) {\n        return this.client.sendOperationRequest({ options }, listContainersSegmentOperationSpec);\n    }\n    /**\n     * Retrieves a user delegation key for the Blob service. This is only a valid operation when using\n     * bearer token authentication.\n     * @param keyInfo Key information\n     * @param options The options parameters.\n     */\n    getUserDelegationKey(keyInfo, options) {\n        return this.client.sendOperationRequest({ keyInfo, options }, getUserDelegationKeyOperationSpec);\n    }\n    /**\n     * Returns the sku name and account kind\n     * @param options The options parameters.\n     */\n    getAccountInfo(options) {\n        return this.client.sendOperationRequest({ options }, getAccountInfoOperationSpec);\n    }\n    /**\n     * The Batch operation allows multiple API calls to be embedded into a single HTTP request.\n     * @param contentLength The length of the request.\n     * @param multipartContentType Required. The value of this header must be multipart/mixed with a batch\n     *                             boundary. Example header value: multipart/mixed; boundary=batch_<GUID>\n     * @param body Initial data\n     * @param options The options parameters.\n     */\n    submitBatch(contentLength, multipartContentType, body, options) {\n        return this.client.sendOperationRequest({ contentLength, multipartContentType, body, options }, submitBatchOperationSpec);\n    }\n    /**\n     * The Filter Blobs operation enables callers to list blobs across all containers whose tags match a\n     * given search expression.  Filter blobs searches across all containers within a storage account but\n     * can be scoped within the expression to a single container.\n     * @param options The options parameters.\n     */\n    filterBlobs(options) {\n        return this.client.sendOperationRequest({ options }, filterBlobsOperationSpec);\n    }\n}\n// Operation Specifications\nconst xmlSerializer = _azure_core_client__WEBPACK_IMPORTED_MODULE_0__.createSerializer(_models_mappers__WEBPACK_IMPORTED_MODULE_1__, /* isXml */ true);\nconst setPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"PUT\",\n    responses: {\n        202: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSetPropertiesExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.blobServiceProperties,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getPropertiesOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobServiceProperties,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetPropertiesHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetPropertiesExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getStatisticsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.BlobServiceStatistics,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetStatisticsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetStatisticsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst listContainersSegmentOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ListContainersSegmentResponse,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceListContainersSegmentHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceListContainersSegmentExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp2,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.prefix,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.include,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst getUserDelegationKeyOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.UserDelegationKey,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetUserDelegationKeyHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetUserDelegationKeyExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.keyInfo,\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp3,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentType,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst getAccountInfoOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetAccountInfoHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceGetAccountInfoExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.restype1,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\nconst submitBatchOperationSpec = {\n    path: \"/\",\n    httpMethod: \"POST\",\n    responses: {\n        202: {\n            bodyMapper: {\n                type: { name: \"Stream\" },\n                serializedName: \"parsedResponse\",\n            },\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSubmitBatchHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceSubmitBatchExceptionHeaders,\n        },\n    },\n    requestBody: _models_parameters__WEBPACK_IMPORTED_MODULE_2__.body,\n    queryParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds, _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp4],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.contentLength,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.multipartContentType,\n    ],\n    isXML: true,\n    contentType: \"application/xml; charset=utf-8\",\n    mediaType: \"xml\",\n    serializer: xmlSerializer,\n};\nconst filterBlobsOperationSpec = {\n    path: \"/\",\n    httpMethod: \"GET\",\n    responses: {\n        200: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.FilterBlobSegment,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceFilterBlobsHeaders,\n        },\n        default: {\n            bodyMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.StorageError,\n            headersMapper: _models_mappers__WEBPACK_IMPORTED_MODULE_1__.ServiceFilterBlobsExceptionHeaders,\n        },\n    },\n    queryParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.timeoutInSeconds,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.marker,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.maxPageSize,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.comp5,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.where,\n    ],\n    urlParameters: [_models_parameters__WEBPACK_IMPORTED_MODULE_2__.url],\n    headerParameters: [\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.version,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.requestId,\n        _models_parameters__WEBPACK_IMPORTED_MODULE_2__.accept1,\n    ],\n    isXML: true,\n    serializer: xmlSerializer,\n};\n//# sourceMappingURL=service.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-http-compat */ \"./node_modules/@azure/core-http-compat/dist/browser/index.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operations */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/service.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./operations */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/container.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operations */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operations */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/pageBlob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./operations */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/appendBlob.js\");\n/* harmony import */ var _operations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./operations */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/operations/blockBlob.js\");\n/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nclass StorageClient extends _azure_core_http_compat__WEBPACK_IMPORTED_MODULE_0__.ExtendedServiceClient {\n    /**\n     * Initializes a new instance of the StorageClient class.\n     * @param url The URL of the service account, container, or blob that is the target of the desired\n     *            operation.\n     * @param options The parameter options\n     */\n    constructor(url, options) {\n        var _a, _b;\n        if (url === undefined) {\n            throw new Error(\"'url' cannot be null\");\n        }\n        // Initializing default values for options\n        if (!options) {\n            options = {};\n        }\n        const defaults = {\n            requestContentType: \"application/json; charset=utf-8\",\n        };\n        const packageDetails = `azsdk-js-azure-storage-blob/12.26.0`;\n        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n            : `${packageDetails}`;\n        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {\n                userAgentPrefix,\n            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : \"{url}\" });\n        super(optionsWithDefaults);\n        // Parameter assignments\n        this.url = url;\n        // Assigning values to Constant parameters\n        this.version = options.version || \"2025-01-05\";\n        this.service = new _operations__WEBPACK_IMPORTED_MODULE_1__.ServiceImpl(this);\n        this.container = new _operations__WEBPACK_IMPORTED_MODULE_2__.ContainerImpl(this);\n        this.blob = new _operations__WEBPACK_IMPORTED_MODULE_3__.BlobImpl(this);\n        this.pageBlob = new _operations__WEBPACK_IMPORTED_MODULE_4__.PageBlobImpl(this);\n        this.appendBlob = new _operations__WEBPACK_IMPORTED_MODULE_5__.AppendBlobImpl(this);\n        this.blockBlob = new _operations__WEBPACK_IMPORTED_MODULE_6__.BlockBlobImpl(this);\n    }\n}\n//# sourceMappingURL=storageClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/generated/src/storageClient.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"./node_modules/@azure/logger/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The `@azure/logger` configuration for this package.\n */\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"storage-blob\");\n//# sourceMappingURL=log.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockBlobTier: () => (/* binding */ BlockBlobTier),\n/* harmony export */   PremiumPageBlobTier: () => (/* binding */ PremiumPageBlobTier),\n/* harmony export */   StorageBlobAudience: () => (/* binding */ StorageBlobAudience),\n/* harmony export */   ensureCpkIfSpecified: () => (/* binding */ ensureCpkIfSpecified),\n/* harmony export */   getBlobServiceAccountAudience: () => (/* binding */ getBlobServiceAccountAudience),\n/* harmony export */   toAccessTier: () => (/* binding */ toAccessTier)\n/* harmony export */ });\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Represents the access tier on a blob.\n * For detailed information about block blob level tiering see {@link https://docs.microsoft.com/azure/storage/blobs/storage-blob-storage-tiers|Hot, cool and archive storage tiers.}\n */\nvar BlockBlobTier;\n(function (BlockBlobTier) {\n    /**\n     * Optimized for storing data that is accessed frequently.\n     */\n    BlockBlobTier[\"Hot\"] = \"Hot\";\n    /**\n     * Optimized for storing data that is infrequently accessed and stored for at least 30 days.\n     */\n    BlockBlobTier[\"Cool\"] = \"Cool\";\n    /**\n     * Optimized for storing data that is rarely accessed.\n     */\n    BlockBlobTier[\"Cold\"] = \"Cold\";\n    /**\n     * Optimized for storing data that is rarely accessed and stored for at least 180 days\n     * with flexible latency requirements (on the order of hours).\n     */\n    BlockBlobTier[\"Archive\"] = \"Archive\";\n})(BlockBlobTier || (BlockBlobTier = {}));\n/**\n * Specifies the page blob tier to set the blob to. This is only applicable to page blobs on premium storage accounts.\n * Please see {@link https://docs.microsoft.com/azure/storage/storage-premium-storage#scalability-and-performance-targets|here}\n * for detailed information on the corresponding IOPS and throughput per PageBlobTier.\n */\nvar PremiumPageBlobTier;\n(function (PremiumPageBlobTier) {\n    /**\n     * P4 Tier.\n     */\n    PremiumPageBlobTier[\"P4\"] = \"P4\";\n    /**\n     * P6 Tier.\n     */\n    PremiumPageBlobTier[\"P6\"] = \"P6\";\n    /**\n     * P10 Tier.\n     */\n    PremiumPageBlobTier[\"P10\"] = \"P10\";\n    /**\n     * P15 Tier.\n     */\n    PremiumPageBlobTier[\"P15\"] = \"P15\";\n    /**\n     * P20 Tier.\n     */\n    PremiumPageBlobTier[\"P20\"] = \"P20\";\n    /**\n     * P30 Tier.\n     */\n    PremiumPageBlobTier[\"P30\"] = \"P30\";\n    /**\n     * P40 Tier.\n     */\n    PremiumPageBlobTier[\"P40\"] = \"P40\";\n    /**\n     * P50 Tier.\n     */\n    PremiumPageBlobTier[\"P50\"] = \"P50\";\n    /**\n     * P60 Tier.\n     */\n    PremiumPageBlobTier[\"P60\"] = \"P60\";\n    /**\n     * P70 Tier.\n     */\n    PremiumPageBlobTier[\"P70\"] = \"P70\";\n    /**\n     * P80 Tier.\n     */\n    PremiumPageBlobTier[\"P80\"] = \"P80\";\n})(PremiumPageBlobTier || (PremiumPageBlobTier = {}));\nfunction toAccessTier(tier) {\n    if (tier === undefined) {\n        return undefined;\n    }\n    return tier; // No more check if string is a valid AccessTier, and left this to underlay logic to decide(service).\n}\nfunction ensureCpkIfSpecified(cpk, isHttps) {\n    if (cpk && !isHttps) {\n        throw new RangeError(\"Customer-provided encryption key must be used over HTTPS.\");\n    }\n    if (cpk && !cpk.encryptionAlgorithm) {\n        cpk.encryptionAlgorithm = _utils_constants__WEBPACK_IMPORTED_MODULE_0__.EncryptionAlgorithmAES25;\n    }\n}\n/**\n * Defines the known cloud audiences for Storage.\n */\nvar StorageBlobAudience;\n(function (StorageBlobAudience) {\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Storage.\n     */\n    StorageBlobAudience[\"StorageOAuthScopes\"] = \"https://storage.azure.com/.default\";\n    /**\n     * The OAuth scope to use to retrieve an AAD token for Azure Disk.\n     */\n    StorageBlobAudience[\"DiskComputeOAuthScopes\"] = \"https://disk.compute.azure.com/.default\";\n})(StorageBlobAudience || (StorageBlobAudience = {}));\n/**\n *\n * To get OAuth audience for a storage account for blob service.\n */\nfunction getBlobServiceAccountAudience(storageAccountName) {\n    return `https://${storageAccountName}.blob.core.windows.net/.default`;\n}\n//# sourceMappingURL=models.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/models.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnonymousCredentialPolicy: () => (/* binding */ AnonymousCredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CredentialPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nclass AnonymousCredentialPolicy extends _CredentialPolicy__WEBPACK_IMPORTED_MODULE_0__.CredentialPolicy {\n    /**\n     * Creates an instance of AnonymousCredentialPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n}\n//# sourceMappingURL=AnonymousCredentialPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/AnonymousCredentialPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CredentialPolicy: () => (/* binding */ CredentialPolicy)\n/* harmony export */ });\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RequestPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nclass CredentialPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_0__.BaseRequestPolicy {\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    sendRequest(request) {\n        return this._nextPolicy.sendRequest(this.signRequest(request));\n    }\n    /**\n     * Child classes must implement this method with request signing. This method\n     * will be executed in {@link sendRequest}.\n     *\n     * @param request -\n     */\n    signRequest(request) {\n        // Child classes must override this method with request signing. This method\n        // will be executed in sendRequest().\n        return request;\n    }\n}\n//# sourceMappingURL=CredentialPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/CredentialPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseRequestPolicy: () => (/* binding */ BaseRequestPolicy)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The base class from which all request policies derive.\n */\nclass BaseRequestPolicy {\n    /**\n     * The main method to implement that manipulates a request/response.\n     */\n    constructor(\n    /**\n     * The next policy in the pipeline. Each policy is responsible for executing the next one if the request is to continue through the pipeline.\n     */\n    _nextPolicy, \n    /**\n     * The options that can be passed to a given request policy.\n     */\n    _options) {\n        this._nextPolicy = _nextPolicy;\n        this._options = _options;\n    }\n    /**\n     * Get whether or not a log with the provided log level should be logged.\n     * @param logLevel - The log level of the log that will be logged.\n     * @returns Whether or not a log with the provided log level should be logged.\n     */\n    shouldLog(logLevel) {\n        return this._options.shouldLog(logLevel);\n    }\n    /**\n     * Attempt to log the provided message to the provided logger. If no logger was provided or if\n     * the log level does not meat the logger's threshold, then nothing will be logged.\n     * @param logLevel - The log level of this log.\n     * @param message - The message of this log.\n     */\n    log(logLevel, message) {\n        this._options.log(logLevel, message);\n    }\n}\n//# sourceMappingURL=RequestPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageBrowserPolicy: () => (/* binding */ StorageBrowserPolicy)\n/* harmony export */ });\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RequestPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nclass StorageBrowserPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__.BaseRequestPolicy {\n    /**\n     * Creates an instance of StorageBrowserPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n            return this._nextPolicy.sendRequest(request);\n        }\n        if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n            request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n        }\n        request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_3__.HeaderConstants.COOKIE);\n        // According to XHR standards, content-length should be fully controlled by browsers\n        request.headers.remove(_utils_constants__WEBPACK_IMPORTED_MODULE_3__.HeaderConstants.CONTENT_LENGTH);\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageBrowserPolicy: () => (/* binding */ storageBrowserPolicy),\n/* harmony export */   storageBrowserPolicyName: () => (/* binding */ storageBrowserPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the StorageBrowserPolicy.\n */\nconst storageBrowserPolicyName = \"storageBrowserPolicy\";\n/**\n * storageBrowserPolicy is a policy used to prevent browsers from caching requests\n * and to remove cookies and explicit content-length headers.\n */\nfunction storageBrowserPolicy() {\n    return {\n        name: storageBrowserPolicyName,\n        async sendRequest(request, next) {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNode) {\n                return next(request);\n            }\n            if (request.method === \"GET\" || request.method === \"HEAD\") {\n                request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_1__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n            }\n            request.headers.delete(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.COOKIE);\n            // According to XHR standards, content-length should be fully controlled by browsers\n            request.headers.delete(_utils_constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.CONTENT_LENGTH);\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageBrowserPolicyV2.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageBrowserPolicyV2.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageCorrectContentLengthPolicy: () => (/* binding */ storageCorrectContentLengthPolicy),\n/* harmony export */   storageCorrectContentLengthPolicyName: () => (/* binding */ storageCorrectContentLengthPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the storageCorrectContentLengthPolicy.\n */\nconst storageCorrectContentLengthPolicyName = \"StorageCorrectContentLengthPolicy\";\n/**\n * storageCorrectContentLengthPolicy to correctly set Content-Length header with request body length.\n */\nfunction storageCorrectContentLengthPolicy() {\n    return {\n        name: storageCorrectContentLengthPolicyName,\n        async sendRequest(request, next) {\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageCorrectContentLengthPolicy.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageCorrectContentLengthPolicy.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NewRetryPolicyFactory: () => (/* binding */ NewRetryPolicyFactory),\n/* harmony export */   StorageRetryPolicy: () => (/* binding */ StorageRetryPolicy),\n/* harmony export */   StorageRetryPolicyType: () => (/* binding */ StorageRetryPolicyType)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"./node_modules/@azure/abort-controller/dist/browser/index.js\");\n/* harmony import */ var _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RequestPolicy */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/RequestPolicy.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../log */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nfunction NewRetryPolicyFactory(retryOptions) {\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n        },\n    };\n}\n/**\n * RetryPolicy types.\n */\nvar StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nclass StorageRetryPolicy extends _RequestPolicy__WEBPACK_IMPORTED_MODULE_1__.BaseRequestPolicy {\n    /**\n     * Creates an instance of RetryPolicy.\n     *\n     * @param nextPolicy -\n     * @param options -\n     * @param retryOptions -\n     */\n    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n        super(nextPolicy, options);\n        // Initialize retry options\n        this.retryOptions = {\n            retryPolicyType: retryOptions.retryPolicyType\n                ? retryOptions.retryPolicyType\n                : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1\n                ? Math.floor(retryOptions.maxTries)\n                : DEFAULT_RETRY_OPTIONS.maxTries,\n            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n                ? retryOptions.tryTimeoutInMs\n                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs\n                    ? retryOptions.maxRetryDelayInMs\n                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)\n                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n            secondaryHost: retryOptions.secondaryHost\n                ? retryOptions.secondaryHost\n                : DEFAULT_RETRY_OPTIONS.secondaryHost,\n        };\n    }\n    /**\n     * Sends request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        return this.attemptSendRequest(request, false, 1);\n    }\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n    async attemptSendRequest(request, secondaryHas404, attempt) {\n        const newRequest = request.clone();\n        const isPrimaryRetry = secondaryHas404 ||\n            !this.retryOptions.secondaryHost ||\n            !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n            attempt % 2 === 1;\n        if (!isPrimaryRetry) {\n            newRequest.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLHost)(newRequest.url, this.retryOptions.secondaryHost);\n        }\n        // Set the server-side timeout query parameter \"timeout=[seconds]\"\n        if (this.retryOptions.tryTimeoutInMs) {\n            newRequest.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.setURLParameter)(newRequest.url, _utils_constants__WEBPACK_IMPORTED_MODULE_3__.URLConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n        }\n        let response;\n        try {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n            response = await this._nextPolicy.sendRequest(newRequest);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                return response;\n            }\n            secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n        }\n        catch (err) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n                throw err;\n            }\n        }\n        await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n        return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n    }\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n    shouldRetry(isPrimaryRetry, attempt, response, err) {\n        if (attempt >= this.retryOptions.maxTries) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n                .maxTries}, no further try.`);\n            return false;\n        }\n        // Handle network failures, you may need to customize the list when you implement\n        // your own http client\n        const retriableErrors = [\n            \"ETIMEDOUT\",\n            \"ESOCKETTIMEDOUT\",\n            \"ECONNREFUSED\",\n            \"ECONNRESET\",\n            \"ENOENT\",\n            \"ENOTFOUND\",\n            \"TIMEOUT\",\n            \"EPIPE\",\n            \"REQUEST_SEND_ERROR\", // For default xhr based http client provided in ms-rest-js\n        ];\n        if (err) {\n            for (const retriableError of retriableErrors) {\n                if (err.name.toUpperCase().includes(retriableError) ||\n                    err.message.toUpperCase().includes(retriableError) ||\n                    (err.code && err.code.toString().toUpperCase() === retriableError)) {\n                    _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || err) {\n            const statusCode = response ? response.status : err ? err.statusCode : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n            _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n    async delay(isPrimaryRetry, attempt, abortSignal) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (this.retryOptions.retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = this.retryOptions.retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        _log__WEBPACK_IMPORTED_MODULE_4__.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_2__.delay)(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageRetryPolicyType: () => (/* binding */ StorageRetryPolicyType),\n/* harmony export */   storageRetryPolicy: () => (/* binding */ storageRetryPolicy),\n/* harmony export */   storageRetryPolicyName: () => (/* binding */ storageRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"./node_modules/@azure/abort-controller/dist/browser/index.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n/**\n * Name of the {@link storageRetryPolicy}\n */\nconst storageRetryPolicyName = \"storageRetryPolicy\";\n/**\n * RetryPolicy types.\n */\nvar StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined, // Use server side default timeout strategy\n};\nconst retriableErrors = [\n    \"ETIMEDOUT\",\n    \"ESOCKETTIMEDOUT\",\n    \"ECONNREFUSED\",\n    \"ECONNRESET\",\n    \"ENOENT\",\n    \"ENOTFOUND\",\n    \"TIMEOUT\",\n    \"EPIPE\",\n    \"REQUEST_SEND_ERROR\",\n];\nconst RETRY_ABORT_ERROR = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nfunction storageRetryPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    const retryPolicyType = (_a = options.retryPolicyType) !== null && _a !== void 0 ? _a : DEFAULT_RETRY_OPTIONS.retryPolicyType;\n    const maxTries = (_b = options.maxTries) !== null && _b !== void 0 ? _b : DEFAULT_RETRY_OPTIONS.maxTries;\n    const retryDelayInMs = (_c = options.retryDelayInMs) !== null && _c !== void 0 ? _c : DEFAULT_RETRY_OPTIONS.retryDelayInMs;\n    const maxRetryDelayInMs = (_d = options.maxRetryDelayInMs) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs;\n    const secondaryHost = (_e = options.secondaryHost) !== null && _e !== void 0 ? _e : DEFAULT_RETRY_OPTIONS.secondaryHost;\n    const tryTimeoutInMs = (_f = options.tryTimeoutInMs) !== null && _f !== void 0 ? _f : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs;\n    function shouldRetry({ isPrimaryRetry, attempt, response, error, }) {\n        var _a, _b;\n        if (attempt >= maxTries) {\n            _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${maxTries}, no further try.`);\n            return false;\n        }\n        if (error) {\n            for (const retriableError of retriableErrors) {\n                if (error.name.toUpperCase().includes(retriableError) ||\n                    error.message.toUpperCase().includes(retriableError) ||\n                    (error.code && error.code.toString().toUpperCase() === retriableError)) {\n                    _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n            if ((error === null || error === void 0 ? void 0 : error.code) === \"PARSE_ERROR\" &&\n                (error === null || error === void 0 ? void 0 : error.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n                return true;\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || error) {\n            const statusCode = (_b = (_a = response === null || response === void 0 ? void 0 : response.status) !== null && _a !== void 0 ? _a : error === null || error === void 0 ? void 0 : error.statusCode) !== null && _b !== void 0 ? _b : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        // [Copy source error code] Feature is pending on service side, skip retry on copy source error for now.\n        // if (response) {\n        //   // Retry select Copy Source Error Codes.\n        //   if (response?.status >= 400) {\n        //     const copySourceError = response.headers.get(HeaderConstants.X_MS_CopySourceErrorCode);\n        //     if (copySourceError !== undefined) {\n        //       switch (copySourceError) {\n        //         case \"InternalError\":\n        //         case \"OperationTimedOut\":\n        //         case \"ServerBusy\":\n        //           return true;\n        //       }\n        //     }\n        //   }\n        // }\n        return false;\n    }\n    function calculateDelay(isPrimaryRetry, attempt) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * retryDelayInMs, maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delayTimeInMs;\n    }\n    return {\n        name: storageRetryPolicyName,\n        async sendRequest(request, next) {\n            // Set the server-side timeout query parameter \"timeout=[seconds]\"\n            if (tryTimeoutInMs) {\n                request.url = (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.setURLParameter)(request.url, _utils_constants__WEBPACK_IMPORTED_MODULE_5__.URLConstants.Parameters.TIMEOUT, String(Math.floor(tryTimeoutInMs / 1000)));\n            }\n            const primaryUrl = request.url;\n            const secondaryUrl = secondaryHost ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.setURLHost)(request.url, secondaryHost) : undefined;\n            let secondaryHas404 = false;\n            let attempt = 1;\n            let retryAgain = true;\n            let response;\n            let error;\n            while (retryAgain) {\n                const isPrimaryRetry = secondaryHas404 ||\n                    !secondaryUrl ||\n                    ![\"GET\", \"HEAD\", \"OPTIONS\"].includes(request.method) ||\n                    attempt % 2 === 1;\n                request.url = isPrimaryRetry ? primaryUrl : secondaryUrl;\n                response = undefined;\n                error = undefined;\n                try {\n                    _log__WEBPACK_IMPORTED_MODULE_3__.logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n                    response = await next(request);\n                    secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n                }\n                catch (e) {\n                    if ((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.isRestError)(e)) {\n                        _log__WEBPACK_IMPORTED_MODULE_3__.logger.error(`RetryPolicy: Caught error, message: ${e.message}, code: ${e.code}`);\n                        error = e;\n                    }\n                    else {\n                        _log__WEBPACK_IMPORTED_MODULE_3__.logger.error(`RetryPolicy: Caught error, message: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_2__.getErrorMessage)(e)}`);\n                        throw e;\n                    }\n                }\n                retryAgain = shouldRetry({ isPrimaryRetry, attempt, response, error });\n                if (retryAgain) {\n                    await (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.delay)(calculateDelay(isPrimaryRetry, attempt), request.abortSignal, RETRY_ABORT_ERROR);\n                }\n                attempt++;\n            }\n            if (response) {\n                return response;\n            }\n            throw error !== null && error !== void 0 ? error : new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(\"RetryPolicy failed without known error.\");\n        },\n    };\n}\n//# sourceMappingURL=StorageRetryPolicyV2.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageRetryPolicyV2.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storageSharedKeyCredentialPolicy: () => (/* binding */ storageSharedKeyCredentialPolicy),\n/* harmony export */   storageSharedKeyCredentialPolicyName: () => (/* binding */ storageSharedKeyCredentialPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the storageSharedKeyCredentialPolicy.\n */\nconst storageSharedKeyCredentialPolicyName = \"storageSharedKeyCredentialPolicy\";\n/**\n * storageSharedKeyCredentialPolicy handles signing requests using storage account keys.\n */\nfunction storageSharedKeyCredentialPolicy(_options) {\n    return {\n        name: storageSharedKeyCredentialPolicyName,\n        async sendRequest(request, next) {\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=StorageSharedKeyCredentialPolicyV2.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/policies/StorageSharedKeyCredentialPolicyV2.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobBeginCopyFromUrlPoller: () => (/* binding */ BlobBeginCopyFromUrlPoller)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _azure_core_lro__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-lro */ \"./node_modules/@azure/core-lro/dist-esm/src/legacy/poller.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * This is the poller returned by {@link BlobClient.beginCopyFromURL}.\n * This can not be instantiated directly outside of this package.\n *\n * @hidden\n */\nclass BlobBeginCopyFromUrlPoller extends _azure_core_lro__WEBPACK_IMPORTED_MODULE_1__.Poller {\n    constructor(options) {\n        const { blobClient, copySource, intervalInMs = 15000, onProgress, resumeFrom, startCopyFromURLOptions, } = options;\n        let state;\n        if (resumeFrom) {\n            state = JSON.parse(resumeFrom).state;\n        }\n        const operation = makeBlobBeginCopyFromURLPollOperation(Object.assign(Object.assign({}, state), { blobClient,\n            copySource,\n            startCopyFromURLOptions }));\n        super(operation);\n        if (typeof onProgress === \"function\") {\n            this.onProgress(onProgress);\n        }\n        this.intervalInMs = intervalInMs;\n    }\n    delay() {\n        return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.delay)(this.intervalInMs);\n    }\n}\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst cancel = async function cancel(options = {}) {\n    const state = this.state;\n    const { copyId } = state;\n    if (state.isCompleted) {\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    if (!copyId) {\n        state.isCancelled = true;\n        return makeBlobBeginCopyFromURLPollOperation(state);\n    }\n    // if abortCopyFromURL throws, it will bubble up to user's poller.cancelOperation call\n    await state.blobClient.abortCopyFromURL(copyId, {\n        abortSignal: options.abortSignal,\n    });\n    state.isCancelled = true;\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst update = async function update(options = {}) {\n    const state = this.state;\n    const { blobClient, copySource, startCopyFromURLOptions } = state;\n    if (!state.isStarted) {\n        state.isStarted = true;\n        const result = await blobClient.startCopyFromURL(copySource, startCopyFromURLOptions);\n        // copyId is needed to abort\n        state.copyId = result.copyId;\n        if (result.copyStatus === \"success\") {\n            state.result = result;\n            state.isCompleted = true;\n        }\n    }\n    else if (!state.isCompleted) {\n        try {\n            const result = await state.blobClient.getProperties({ abortSignal: options.abortSignal });\n            const { copyStatus, copyProgress } = result;\n            const prevCopyProgress = state.copyProgress;\n            if (copyProgress) {\n                state.copyProgress = copyProgress;\n            }\n            if (copyStatus === \"pending\" &&\n                copyProgress !== prevCopyProgress &&\n                typeof options.fireProgress === \"function\") {\n                // trigger in setTimeout, or swallow error?\n                options.fireProgress(state);\n            }\n            else if (copyStatus === \"success\") {\n                state.result = result;\n                state.isCompleted = true;\n            }\n            else if (copyStatus === \"failed\") {\n                state.error = new Error(`Blob copy failed with reason: \"${result.copyStatusDescription || \"unknown\"}\"`);\n                state.isCompleted = true;\n            }\n        }\n        catch (err) {\n            state.error = err;\n            state.isCompleted = true;\n        }\n    }\n    return makeBlobBeginCopyFromURLPollOperation(state);\n};\n/**\n * Note: Intentionally using function expression over arrow function expression\n * so that the function can be invoked with a different context.\n * This affects what `this` refers to.\n * @hidden\n */\nconst toString = function toString() {\n    return JSON.stringify({ state: this.state }, (key, value) => {\n        // remove blobClient from serialized state since a client can't be hydrated from this info.\n        if (key === \"blobClient\") {\n            return undefined;\n        }\n        return value;\n    });\n};\n/**\n * Creates a poll operation given the provided state.\n * @hidden\n */\nfunction makeBlobBeginCopyFromURLPollOperation(state) {\n    return {\n        state: Object.assign({}, state),\n        cancel,\n        toString,\n        update,\n    };\n}\n//# sourceMappingURL=BlobStartCopyFromUrlPoller.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/pollers/BlobStartCopyFromUrlPoller.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASPermissions: () => (/* binding */ AccountSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass AccountSASPermissions {\n    constructor() {\n        /**\n         * Permission to read resources and list queues and tables granted.\n         */\n        this.read = false;\n        /**\n         * Permission to write resources granted.\n         */\n        this.write = false;\n        /**\n         * Permission to delete blobs and files granted.\n         */\n        this.delete = false;\n        /**\n         * Permission to delete versions granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Permission to list blob containers, blobs, shares, directories, and files granted.\n         */\n        this.list = false;\n        /**\n         * Permission to add messages, table entities, and append to blobs granted.\n         */\n        this.add = false;\n        /**\n         * Permission to create blobs and files granted.\n         */\n        this.create = false;\n        /**\n         * Permissions to update messages and table entities granted.\n         */\n        this.update = false;\n        /**\n         * Permission to get and delete messages granted.\n         */\n        this.process = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Permission to filter blobs.\n         */\n        this.filter = false;\n        /**\n         * Permission to set immutability policy.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Parse initializes the AccountSASPermissions fields from a string.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const accountSASPermissions = new AccountSASPermissions();\n        for (const c of permissions) {\n            switch (c) {\n                case \"r\":\n                    accountSASPermissions.read = true;\n                    break;\n                case \"w\":\n                    accountSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    accountSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    accountSASPermissions.deleteVersion = true;\n                    break;\n                case \"l\":\n                    accountSASPermissions.list = true;\n                    break;\n                case \"a\":\n                    accountSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    accountSASPermissions.create = true;\n                    break;\n                case \"u\":\n                    accountSASPermissions.update = true;\n                    break;\n                case \"p\":\n                    accountSASPermissions.process = true;\n                    break;\n                case \"t\":\n                    accountSASPermissions.tag = true;\n                    break;\n                case \"f\":\n                    accountSASPermissions.filter = true;\n                    break;\n                case \"i\":\n                    accountSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    accountSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission character: ${c}`);\n            }\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Creates a {@link AccountSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const accountSASPermissions = new AccountSASPermissions();\n        if (permissionLike.read) {\n            accountSASPermissions.read = true;\n        }\n        if (permissionLike.write) {\n            accountSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            accountSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            accountSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.filter) {\n            accountSASPermissions.filter = true;\n        }\n        if (permissionLike.tag) {\n            accountSASPermissions.tag = true;\n        }\n        if (permissionLike.list) {\n            accountSASPermissions.list = true;\n        }\n        if (permissionLike.add) {\n            accountSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            accountSASPermissions.create = true;\n        }\n        if (permissionLike.update) {\n            accountSASPermissions.update = true;\n        }\n        if (permissionLike.process) {\n            accountSASPermissions.process = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            accountSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            accountSASPermissions.permanentDelete = true;\n        }\n        return accountSASPermissions;\n    }\n    /**\n     * Produces the SAS permissions string for an Azure Storage account.\n     * Call this method to set AccountSASSignatureValues Permissions field.\n     *\n     * Using this method will guarantee the resource types are in\n     * an order accepted by the service.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        // The order of the characters should be as specified here to ensure correctness:\n        // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n        // Use a string array instead of string concatenating += operator for performance\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.filter) {\n            permissions.push(\"f\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.update) {\n            permissions.push(\"u\");\n        }\n        if (this.process) {\n            permissions.push(\"p\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASPermissions.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASResourceTypes: () => (/* binding */ AccountSASResourceTypes)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nclass AccountSASResourceTypes {\n    constructor() {\n        /**\n         * Permission to access service level APIs granted.\n         */\n        this.service = false;\n        /**\n         * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares) granted.\n         */\n        this.container = false;\n        /**\n         * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files) granted.\n         */\n        this.object = false;\n    }\n    /**\n     * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid resource type.\n     *\n     * @param resourceTypes -\n     */\n    static parse(resourceTypes) {\n        const accountSASResourceTypes = new AccountSASResourceTypes();\n        for (const c of resourceTypes) {\n            switch (c) {\n                case \"s\":\n                    accountSASResourceTypes.service = true;\n                    break;\n                case \"c\":\n                    accountSASResourceTypes.container = true;\n                    break;\n                case \"o\":\n                    accountSASResourceTypes.object = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid resource type: ${c}`);\n            }\n        }\n        return accountSASResourceTypes;\n    }\n    /**\n     * Converts the given resource types to a string.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n     *\n     */\n    toString() {\n        const resourceTypes = [];\n        if (this.service) {\n            resourceTypes.push(\"s\");\n        }\n        if (this.container) {\n            resourceTypes.push(\"c\");\n        }\n        if (this.object) {\n            resourceTypes.push(\"o\");\n        }\n        return resourceTypes.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASResourceTypes.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccountSASServices: () => (/* binding */ AccountSASServices)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nclass AccountSASServices {\n    constructor() {\n        /**\n         * Permission to access blob resources granted.\n         */\n        this.blob = false;\n        /**\n         * Permission to access file resources granted.\n         */\n        this.file = false;\n        /**\n         * Permission to access queue resources granted.\n         */\n        this.queue = false;\n        /**\n         * Permission to access table resources granted.\n         */\n        this.table = false;\n    }\n    /**\n     * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid service.\n     *\n     * @param services -\n     */\n    static parse(services) {\n        const accountSASServices = new AccountSASServices();\n        for (const c of services) {\n            switch (c) {\n                case \"b\":\n                    accountSASServices.blob = true;\n                    break;\n                case \"f\":\n                    accountSASServices.file = true;\n                    break;\n                case \"q\":\n                    accountSASServices.queue = true;\n                    break;\n                case \"t\":\n                    accountSASServices.table = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid service character: ${c}`);\n            }\n        }\n        return accountSASServices;\n    }\n    /**\n     * Converts the given services to a string.\n     *\n     */\n    toString() {\n        const services = [];\n        if (this.blob) {\n            services.push(\"b\");\n        }\n        if (this.table) {\n            services.push(\"t\");\n        }\n        if (this.queue) {\n            services.push(\"q\");\n        }\n        if (this.file) {\n            services.push(\"f\");\n        }\n        return services.join(\"\");\n    }\n}\n//# sourceMappingURL=AccountSASServices.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAccountSASQueryParameters: () => (/* binding */ generateAccountSASQueryParameters),\n/* harmony export */   generateAccountSASQueryParametersInternal: () => (/* binding */ generateAccountSASQueryParametersInternal)\n/* harmony export */ });\n/* harmony import */ var _AccountSASPermissions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AccountSASPermissions */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASPermissions.js\");\n/* harmony import */ var _AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AccountSASResourceTypes */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASResourceTypes.js\");\n/* harmony import */ var _AccountSASServices__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AccountSASServices */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASServices.js\");\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SasIPRange */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _SASQueryParameters__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SASQueryParameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateAccountSASQueryParameters(accountSASSignatureValues, sharedKeyCredential) {\n    return generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential)\n        .sasQueryParameters;\n}\nfunction generateAccountSASQueryParametersInternal(accountSASSignatureValues, sharedKeyCredential) {\n    const version = accountSASSignatureValues.version\n        ? accountSASSignatureValues.version\n        : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'x' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when provided 'y' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 't' permission.\");\n    }\n    if (accountSASSignatureValues.permissions &&\n        accountSASSignatureValues.permissions.filter &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when provided 'f' permission.\");\n    }\n    if (accountSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    const parsedPermissions = _AccountSASPermissions__WEBPACK_IMPORTED_MODULE_1__.AccountSASPermissions.parse(accountSASSignatureValues.permissions.toString());\n    const parsedServices = _AccountSASServices__WEBPACK_IMPORTED_MODULE_2__.AccountSASServices.parse(accountSASSignatureValues.services).toString();\n    const parsedResourceTypes = _AccountSASResourceTypes__WEBPACK_IMPORTED_MODULE_3__.AccountSASResourceTypes.parse(accountSASSignatureValues.resourceTypes).toString();\n    let stringToSign;\n    if (version >= \"2020-12-06\") {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_5__.ipRangeToString)(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            accountSASSignatureValues.encryptionScope ? accountSASSignatureValues.encryptionScope : \"\",\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    else {\n        stringToSign = [\n            sharedKeyCredential.accountName,\n            parsedPermissions,\n            parsedServices,\n            parsedResourceTypes,\n            accountSASSignatureValues.startsOn\n                ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.startsOn, false)\n                : \"\",\n            (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_4__.truncatedISO8061Date)(accountSASSignatureValues.expiresOn, false),\n            accountSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_5__.ipRangeToString)(accountSASSignatureValues.ipRange) : \"\",\n            accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n            version,\n            \"\", // Account SAS requires an additional newline character\n        ].join(\"\\n\");\n    }\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_6__.SASQueryParameters(version, signature, parsedPermissions.toString(), parsedServices, parsedResourceTypes, accountSASSignatureValues.protocol, accountSASSignatureValues.startsOn, accountSASSignatureValues.expiresOn, accountSASSignatureValues.ipRange, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, accountSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\n//# sourceMappingURL=AccountSASSignatureValues.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/AccountSASSignatureValues.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobSASPermissions: () => (/* binding */ BlobSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a blob. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass BlobSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const blobSASPermissions = new BlobSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    blobSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    blobSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    blobSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    blobSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    blobSASPermissions.delete = true;\n                    break;\n                case \"x\":\n                    blobSASPermissions.deleteVersion = true;\n                    break;\n                case \"t\":\n                    blobSASPermissions.tag = true;\n                    break;\n                case \"m\":\n                    blobSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    blobSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    blobSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    blobSASPermissions.permanentDelete = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission: ${char}`);\n            }\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Creates a {@link BlobSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const blobSASPermissions = new BlobSASPermissions();\n        if (permissionLike.read) {\n            blobSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            blobSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            blobSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            blobSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            blobSASPermissions.delete = true;\n        }\n        if (permissionLike.deleteVersion) {\n            blobSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            blobSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            blobSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            blobSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            blobSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            blobSASPermissions.permanentDelete = true;\n        }\n        return blobSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * @returns A string which represents the BlobSASPermissions\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=BlobSASPermissions.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateBlobSASQueryParameters: () => (/* binding */ generateBlobSASQueryParameters),\n/* harmony export */   generateBlobSASQueryParametersInternal: () => (/* binding */ generateBlobSASQueryParametersInternal)\n/* harmony export */ });\n/* harmony import */ var _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobSASPermissions */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASPermissions.js\");\n/* harmony import */ var _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ContainerSASPermissions */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js\");\n/* harmony import */ var _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../credentials/StorageSharedKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/StorageSharedKeyCredential.browser.js\");\n/* harmony import */ var _credentials_UserDelegationKeyCredential__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../credentials/UserDelegationKeyCredential */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/credentials/UserDelegationKeyCredential.browser.js\");\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SasIPRange */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./SASQueryParameters */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js\");\n/* harmony import */ var _utils_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\nfunction generateBlobSASQueryParameters(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    return generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName).sasQueryParameters;\n}\nfunction generateBlobSASQueryParametersInternal(blobSASSignatureValues, sharedKeyCredentialOrUserDelegationKey, accountName) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    const sharedKeyCredential = sharedKeyCredentialOrUserDelegationKey instanceof _credentials_StorageSharedKeyCredential__WEBPACK_IMPORTED_MODULE_1__.StorageSharedKeyCredential\n        ? sharedKeyCredentialOrUserDelegationKey\n        : undefined;\n    let userDelegationKeyCredential;\n    if (sharedKeyCredential === undefined && accountName !== undefined) {\n        userDelegationKeyCredential = new _credentials_UserDelegationKeyCredential__WEBPACK_IMPORTED_MODULE_2__.UserDelegationKeyCredential(accountName, sharedKeyCredentialOrUserDelegationKey);\n    }\n    if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n        throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n    }\n    // Version 2020-12-06 adds support for encryptionscope in SAS.\n    if (version >= \"2020-12-06\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            return generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential);\n        }\n    }\n    // Version 2019-12-12 adds support for the blob tags permission.\n    // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n    if (version >= \"2018-11-09\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n            if (version >= \"2020-02-10\") {\n                return generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n            else {\n                return generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential);\n            }\n        }\n    }\n    if (version >= \"2015-04-05\") {\n        if (sharedKeyCredential !== undefined) {\n            return generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential);\n        }\n        else {\n            throw new RangeError(\"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\");\n        }\n    }\n    throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param blobSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20201206(blobSASSignatureValues, sharedKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    if (!blobSASSignatureValues.identifier &&\n        !(blobSASSignatureValues.permissions && blobSASSignatureValues.expiresOn)) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(sharedKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        blobSASSignatureValues.identifier,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl ? blobSASSignatureValues.cacheControl : \"\",\n        blobSASSignatureValues.contentDisposition ? blobSASSignatureValues.contentDisposition : \"\",\n        blobSASSignatureValues.contentEncoding ? blobSASSignatureValues.contentEncoding : \"\",\n        blobSASSignatureValues.contentLanguage ? blobSASSignatureValues.contentLanguage : \"\",\n        blobSASSignatureValues.contentType ? blobSASSignatureValues.contentType : \"\",\n    ].join(\"\\n\");\n    const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, undefined, undefined, undefined, blobSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId),\n        stringToSign: stringToSign,\n    };\n}\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-12-06.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param blobSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20201206(blobSASSignatureValues, userDelegationKeyCredential) {\n    blobSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues);\n    // Stored access policies are not supported for a user delegation SAS.\n    if (!blobSASSignatureValues.permissions || !blobSASSignatureValues.expiresOn) {\n        throw new RangeError(\"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\");\n    }\n    let resource = \"c\";\n    let timestamp = blobSASSignatureValues.snapshotTime;\n    if (blobSASSignatureValues.blobName) {\n        resource = \"b\";\n        if (blobSASSignatureValues.snapshotTime) {\n            resource = \"bs\";\n        }\n        else if (blobSASSignatureValues.versionId) {\n            resource = \"bv\";\n            timestamp = blobSASSignatureValues.versionId;\n        }\n    }\n    // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n    let verifiedPermissions;\n    if (blobSASSignatureValues.permissions) {\n        if (blobSASSignatureValues.blobName) {\n            verifiedPermissions = _BlobSASPermissions__WEBPACK_IMPORTED_MODULE_3__.BlobSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n        else {\n            verifiedPermissions = _ContainerSASPermissions__WEBPACK_IMPORTED_MODULE_4__.ContainerSASPermissions.parse(blobSASSignatureValues.permissions.toString()).toString();\n        }\n    }\n    // Signature is generated on the un-url-encoded values.\n    const stringToSign = [\n        verifiedPermissions ? verifiedPermissions : \"\",\n        blobSASSignatureValues.startsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.startsOn, false)\n            : \"\",\n        blobSASSignatureValues.expiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(blobSASSignatureValues.expiresOn, false)\n            : \"\",\n        getCanonicalName(userDelegationKeyCredential.accountName, blobSASSignatureValues.containerName, blobSASSignatureValues.blobName),\n        userDelegationKeyCredential.userDelegationKey.signedObjectId,\n        userDelegationKeyCredential.userDelegationKey.signedTenantId,\n        userDelegationKeyCredential.userDelegationKey.signedStartsOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n            ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_5__.truncatedISO8061Date)(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n            : \"\",\n        userDelegationKeyCredential.userDelegationKey.signedService,\n        userDelegationKeyCredential.userDelegationKey.signedVersion,\n        blobSASSignatureValues.preauthorizedAgentObjectId,\n        undefined, // agentObjectId\n        blobSASSignatureValues.correlationId,\n        blobSASSignatureValues.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_6__.ipRangeToString)(blobSASSignatureValues.ipRange) : \"\",\n        blobSASSignatureValues.protocol ? blobSASSignatureValues.protocol : \"\",\n        blobSASSignatureValues.version,\n        resource,\n        timestamp,\n        blobSASSignatureValues.encryptionScope,\n        blobSASSignatureValues.cacheControl,\n        blobSASSignatureValues.contentDisposition,\n        blobSASSignatureValues.contentEncoding,\n        blobSASSignatureValues.contentLanguage,\n        blobSASSignatureValues.contentType,\n    ].join(\"\\n\");\n    const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n    return {\n        sasQueryParameters: new _SASQueryParameters__WEBPACK_IMPORTED_MODULE_7__.SASQueryParameters(blobSASSignatureValues.version, signature, verifiedPermissions, undefined, undefined, blobSASSignatureValues.protocol, blobSASSignatureValues.startsOn, blobSASSignatureValues.expiresOn, blobSASSignatureValues.ipRange, blobSASSignatureValues.identifier, resource, blobSASSignatureValues.cacheControl, blobSASSignatureValues.contentDisposition, blobSASSignatureValues.contentEncoding, blobSASSignatureValues.contentLanguage, blobSASSignatureValues.contentType, userDelegationKeyCredential.userDelegationKey, blobSASSignatureValues.preauthorizedAgentObjectId, blobSASSignatureValues.correlationId, blobSASSignatureValues.encryptionScope),\n        stringToSign: stringToSign,\n    };\n}\nfunction getCanonicalName(accountName, containerName, blobName) {\n    // Container: \"/blob/account/containerName\"\n    // Blob:      \"/blob/account/containerName/blobName\"\n    const elements = [`/blob/${accountName}/${containerName}`];\n    if (blobName) {\n        elements.push(`/${blobName}`);\n    }\n    return elements.join(\"\");\n}\nfunction SASSignatureValuesSanityCheckAndAutofill(blobSASSignatureValues) {\n    const version = blobSASSignatureValues.version ? blobSASSignatureValues.version : _utils_constants__WEBPACK_IMPORTED_MODULE_0__.SERVICE_VERSION;\n    if (blobSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n        throw RangeError(\"'version' must be >= '2018-11-09' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.snapshotTime) {\n        throw RangeError(\"Must provide 'blobName' when providing 'snapshotTime'.\");\n    }\n    if (blobSASSignatureValues.versionId && version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.blobName === undefined && blobSASSignatureValues.versionId) {\n        throw RangeError(\"Must provide 'blobName' when providing 'versionId'.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.setImmutabilityPolicy &&\n        version < \"2020-08-04\") {\n        throw RangeError(\"'version' must be >= '2020-08-04' when provided 'i' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.deleteVersion &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'x' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.permanentDelete &&\n        version < \"2019-10-10\") {\n        throw RangeError(\"'version' must be >= '2019-10-10' when providing 'y' permission.\");\n    }\n    if (blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.tag &&\n        version < \"2019-12-12\") {\n        throw RangeError(\"'version' must be >= '2019-12-12' when providing 't' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        blobSASSignatureValues.permissions &&\n        (blobSASSignatureValues.permissions.move || blobSASSignatureValues.permissions.execute)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing the 'm' or 'e' permission.\");\n    }\n    if (version < \"2021-04-10\" &&\n        blobSASSignatureValues.permissions &&\n        blobSASSignatureValues.permissions.filterByTags) {\n        throw RangeError(\"'version' must be >= '2021-04-10' when providing the 'f' permission.\");\n    }\n    if (version < \"2020-02-10\" &&\n        (blobSASSignatureValues.preauthorizedAgentObjectId || blobSASSignatureValues.correlationId)) {\n        throw RangeError(\"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId' or 'correlationId'.\");\n    }\n    if (blobSASSignatureValues.encryptionScope && version < \"2020-12-06\") {\n        throw RangeError(\"'version' must be >= '2020-12-06' when provided 'encryptionScope' in SAS.\");\n    }\n    blobSASSignatureValues.version = version;\n    return blobSASSignatureValues;\n}\n//# sourceMappingURL=BlobSASSignatureValues.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/BlobSASSignatureValues.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContainerSASPermissions: () => (/* binding */ ContainerSASPermissions)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link BlobSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nclass ContainerSASPermissions {\n    constructor() {\n        /**\n         * Specifies Read access granted.\n         */\n        this.read = false;\n        /**\n         * Specifies Add access granted.\n         */\n        this.add = false;\n        /**\n         * Specifies Create access granted.\n         */\n        this.create = false;\n        /**\n         * Specifies Write access granted.\n         */\n        this.write = false;\n        /**\n         * Specifies Delete access granted.\n         */\n        this.delete = false;\n        /**\n         * Specifies Delete version access granted.\n         */\n        this.deleteVersion = false;\n        /**\n         * Specifies List access granted.\n         */\n        this.list = false;\n        /**\n         * Specfies Tag access granted.\n         */\n        this.tag = false;\n        /**\n         * Specifies Move access granted.\n         */\n        this.move = false;\n        /**\n         * Specifies Execute access granted.\n         */\n        this.execute = false;\n        /**\n         * Specifies SetImmutabilityPolicy access granted.\n         */\n        this.setImmutabilityPolicy = false;\n        /**\n         * Specifies that Permanent Delete is permitted.\n         */\n        this.permanentDelete = false;\n        /**\n         * Specifies that Filter Blobs by Tags is permitted.\n         */\n        this.filterByTags = false;\n    }\n    /**\n     * Creates an {@link ContainerSASPermissions} from the specified permissions string. This method will throw an\n     * Error if it encounters a character that does not correspond to a valid permission.\n     *\n     * @param permissions -\n     */\n    static parse(permissions) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        for (const char of permissions) {\n            switch (char) {\n                case \"r\":\n                    containerSASPermissions.read = true;\n                    break;\n                case \"a\":\n                    containerSASPermissions.add = true;\n                    break;\n                case \"c\":\n                    containerSASPermissions.create = true;\n                    break;\n                case \"w\":\n                    containerSASPermissions.write = true;\n                    break;\n                case \"d\":\n                    containerSASPermissions.delete = true;\n                    break;\n                case \"l\":\n                    containerSASPermissions.list = true;\n                    break;\n                case \"t\":\n                    containerSASPermissions.tag = true;\n                    break;\n                case \"x\":\n                    containerSASPermissions.deleteVersion = true;\n                    break;\n                case \"m\":\n                    containerSASPermissions.move = true;\n                    break;\n                case \"e\":\n                    containerSASPermissions.execute = true;\n                    break;\n                case \"i\":\n                    containerSASPermissions.setImmutabilityPolicy = true;\n                    break;\n                case \"y\":\n                    containerSASPermissions.permanentDelete = true;\n                    break;\n                case \"f\":\n                    containerSASPermissions.filterByTags = true;\n                    break;\n                default:\n                    throw new RangeError(`Invalid permission ${char}`);\n            }\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Creates a {@link ContainerSASPermissions} from a raw object which contains same keys as it\n     * and boolean values for them.\n     *\n     * @param permissionLike -\n     */\n    static from(permissionLike) {\n        const containerSASPermissions = new ContainerSASPermissions();\n        if (permissionLike.read) {\n            containerSASPermissions.read = true;\n        }\n        if (permissionLike.add) {\n            containerSASPermissions.add = true;\n        }\n        if (permissionLike.create) {\n            containerSASPermissions.create = true;\n        }\n        if (permissionLike.write) {\n            containerSASPermissions.write = true;\n        }\n        if (permissionLike.delete) {\n            containerSASPermissions.delete = true;\n        }\n        if (permissionLike.list) {\n            containerSASPermissions.list = true;\n        }\n        if (permissionLike.deleteVersion) {\n            containerSASPermissions.deleteVersion = true;\n        }\n        if (permissionLike.tag) {\n            containerSASPermissions.tag = true;\n        }\n        if (permissionLike.move) {\n            containerSASPermissions.move = true;\n        }\n        if (permissionLike.execute) {\n            containerSASPermissions.execute = true;\n        }\n        if (permissionLike.setImmutabilityPolicy) {\n            containerSASPermissions.setImmutabilityPolicy = true;\n        }\n        if (permissionLike.permanentDelete) {\n            containerSASPermissions.permanentDelete = true;\n        }\n        if (permissionLike.filterByTags) {\n            containerSASPermissions.filterByTags = true;\n        }\n        return containerSASPermissions;\n    }\n    /**\n     * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n     * order accepted by the service.\n     *\n     * The order of the characters should be as specified here to ensure correctness.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n     *\n     */\n    toString() {\n        const permissions = [];\n        if (this.read) {\n            permissions.push(\"r\");\n        }\n        if (this.add) {\n            permissions.push(\"a\");\n        }\n        if (this.create) {\n            permissions.push(\"c\");\n        }\n        if (this.write) {\n            permissions.push(\"w\");\n        }\n        if (this.delete) {\n            permissions.push(\"d\");\n        }\n        if (this.deleteVersion) {\n            permissions.push(\"x\");\n        }\n        if (this.list) {\n            permissions.push(\"l\");\n        }\n        if (this.tag) {\n            permissions.push(\"t\");\n        }\n        if (this.move) {\n            permissions.push(\"m\");\n        }\n        if (this.execute) {\n            permissions.push(\"e\");\n        }\n        if (this.setImmutabilityPolicy) {\n            permissions.push(\"i\");\n        }\n        if (this.permanentDelete) {\n            permissions.push(\"y\");\n        }\n        if (this.filterByTags) {\n            permissions.push(\"f\");\n        }\n        return permissions.join(\"\");\n    }\n}\n//# sourceMappingURL=ContainerSASPermissions.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/ContainerSASPermissions.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SASProtocol: () => (/* binding */ SASProtocol),\n/* harmony export */   SASQueryParameters: () => (/* binding */ SASQueryParameters)\n/* harmony export */ });\n/* harmony import */ var _SasIPRange__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SasIPRange */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js\");\n/* harmony import */ var _utils_utils_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils.common */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Protocols for generated SAS.\n */\nvar SASProtocol;\n(function (SASProtocol) {\n    /**\n     * Protocol that allows HTTPS only\n     */\n    SASProtocol[\"Https\"] = \"https\";\n    /**\n     * Protocol that allows both HTTPS and HTTP\n     */\n    SASProtocol[\"HttpsAndHttp\"] = \"https,http\";\n})(SASProtocol || (SASProtocol = {}));\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nclass SASQueryParameters {\n    /**\n     * Optional. IP range allowed for this SAS.\n     *\n     * @readonly\n     */\n    get ipRange() {\n        if (this.ipRangeInner) {\n            return {\n                end: this.ipRangeInner.end,\n                start: this.ipRangeInner.start,\n            };\n        }\n        return undefined;\n    }\n    constructor(version, signature, permissionsOrOptions, services, resourceTypes, protocol, startsOn, expiresOn, ipRange, identifier, resource, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, userDelegationKey, preauthorizedAgentObjectId, correlationId, encryptionScope) {\n        this.version = version;\n        this.signature = signature;\n        if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n            // SASQueryParametersOptions\n            this.permissions = permissionsOrOptions.permissions;\n            this.services = permissionsOrOptions.services;\n            this.resourceTypes = permissionsOrOptions.resourceTypes;\n            this.protocol = permissionsOrOptions.protocol;\n            this.startsOn = permissionsOrOptions.startsOn;\n            this.expiresOn = permissionsOrOptions.expiresOn;\n            this.ipRangeInner = permissionsOrOptions.ipRange;\n            this.identifier = permissionsOrOptions.identifier;\n            this.encryptionScope = permissionsOrOptions.encryptionScope;\n            this.resource = permissionsOrOptions.resource;\n            this.cacheControl = permissionsOrOptions.cacheControl;\n            this.contentDisposition = permissionsOrOptions.contentDisposition;\n            this.contentEncoding = permissionsOrOptions.contentEncoding;\n            this.contentLanguage = permissionsOrOptions.contentLanguage;\n            this.contentType = permissionsOrOptions.contentType;\n            if (permissionsOrOptions.userDelegationKey) {\n                this.signedOid = permissionsOrOptions.userDelegationKey.signedObjectId;\n                this.signedTenantId = permissionsOrOptions.userDelegationKey.signedTenantId;\n                this.signedStartsOn = permissionsOrOptions.userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = permissionsOrOptions.userDelegationKey.signedExpiresOn;\n                this.signedService = permissionsOrOptions.userDelegationKey.signedService;\n                this.signedVersion = permissionsOrOptions.userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = permissionsOrOptions.preauthorizedAgentObjectId;\n                this.correlationId = permissionsOrOptions.correlationId;\n            }\n        }\n        else {\n            this.services = services;\n            this.resourceTypes = resourceTypes;\n            this.expiresOn = expiresOn;\n            this.permissions = permissionsOrOptions;\n            this.protocol = protocol;\n            this.startsOn = startsOn;\n            this.ipRangeInner = ipRange;\n            this.encryptionScope = encryptionScope;\n            this.identifier = identifier;\n            this.resource = resource;\n            this.cacheControl = cacheControl;\n            this.contentDisposition = contentDisposition;\n            this.contentEncoding = contentEncoding;\n            this.contentLanguage = contentLanguage;\n            this.contentType = contentType;\n            if (userDelegationKey) {\n                this.signedOid = userDelegationKey.signedObjectId;\n                this.signedTenantId = userDelegationKey.signedTenantId;\n                this.signedStartsOn = userDelegationKey.signedStartsOn;\n                this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n                this.signedService = userDelegationKey.signedService;\n                this.signedVersion = userDelegationKey.signedVersion;\n                this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n                this.correlationId = correlationId;\n            }\n        }\n    }\n    /**\n     * Encodes all SAS query parameters into a string that can be appended to a URL.\n     *\n     */\n    toString() {\n        const params = [\n            \"sv\",\n            \"ss\",\n            \"srt\",\n            \"spr\",\n            \"st\",\n            \"se\",\n            \"sip\",\n            \"si\",\n            \"ses\",\n            \"skoid\", // Signed object ID\n            \"sktid\", // Signed tenant ID\n            \"skt\", // Signed key start time\n            \"ske\", // Signed key expiry time\n            \"sks\", // Signed key service\n            \"skv\", // Signed key version\n            \"sr\",\n            \"sp\",\n            \"sig\",\n            \"rscc\",\n            \"rscd\",\n            \"rsce\",\n            \"rscl\",\n            \"rsct\",\n            \"saoid\",\n            \"scid\",\n        ];\n        const queries = [];\n        for (const param of params) {\n            switch (param) {\n                case \"sv\":\n                    this.tryAppendQueryParameter(queries, param, this.version);\n                    break;\n                case \"ss\":\n                    this.tryAppendQueryParameter(queries, param, this.services);\n                    break;\n                case \"srt\":\n                    this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n                    break;\n                case \"spr\":\n                    this.tryAppendQueryParameter(queries, param, this.protocol);\n                    break;\n                case \"st\":\n                    this.tryAppendQueryParameter(queries, param, this.startsOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.startsOn, false) : undefined);\n                    break;\n                case \"se\":\n                    this.tryAppendQueryParameter(queries, param, this.expiresOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.expiresOn, false) : undefined);\n                    break;\n                case \"sip\":\n                    this.tryAppendQueryParameter(queries, param, this.ipRange ? (0,_SasIPRange__WEBPACK_IMPORTED_MODULE_1__.ipRangeToString)(this.ipRange) : undefined);\n                    break;\n                case \"si\":\n                    this.tryAppendQueryParameter(queries, param, this.identifier);\n                    break;\n                case \"ses\":\n                    this.tryAppendQueryParameter(queries, param, this.encryptionScope);\n                    break;\n                case \"skoid\": // Signed object ID\n                    this.tryAppendQueryParameter(queries, param, this.signedOid);\n                    break;\n                case \"sktid\": // Signed tenant ID\n                    this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n                    break;\n                case \"skt\": // Signed key start time\n                    this.tryAppendQueryParameter(queries, param, this.signedStartsOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.signedStartsOn, false) : undefined);\n                    break;\n                case \"ske\": // Signed key expiry time\n                    this.tryAppendQueryParameter(queries, param, this.signedExpiresOn ? (0,_utils_utils_common__WEBPACK_IMPORTED_MODULE_0__.truncatedISO8061Date)(this.signedExpiresOn, false) : undefined);\n                    break;\n                case \"sks\": // Signed key service\n                    this.tryAppendQueryParameter(queries, param, this.signedService);\n                    break;\n                case \"skv\": // Signed key version\n                    this.tryAppendQueryParameter(queries, param, this.signedVersion);\n                    break;\n                case \"sr\":\n                    this.tryAppendQueryParameter(queries, param, this.resource);\n                    break;\n                case \"sp\":\n                    this.tryAppendQueryParameter(queries, param, this.permissions);\n                    break;\n                case \"sig\":\n                    this.tryAppendQueryParameter(queries, param, this.signature);\n                    break;\n                case \"rscc\":\n                    this.tryAppendQueryParameter(queries, param, this.cacheControl);\n                    break;\n                case \"rscd\":\n                    this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n                    break;\n                case \"rsce\":\n                    this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n                    break;\n                case \"rscl\":\n                    this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n                    break;\n                case \"rsct\":\n                    this.tryAppendQueryParameter(queries, param, this.contentType);\n                    break;\n                case \"saoid\":\n                    this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n                    break;\n                case \"scid\":\n                    this.tryAppendQueryParameter(queries, param, this.correlationId);\n                    break;\n            }\n        }\n        return queries.join(\"&\");\n    }\n    /**\n     * A private helper method used to filter and append query key/value pairs into an array.\n     *\n     * @param queries -\n     * @param key -\n     * @param value -\n     */\n    tryAppendQueryParameter(queries, key, value) {\n        if (!value) {\n            return;\n        }\n        key = encodeURIComponent(key);\n        value = encodeURIComponent(value);\n        if (key.length > 0 && value.length > 0) {\n            queries.push(`${key}=${value}`);\n        }\n    }\n}\n//# sourceMappingURL=SASQueryParameters.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SASQueryParameters.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ipRangeToString: () => (/* binding */ ipRangeToString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nfunction ipRangeToString(ipRange) {\n    return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n//# sourceMappingURL=SasIPRange.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/sas/SasIPRange.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Batch: () => (/* binding */ Batch)\n/* harmony export */ });\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_0__);\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\n\n/**\n * States for Batch.\n */\nvar BatchStates;\n(function (BatchStates) {\n    BatchStates[BatchStates[\"Good\"] = 0] = \"Good\";\n    BatchStates[BatchStates[\"Error\"] = 1] = \"Error\";\n})(BatchStates || (BatchStates = {}));\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nclass Batch {\n    /**\n     * Creates an instance of Batch.\n     * @param concurrency -\n     */\n    constructor(concurrency = 5) {\n        /**\n         * Number of active operations under execution.\n         */\n        this.actives = 0;\n        /**\n         * Number of completed operations under execution.\n         */\n        this.completed = 0;\n        /**\n         * Offset of next operation to be executed.\n         */\n        this.offset = 0;\n        /**\n         * Operation array to be executed.\n         */\n        this.operations = [];\n        /**\n         * States of Batch. When an error happens, state will turn into error.\n         * Batch will stop execute left operations.\n         */\n        this.state = BatchStates.Good;\n        if (concurrency < 1) {\n            throw new RangeError(\"concurrency must be larger than 0\");\n        }\n        this.concurrency = concurrency;\n        this.emitter = new events__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();\n    }\n    /**\n     * Add a operation into queue.\n     *\n     * @param operation -\n     */\n    addOperation(operation) {\n        this.operations.push(async () => {\n            try {\n                this.actives++;\n                await operation();\n                this.actives--;\n                this.completed++;\n                this.parallelExecute();\n            }\n            catch (error) {\n                this.emitter.emit(\"error\", error);\n            }\n        });\n    }\n    /**\n     * Start execute operations in the queue.\n     *\n     */\n    async do() {\n        if (this.operations.length === 0) {\n            return Promise.resolve();\n        }\n        this.parallelExecute();\n        return new Promise((resolve, reject) => {\n            this.emitter.on(\"finish\", resolve);\n            this.emitter.on(\"error\", (error) => {\n                this.state = BatchStates.Error;\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Get next operation to be executed. Return null when reaching ends.\n     *\n     */\n    nextOperation() {\n        if (this.offset < this.operations.length) {\n            return this.operations[this.offset++];\n        }\n        return null;\n    }\n    /**\n     * Start execute operations. One one the most important difference between\n     * this method with do() is that do() wraps as an sync method.\n     *\n     */\n    parallelExecute() {\n        if (this.state === BatchStates.Error) {\n            return;\n        }\n        if (this.completed >= this.operations.length) {\n            this.emitter.emit(\"finish\");\n            return;\n        }\n        while (this.actives < this.concurrency) {\n            const operation = this.nextOperation();\n            if (operation) {\n                operation();\n            }\n            else {\n                return;\n            }\n        }\n    }\n}\n//# sourceMappingURL=Batch.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Batch.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Mutex: () => (/* binding */ Mutex)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar MutexLockStatus;\n(function (MutexLockStatus) {\n    MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n    MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n})(MutexLockStatus || (MutexLockStatus = {}));\n/**\n * An async mutex lock.\n */\nclass Mutex {\n    /**\n     * Lock for a specific key. If the lock has been acquired by another customer, then\n     * will wait until getting the lock.\n     *\n     * @param key - lock key\n     */\n    static async lock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {\n                this.keys[key] = MutexLockStatus.LOCKED;\n                resolve();\n            }\n            else {\n                this.onUnlockEvent(key, () => {\n                    this.keys[key] = MutexLockStatus.LOCKED;\n                    resolve();\n                });\n            }\n        });\n    }\n    /**\n     * Unlock a key.\n     *\n     * @param key -\n     */\n    static async unlock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === MutexLockStatus.LOCKED) {\n                this.emitUnlockEvent(key);\n            }\n            delete this.keys[key];\n            resolve();\n        });\n    }\n    static onUnlockEvent(key, handler) {\n        if (this.listeners[key] === undefined) {\n            this.listeners[key] = [handler];\n        }\n        else {\n            this.listeners[key].push(handler);\n        }\n    }\n    static emitUnlockEvent(key) {\n        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n            const handler = this.listeners[key].shift();\n            setImmediate(() => {\n                handler.call(this);\n            });\n        }\n    }\n}\nMutex.keys = {};\nMutex.listeners = {};\n//# sourceMappingURL=Mutex.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nlet _defaultHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!_defaultHttpClient) {\n        _defaultHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return _defaultHttpClient;\n}\n//# sourceMappingURL=cache.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/cache.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BATCH_MAX_PAYLOAD_IN_BYTES: () => (/* binding */ BATCH_MAX_PAYLOAD_IN_BYTES),\n/* harmony export */   BATCH_MAX_REQUEST: () => (/* binding */ BATCH_MAX_REQUEST),\n/* harmony export */   BLOCK_BLOB_MAX_BLOCKS: () => (/* binding */ BLOCK_BLOB_MAX_BLOCKS),\n/* harmony export */   BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES: () => (/* binding */ BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES),\n/* harmony export */   BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES: () => (/* binding */ BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES),\n/* harmony export */   BlobDoesNotUseCustomerSpecifiedEncryption: () => (/* binding */ BlobDoesNotUseCustomerSpecifiedEncryption),\n/* harmony export */   BlobUsesCustomerSpecifiedEncryptionMsg: () => (/* binding */ BlobUsesCustomerSpecifiedEncryptionMsg),\n/* harmony export */   DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES: () => (/* binding */ DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES),\n/* harmony export */   DEFAULT_BLOCK_BUFFER_SIZE_BYTES: () => (/* binding */ DEFAULT_BLOCK_BUFFER_SIZE_BYTES),\n/* harmony export */   DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS: () => (/* binding */ DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS),\n/* harmony export */   DevelopmentConnectionString: () => (/* binding */ DevelopmentConnectionString),\n/* harmony export */   ETagAny: () => (/* binding */ ETagAny),\n/* harmony export */   ETagNone: () => (/* binding */ ETagNone),\n/* harmony export */   EncryptionAlgorithmAES25: () => (/* binding */ EncryptionAlgorithmAES25),\n/* harmony export */   HTTPURLConnection: () => (/* binding */ HTTPURLConnection),\n/* harmony export */   HTTP_LINE_ENDING: () => (/* binding */ HTTP_LINE_ENDING),\n/* harmony export */   HTTP_VERSION_1_1: () => (/* binding */ HTTP_VERSION_1_1),\n/* harmony export */   HeaderConstants: () => (/* binding */ HeaderConstants),\n/* harmony export */   PathStylePorts: () => (/* binding */ PathStylePorts),\n/* harmony export */   REQUEST_TIMEOUT: () => (/* binding */ REQUEST_TIMEOUT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION),\n/* harmony export */   SERVICE_VERSION: () => (/* binding */ SERVICE_VERSION),\n/* harmony export */   SIZE_1_MB: () => (/* binding */ SIZE_1_MB),\n/* harmony export */   StorageBlobLoggingAllowedHeaderNames: () => (/* binding */ StorageBlobLoggingAllowedHeaderNames),\n/* harmony export */   StorageBlobLoggingAllowedQueryParameters: () => (/* binding */ StorageBlobLoggingAllowedQueryParameters),\n/* harmony export */   StorageOAuthScopes: () => (/* binding */ StorageOAuthScopes),\n/* harmony export */   URLConstants: () => (/* binding */ URLConstants)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst SDK_VERSION = \"12.26.0\";\nconst SERVICE_VERSION = \"2025-01-05\";\nconst BLOCK_BLOB_MAX_UPLOAD_BLOB_BYTES = 256 * 1024 * 1024; // 256MB\nconst BLOCK_BLOB_MAX_STAGE_BLOCK_BYTES = 4000 * 1024 * 1024; // 4000MB\nconst BLOCK_BLOB_MAX_BLOCKS = 50000;\nconst DEFAULT_BLOCK_BUFFER_SIZE_BYTES = 8 * 1024 * 1024; // 8MB\nconst DEFAULT_BLOB_DOWNLOAD_BLOCK_BYTES = 4 * 1024 * 1024; // 4MB\nconst DEFAULT_MAX_DOWNLOAD_RETRY_REQUESTS = 5;\nconst REQUEST_TIMEOUT = 100 * 1000; // In ms\n/**\n * The OAuth scope to use with Azure Storage.\n */\nconst StorageOAuthScopes = \"https://storage.azure.com/.default\";\nconst URLConstants = {\n    Parameters: {\n        FORCE_BROWSER_NO_CACHE: \"_\",\n        SIGNATURE: \"sig\",\n        SNAPSHOT: \"snapshot\",\n        VERSIONID: \"versionid\",\n        TIMEOUT: \"timeout\",\n    },\n};\nconst HTTPURLConnection = {\n    HTTP_ACCEPTED: 202,\n    HTTP_CONFLICT: 409,\n    HTTP_NOT_FOUND: 404,\n    HTTP_PRECON_FAILED: 412,\n    HTTP_RANGE_NOT_SATISFIABLE: 416,\n};\nconst HeaderConstants = {\n    AUTHORIZATION: \"Authorization\",\n    AUTHORIZATION_SCHEME: \"Bearer\",\n    CONTENT_ENCODING: \"Content-Encoding\",\n    CONTENT_ID: \"Content-ID\",\n    CONTENT_LANGUAGE: \"Content-Language\",\n    CONTENT_LENGTH: \"Content-Length\",\n    CONTENT_MD5: \"Content-Md5\",\n    CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n    CONTENT_TYPE: \"Content-Type\",\n    COOKIE: \"Cookie\",\n    DATE: \"date\",\n    IF_MATCH: \"if-match\",\n    IF_MODIFIED_SINCE: \"if-modified-since\",\n    IF_NONE_MATCH: \"if-none-match\",\n    IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n    PREFIX_FOR_STORAGE: \"x-ms-\",\n    RANGE: \"Range\",\n    USER_AGENT: \"User-Agent\",\n    X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n    X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n    X_MS_DATE: \"x-ms-date\",\n    X_MS_ERROR_CODE: \"x-ms-error-code\",\n    X_MS_VERSION: \"x-ms-version\",\n    X_MS_CopySourceErrorCode: \"x-ms-copy-source-error-code\",\n};\nconst ETagNone = \"\";\nconst ETagAny = \"*\";\nconst SIZE_1_MB = 1 * 1024 * 1024;\nconst BATCH_MAX_REQUEST = 256;\nconst BATCH_MAX_PAYLOAD_IN_BYTES = 4 * SIZE_1_MB;\nconst HTTP_LINE_ENDING = \"\\r\\n\";\nconst HTTP_VERSION_1_1 = \"HTTP/1.1\";\nconst EncryptionAlgorithmAES25 = \"AES256\";\nconst DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\nconst StorageBlobLoggingAllowedHeaderNames = [\n    \"Access-Control-Allow-Origin\",\n    \"Cache-Control\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"Request-Id\",\n    \"traceparent\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"x-ms-client-request-id\",\n    \"x-ms-date\",\n    \"x-ms-error-code\",\n    \"x-ms-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-version\",\n    \"Accept-Ranges\",\n    \"Content-Disposition\",\n    \"Content-Encoding\",\n    \"Content-Language\",\n    \"Content-MD5\",\n    \"Content-Range\",\n    \"ETag\",\n    \"Last-Modified\",\n    \"Server\",\n    \"Vary\",\n    \"x-ms-content-crc64\",\n    \"x-ms-copy-action\",\n    \"x-ms-copy-completion-time\",\n    \"x-ms-copy-id\",\n    \"x-ms-copy-progress\",\n    \"x-ms-copy-status\",\n    \"x-ms-has-immutability-policy\",\n    \"x-ms-has-legal-hold\",\n    \"x-ms-lease-state\",\n    \"x-ms-lease-status\",\n    \"x-ms-range\",\n    \"x-ms-request-server-encrypted\",\n    \"x-ms-server-encrypted\",\n    \"x-ms-snapshot\",\n    \"x-ms-source-range\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"x-ms-access-tier\",\n    \"x-ms-access-tier-change-time\",\n    \"x-ms-access-tier-inferred\",\n    \"x-ms-account-kind\",\n    \"x-ms-archive-status\",\n    \"x-ms-blob-append-offset\",\n    \"x-ms-blob-cache-control\",\n    \"x-ms-blob-committed-block-count\",\n    \"x-ms-blob-condition-appendpos\",\n    \"x-ms-blob-condition-maxsize\",\n    \"x-ms-blob-content-disposition\",\n    \"x-ms-blob-content-encoding\",\n    \"x-ms-blob-content-language\",\n    \"x-ms-blob-content-length\",\n    \"x-ms-blob-content-md5\",\n    \"x-ms-blob-content-type\",\n    \"x-ms-blob-public-access\",\n    \"x-ms-blob-sequence-number\",\n    \"x-ms-blob-type\",\n    \"x-ms-copy-destination-snapshot\",\n    \"x-ms-creation-time\",\n    \"x-ms-default-encryption-scope\",\n    \"x-ms-delete-snapshots\",\n    \"x-ms-delete-type-permanent\",\n    \"x-ms-deny-encryption-scope-override\",\n    \"x-ms-encryption-algorithm\",\n    \"x-ms-if-sequence-number-eq\",\n    \"x-ms-if-sequence-number-le\",\n    \"x-ms-if-sequence-number-lt\",\n    \"x-ms-incremental-copy\",\n    \"x-ms-lease-action\",\n    \"x-ms-lease-break-period\",\n    \"x-ms-lease-duration\",\n    \"x-ms-lease-id\",\n    \"x-ms-lease-time\",\n    \"x-ms-page-write\",\n    \"x-ms-proposed-lease-id\",\n    \"x-ms-range-get-content-md5\",\n    \"x-ms-rehydrate-priority\",\n    \"x-ms-sequence-number-action\",\n    \"x-ms-sku-name\",\n    \"x-ms-source-content-md5\",\n    \"x-ms-source-if-match\",\n    \"x-ms-source-if-modified-since\",\n    \"x-ms-source-if-none-match\",\n    \"x-ms-source-if-unmodified-since\",\n    \"x-ms-tag-count\",\n    \"x-ms-encryption-key-sha256\",\n    \"x-ms-copy-source-error-code\",\n    \"x-ms-copy-source-status-code\",\n    \"x-ms-if-tags\",\n    \"x-ms-source-if-tags\",\n];\nconst StorageBlobLoggingAllowedQueryParameters = [\n    \"comp\",\n    \"maxresults\",\n    \"rscc\",\n    \"rscd\",\n    \"rsce\",\n    \"rscl\",\n    \"rsct\",\n    \"se\",\n    \"si\",\n    \"sip\",\n    \"sp\",\n    \"spr\",\n    \"sr\",\n    \"srt\",\n    \"ss\",\n    \"st\",\n    \"sv\",\n    \"include\",\n    \"marker\",\n    \"prefix\",\n    \"copyid\",\n    \"restype\",\n    \"blockid\",\n    \"blocklisttype\",\n    \"delimiter\",\n    \"prevsnapshot\",\n    \"ske\",\n    \"skoid\",\n    \"sks\",\n    \"skt\",\n    \"sktid\",\n    \"skv\",\n    \"snapshot\",\n];\nconst BlobUsesCustomerSpecifiedEncryptionMsg = \"BlobUsesCustomerSpecifiedEncryption\";\nconst BlobDoesNotUseCustomerSpecifiedEncryption = \"BlobDoesNotUseCustomerSpecifiedEncryption\";\n/// List of ports used for path style addressing.\n/// Path style addressing means that storage account is put in URI's Path segment in instead of in host.\nconst PathStylePorts = [\n    \"10000\",\n    \"10001\",\n    \"10002\",\n    \"10003\",\n    \"10004\",\n    \"10100\",\n    \"10101\",\n    \"10102\",\n    \"10103\",\n    \"10104\",\n    \"11000\",\n    \"11001\",\n    \"11002\",\n    \"11003\",\n    \"11004\",\n    \"11100\",\n    \"11101\",\n    \"11102\",\n    \"11103\",\n    \"11104\",\n];\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingClient: () => (/* binding */ tracingClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"./node_modules/@azure/core-tracing/dist/browser/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nconst tracingClient = (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n    packageName: \"@azure/storage-blob\",\n    packageVersion: _constants__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n    namespace: \"Microsoft.Storage\",\n});\n//# sourceMappingURL=tracing.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/tracing.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blobToArrayBuffer: () => (/* binding */ blobToArrayBuffer),\n/* harmony export */   blobToString: () => (/* binding */ blobToString),\n/* harmony export */   fsCreateReadStream: () => (/* binding */ fsCreateReadStream),\n/* harmony export */   fsStat: () => (/* binding */ fsStat),\n/* harmony export */   readStreamToLocalFile: () => (/* binding */ readStreamToLocalFile),\n/* harmony export */   streamToBuffer: () => (/* binding */ streamToBuffer),\n/* harmony export */   streamToBuffer2: () => (/* binding */ streamToBuffer2)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Convert a Browser Blob object into ArrayBuffer.\n *\n * @param blob -\n */\nasync function blobToArrayBuffer(blob) {\n    const fileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n        fileReader.onloadend = (ev) => {\n            resolve(ev.target.result);\n        };\n        fileReader.onerror = reject;\n        fileReader.readAsArrayBuffer(blob);\n    });\n}\n/**\n * Convert a Browser Blob object into string.\n *\n * @param blob -\n */\nasync function blobToString(blob) {\n    const fileReader = new FileReader();\n    return new Promise((resolve, reject) => {\n        fileReader.onloadend = (ev) => {\n            resolve(ev.target.result);\n        };\n        fileReader.onerror = reject;\n        fileReader.readAsText(blob);\n    });\n}\nfunction streamToBuffer() {\n    /* empty */\n}\nfunction streamToBuffer2() {\n    /* empty */\n}\nfunction readStreamToLocalFile() {\n    /* empty */\n}\nconst fsStat = function stat() {\n    /* empty */\n};\nconst fsCreateReadStream = function createReadStream() {\n    /* empty */\n};\n//# sourceMappingURL=utils.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.browser.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobNameToString: () => (/* binding */ BlobNameToString),\n/* harmony export */   ConvertInternalResponseOfListBlobFlat: () => (/* binding */ ConvertInternalResponseOfListBlobFlat),\n/* harmony export */   ConvertInternalResponseOfListBlobHierarchy: () => (/* binding */ ConvertInternalResponseOfListBlobHierarchy),\n/* harmony export */   EscapePath: () => (/* binding */ EscapePath),\n/* harmony export */   ExtractPageRangeInfoItems: () => (/* binding */ ExtractPageRangeInfoItems),\n/* harmony export */   appendToURLPath: () => (/* binding */ appendToURLPath),\n/* harmony export */   appendToURLQuery: () => (/* binding */ appendToURLQuery),\n/* harmony export */   assertResponse: () => (/* binding */ assertResponse),\n/* harmony export */   attachCredential: () => (/* binding */ attachCredential),\n/* harmony export */   base64decode: () => (/* binding */ base64decode),\n/* harmony export */   base64encode: () => (/* binding */ base64encode),\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   escapeURLPath: () => (/* binding */ escapeURLPath),\n/* harmony export */   extractConnectionStringParts: () => (/* binding */ extractConnectionStringParts),\n/* harmony export */   generateBlockID: () => (/* binding */ generateBlockID),\n/* harmony export */   getAccountNameFromUrl: () => (/* binding */ getAccountNameFromUrl),\n/* harmony export */   getURLParameter: () => (/* binding */ getURLParameter),\n/* harmony export */   getURLPath: () => (/* binding */ getURLPath),\n/* harmony export */   getURLPathAndQuery: () => (/* binding */ getURLPathAndQuery),\n/* harmony export */   getURLQueries: () => (/* binding */ getURLQueries),\n/* harmony export */   getURLScheme: () => (/* binding */ getURLScheme),\n/* harmony export */   getValueInConnString: () => (/* binding */ getValueInConnString),\n/* harmony export */   httpAuthorizationToString: () => (/* binding */ httpAuthorizationToString),\n/* harmony export */   iEqual: () => (/* binding */ iEqual),\n/* harmony export */   isIpEndpointStyle: () => (/* binding */ isIpEndpointStyle),\n/* harmony export */   padStart: () => (/* binding */ padStart),\n/* harmony export */   parseObjectReplicationRecord: () => (/* binding */ parseObjectReplicationRecord),\n/* harmony export */   sanitizeHeaders: () => (/* binding */ sanitizeHeaders),\n/* harmony export */   sanitizeURL: () => (/* binding */ sanitizeURL),\n/* harmony export */   setURLHost: () => (/* binding */ setURLHost),\n/* harmony export */   setURLParameter: () => (/* binding */ setURLParameter),\n/* harmony export */   toBlobTags: () => (/* binding */ toBlobTags),\n/* harmony export */   toBlobTagsString: () => (/* binding */ toBlobTagsString),\n/* harmony export */   toQuerySerialization: () => (/* binding */ toQuerySerialization),\n/* harmony export */   toTags: () => (/* binding */ toTags),\n/* harmony export */   truncatedISO8061Date: () => (/* binding */ truncatedISO8061Date)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/constants.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\")[\"Buffer\"];\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructor, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nfunction escapeURLPath(url) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path || \"/\";\n    path = escape(path);\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\nfunction getProxyUriFromDevConnString(connectionString) {\n    // Development Connection String\n    // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n    let proxyUri = \"\";\n    if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n        // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n        const matchCredentials = connectionString.split(\";\");\n        for (const element of matchCredentials) {\n            if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n                proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")[1];\n            }\n        }\n    }\n    return proxyUri;\n}\nfunction getValueInConnString(connectionString, argument) {\n    const elements = connectionString.split(\";\");\n    for (const element of elements) {\n        if (element.trim().startsWith(argument)) {\n            return element.trim().match(argument + \"=(.*)\")[1];\n        }\n    }\n    return \"\";\n}\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nfunction extractConnectionStringParts(connectionString) {\n    let proxyUri = \"\";\n    if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n        // Development connection string\n        proxyUri = getProxyUriFromDevConnString(connectionString);\n        connectionString = _constants__WEBPACK_IMPORTED_MODULE_2__.DevelopmentConnectionString;\n    }\n    // Matching BlobEndpoint in the Account connection string\n    let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n    // Slicing off '/' at the end if exists\n    // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n    blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n    if (connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n        connectionString.search(\"AccountKey=\") !== -1) {\n        // Account connection string\n        let defaultEndpointsProtocol = \"\";\n        let accountName = \"\";\n        let accountKey = Buffer.from(\"accountKey\", \"base64\");\n        let endpointSuffix = \"\";\n        // Get account name and key\n        accountName = getValueInConnString(connectionString, \"AccountName\");\n        accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n        if (!blobEndpoint) {\n            // BlobEndpoint is not present in the Account connection string\n            // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n            defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n            const protocol = defaultEndpointsProtocol.toLowerCase();\n            if (protocol !== \"https\" && protocol !== \"http\") {\n                throw new Error(\"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\");\n            }\n            endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n            if (!endpointSuffix) {\n                throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n            }\n            blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n        }\n        if (!accountName) {\n            throw new Error(\"Invalid AccountName in the provided Connection String\");\n        }\n        else if (accountKey.length === 0) {\n            throw new Error(\"Invalid AccountKey in the provided Connection String\");\n        }\n        return {\n            kind: \"AccountConnString\",\n            url: blobEndpoint,\n            accountName,\n            accountKey,\n            proxyUri,\n        };\n    }\n    else {\n        // SAS connection string\n        let accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n        let accountName = getValueInConnString(connectionString, \"AccountName\");\n        // if accountName is empty, try to read it from BlobEndpoint\n        if (!accountName) {\n            accountName = getAccountNameFromUrl(blobEndpoint);\n        }\n        if (!blobEndpoint) {\n            throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n        }\n        else if (!accountSas) {\n            throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n        }\n        // client constructors assume accountSas does *not* start with ?\n        if (accountSas.startsWith(\"?\")) {\n            accountSas = accountSas.substring(1);\n        }\n        return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n    }\n}\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text) {\n    return encodeURIComponent(text)\n        .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n        .replace(/'/g, \"%27\") // Escape for \"'\"\n        .replace(/\\+/g, \"%20\")\n        .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nfunction appendToURLPath(url, name) {\n    const urlParsed = new URL(url);\n    let path = urlParsed.pathname;\n    path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n    urlParsed.pathname = path;\n    return urlParsed.toString();\n}\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nfunction setURLParameter(url, name, value) {\n    const urlParsed = new URL(url);\n    const encodedName = encodeURIComponent(name);\n    const encodedValue = value ? encodeURIComponent(value) : undefined;\n    // mutating searchParams will change the encoding, so we have to do this ourselves\n    const searchString = urlParsed.search === \"\" ? \"?\" : urlParsed.search;\n    const searchPieces = [];\n    for (const pair of searchString.slice(1).split(\"&\")) {\n        if (pair) {\n            const [key] = pair.split(\"=\", 2);\n            if (key !== encodedName) {\n                searchPieces.push(pair);\n            }\n        }\n    }\n    if (encodedValue) {\n        searchPieces.push(`${encodedName}=${encodedValue}`);\n    }\n    urlParsed.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return urlParsed.toString();\n}\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nfunction getURLParameter(url, name) {\n    var _a;\n    const urlParsed = new URL(url);\n    return (_a = urlParsed.searchParams.get(name)) !== null && _a !== void 0 ? _a : undefined;\n}\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nfunction setURLHost(url, host) {\n    const urlParsed = new URL(url);\n    urlParsed.hostname = host;\n    return urlParsed.toString();\n}\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLPath(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.pathname;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLScheme(url) {\n    try {\n        const urlParsed = new URL(url);\n        return urlParsed.protocol.endsWith(\":\") ? urlParsed.protocol.slice(0, -1) : urlParsed.protocol;\n    }\n    catch (e) {\n        return undefined;\n    }\n}\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nfunction getURLPathAndQuery(url) {\n    const urlParsed = new URL(url);\n    const pathString = urlParsed.pathname;\n    if (!pathString) {\n        throw new RangeError(\"Invalid url without valid path.\");\n    }\n    let queryString = urlParsed.search || \"\";\n    queryString = queryString.trim();\n    if (queryString !== \"\") {\n        queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n    }\n    return `${pathString}${queryString}`;\n}\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nfunction getURLQueries(url) {\n    let queryString = new URL(url).search;\n    if (!queryString) {\n        return {};\n    }\n    queryString = queryString.trim();\n    queryString = queryString.startsWith(\"?\") ? queryString.substring(1) : queryString;\n    let querySubStrings = queryString.split(\"&\");\n    querySubStrings = querySubStrings.filter((value) => {\n        const indexOfEqual = value.indexOf(\"=\");\n        const lastIndexOfEqual = value.lastIndexOf(\"=\");\n        return (indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1);\n    });\n    const queries = {};\n    for (const querySubString of querySubStrings) {\n        const splitResults = querySubString.split(\"=\");\n        const key = splitResults[0];\n        const value = splitResults[1];\n        queries[key] = value;\n    }\n    return queries;\n}\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nfunction appendToURLQuery(url, queryParts) {\n    const urlParsed = new URL(url);\n    let query = urlParsed.search;\n    if (query) {\n        query += \"&\" + queryParts;\n    }\n    else {\n        query = queryParts;\n    }\n    urlParsed.search = query;\n    return urlParsed.toString();\n}\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nfunction truncatedISO8061Date(date, withMilliseconds = true) {\n    // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n    const dateString = date.toISOString();\n    return withMilliseconds\n        ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n        : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n/**\n * Base64 encode.\n *\n * @param content -\n */\nfunction base64encode(content) {\n    return !_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nfunction base64decode(encodedString) {\n    return !_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nfunction generateBlockID(blockIDPrefix, blockIndex) {\n    // To generate a 64 bytes base64 string, source string should be 48\n    const maxSourceStringLength = 48;\n    // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n    const maxBlockIndexLength = 6;\n    const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n    if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n        blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n    }\n    const res = blockIDPrefix +\n        padStart(blockIndex.toString(), maxSourceStringLength - blockIDPrefix.length, \"0\");\n    return base64encode(res);\n}\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nasync function delay(timeInMs, aborter, abortError) {\n    return new Promise((resolve, reject) => {\n        /* eslint-disable-next-line prefer-const */\n        let timeout;\n        const abortHandler = () => {\n            if (timeout !== undefined) {\n                clearTimeout(timeout);\n            }\n            reject(abortError);\n        };\n        const resolveHandler = () => {\n            if (aborter !== undefined) {\n                aborter.removeEventListener(\"abort\", abortHandler);\n            }\n            resolve();\n        };\n        timeout = setTimeout(resolveHandler, timeInMs);\n        if (aborter !== undefined) {\n            aborter.addEventListener(\"abort\", abortHandler);\n        }\n    });\n}\n/**\n * String.prototype.padStart()\n *\n * @param currentString -\n * @param targetLength -\n * @param padString -\n */\nfunction padStart(currentString, targetLength, padString = \" \") {\n    // @ts-expect-error: TS doesn't know this code needs to run downlevel sometimes\n    if (String.prototype.padStart) {\n        return currentString.padStart(targetLength, padString);\n    }\n    padString = padString || \" \";\n    if (currentString.length > targetLength) {\n        return currentString;\n    }\n    else {\n        targetLength = targetLength - currentString.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + currentString;\n    }\n}\nfunction sanitizeURL(url) {\n    let safeURL = url;\n    if (getURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.SIGNATURE)) {\n        safeURL = setURLParameter(safeURL, _constants__WEBPACK_IMPORTED_MODULE_2__.URLConstants.Parameters.SIGNATURE, \"*****\");\n    }\n    return safeURL;\n}\nfunction sanitizeHeaders(originalHeader) {\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)();\n    for (const [name, value] of originalHeader) {\n        if (name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.AUTHORIZATION.toLowerCase()) {\n            headers.set(name, \"*****\");\n        }\n        else if (name.toLowerCase() === _constants__WEBPACK_IMPORTED_MODULE_2__.HeaderConstants.X_MS_COPY_SOURCE) {\n            headers.set(name, sanitizeURL(value));\n        }\n        else {\n            headers.set(name, value);\n        }\n    }\n    return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nfunction iEqual(str1, str2) {\n    return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n/**\n * Extracts account name from the url\n * @param url - url to extract the account name from\n * @returns with the account name\n */\nfunction getAccountNameFromUrl(url) {\n    const parsedUrl = new URL(url);\n    let accountName;\n    try {\n        if (parsedUrl.hostname.split(\".\")[1] === \"blob\") {\n            // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n            accountName = parsedUrl.hostname.split(\".\")[0];\n        }\n        else if (isIpEndpointStyle(parsedUrl)) {\n            // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n            // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n            // .getPath() -> /devstoreaccount1/\n            accountName = parsedUrl.pathname.split(\"/\")[1];\n        }\n        else {\n            // Custom domain case: \"https://customdomain.com/containername/blob\".\n            accountName = \"\";\n        }\n        return accountName;\n    }\n    catch (error) {\n        throw new Error(\"Unable to extract accountName with provided information.\");\n    }\n}\nfunction isIpEndpointStyle(parsedUrl) {\n    const host = parsedUrl.host;\n    // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n    // Case 2: localhost(:port) or host.docker.internal, use broad regex to match port part.\n    // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n    // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n    return (/^.*:.*:.*$|^(localhost|host.docker.internal)(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(host) ||\n        (Boolean(parsedUrl.port) && _constants__WEBPACK_IMPORTED_MODULE_2__.PathStylePorts.includes(parsedUrl.port)));\n}\n/**\n * Convert Tags to encoded string.\n *\n * @param tags -\n */\nfunction toBlobTagsString(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const tagPairs = [];\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            tagPairs.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n        }\n    }\n    return tagPairs.join(\"&\");\n}\n/**\n * Convert Tags type to BlobTags.\n *\n * @param tags -\n */\nfunction toBlobTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {\n        blobTagSet: [],\n    };\n    for (const key in tags) {\n        if (Object.prototype.hasOwnProperty.call(tags, key)) {\n            const value = tags[key];\n            res.blobTagSet.push({\n                key,\n                value,\n            });\n        }\n    }\n    return res;\n}\n/**\n * Covert BlobTags to Tags type.\n *\n * @param tags -\n */\nfunction toTags(tags) {\n    if (tags === undefined) {\n        return undefined;\n    }\n    const res = {};\n    for (const blobTag of tags.blobTagSet) {\n        res[blobTag.key] = blobTag.value;\n    }\n    return res;\n}\n/**\n * Convert BlobQueryTextConfiguration to QuerySerialization type.\n *\n * @param textConfiguration -\n */\nfunction toQuerySerialization(textConfiguration) {\n    if (textConfiguration === undefined) {\n        return undefined;\n    }\n    switch (textConfiguration.kind) {\n        case \"csv\":\n            return {\n                format: {\n                    type: \"delimited\",\n                    delimitedTextConfiguration: {\n                        columnSeparator: textConfiguration.columnSeparator || \",\",\n                        fieldQuote: textConfiguration.fieldQuote || \"\",\n                        recordSeparator: textConfiguration.recordSeparator,\n                        escapeChar: textConfiguration.escapeCharacter || \"\",\n                        headersPresent: textConfiguration.hasHeaders || false,\n                    },\n                },\n            };\n        case \"json\":\n            return {\n                format: {\n                    type: \"json\",\n                    jsonTextConfiguration: {\n                        recordSeparator: textConfiguration.recordSeparator,\n                    },\n                },\n            };\n        case \"arrow\":\n            return {\n                format: {\n                    type: \"arrow\",\n                    arrowConfiguration: {\n                        schema: textConfiguration.schema,\n                    },\n                },\n            };\n        case \"parquet\":\n            return {\n                format: {\n                    type: \"parquet\",\n                },\n            };\n        default:\n            throw Error(\"Invalid BlobQueryTextConfiguration.\");\n    }\n}\nfunction parseObjectReplicationRecord(objectReplicationRecord) {\n    if (!objectReplicationRecord) {\n        return undefined;\n    }\n    if (\"policy-id\" in objectReplicationRecord) {\n        // If the dictionary contains a key with policy id, we are not required to do any parsing since\n        // the policy id should already be stored in the ObjectReplicationDestinationPolicyId.\n        return undefined;\n    }\n    const orProperties = [];\n    for (const key in objectReplicationRecord) {\n        const ids = key.split(\"_\");\n        const policyPrefix = \"or-\";\n        if (ids[0].startsWith(policyPrefix)) {\n            ids[0] = ids[0].substring(policyPrefix.length);\n        }\n        const rule = {\n            ruleId: ids[1],\n            replicationStatus: objectReplicationRecord[key],\n        };\n        const policyIndex = orProperties.findIndex((policy) => policy.policyId === ids[0]);\n        if (policyIndex > -1) {\n            orProperties[policyIndex].rules.push(rule);\n        }\n        else {\n            orProperties.push({\n                policyId: ids[0],\n                rules: [rule],\n            });\n        }\n    }\n    return orProperties;\n}\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nfunction attachCredential(thing, credential) {\n    thing.credential = credential;\n    return thing;\n}\nfunction httpAuthorizationToString(httpAuthorization) {\n    return httpAuthorization ? httpAuthorization.scheme + \" \" + httpAuthorization.value : undefined;\n}\nfunction BlobNameToString(name) {\n    if (name.encoded) {\n        return decodeURIComponent(name.content);\n    }\n    else {\n        return name.content;\n    }\n}\nfunction ConvertInternalResponseOfListBlobFlat(internalResponse) {\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nfunction ConvertInternalResponseOfListBlobHierarchy(internalResponse) {\n    var _a;\n    return Object.assign(Object.assign({}, internalResponse), { segment: {\n            blobPrefixes: (_a = internalResponse.segment.blobPrefixes) === null || _a === void 0 ? void 0 : _a.map((blobPrefixInternal) => {\n                const blobPrefix = Object.assign(Object.assign({}, blobPrefixInternal), { name: BlobNameToString(blobPrefixInternal.name) });\n                return blobPrefix;\n            }),\n            blobItems: internalResponse.segment.blobItems.map((blobItemInteral) => {\n                const blobItem = Object.assign(Object.assign({}, blobItemInteral), { name: BlobNameToString(blobItemInteral.name) });\n                return blobItem;\n            }),\n        } });\n}\nfunction* ExtractPageRangeInfoItems(getPageRangesSegment) {\n    let pageRange = [];\n    let clearRange = [];\n    if (getPageRangesSegment.pageRange)\n        pageRange = getPageRangesSegment.pageRange;\n    if (getPageRangesSegment.clearRange)\n        clearRange = getPageRangesSegment.clearRange;\n    let pageRangeIndex = 0;\n    let clearRangeIndex = 0;\n    while (pageRangeIndex < pageRange.length && clearRangeIndex < clearRange.length) {\n        if (pageRange[pageRangeIndex].start < clearRange[clearRangeIndex].start) {\n            yield {\n                start: pageRange[pageRangeIndex].start,\n                end: pageRange[pageRangeIndex].end,\n                isClear: false,\n            };\n            ++pageRangeIndex;\n        }\n        else {\n            yield {\n                start: clearRange[clearRangeIndex].start,\n                end: clearRange[clearRangeIndex].end,\n                isClear: true,\n            };\n            ++clearRangeIndex;\n        }\n    }\n    for (; pageRangeIndex < pageRange.length; ++pageRangeIndex) {\n        yield {\n            start: pageRange[pageRangeIndex].start,\n            end: pageRange[pageRangeIndex].end,\n            isClear: false,\n        };\n    }\n    for (; clearRangeIndex < clearRange.length; ++clearRangeIndex) {\n        yield {\n            start: clearRange[clearRangeIndex].start,\n            end: clearRange[clearRangeIndex].end,\n            isClear: true,\n        };\n    }\n}\n/**\n * Escape the blobName but keep path separator ('/').\n */\nfunction EscapePath(blobName) {\n    const split = blobName.split(\"/\");\n    for (let i = 0; i < split.length; i++) {\n        split[i] = encodeURIComponent(split[i]);\n    }\n    return split.join(\"/\");\n}\n/**\n * A typesafe helper for ensuring that a given response object has\n * the original _response attached.\n * @param response - A response object from calling a client operation\n * @returns The same object, but with known _response property\n */\nfunction assertResponse(response) {\n    if (`_response` in response) {\n        return response;\n    }\n    throw new TypeError(`Unexpected response object ${response}`);\n}\n//# sourceMappingURL=utils.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/utils.common.js?");

/***/ }),

/***/ "./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BufferScheduler: () => (/* binding */ BufferScheduler)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n// This file is used as a shim of \"BufferScheduler\" for some browser bundlers\n// when trying to bundle \"BufferScheduler\"\n// \"BufferScheduler\" class is only available in Node.js runtime\nclass BufferScheduler {\n}\n//# sourceMappingURL=BufferScheduler.browser.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/storage-blob/dist-esm/storage-common/src/BufferScheduler.browser.js?");

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nconst base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nconst ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/events/events.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/process/browser.js?");

/***/ }),

/***/ "./tig/blobuploader/styles/prosilver/template/js/index.js":
/*!****************************************************************!*\
  !*** ./tig/blobuploader/styles/prosilver/template/js/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _azure_storage_blob__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/storage-blob */ \"./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobServiceClient.js\");\n// index.js\n\n\n// Expose BlobServiceClient to the global scope\nwindow.BlobServiceClient = _azure_storage_blob__WEBPACK_IMPORTED_MODULE_0__.BlobServiceClient;\n\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./tig/blobuploader/styles/prosilver/template/js/index.js?");

/***/ }),

/***/ "./node_modules/@azure/abort-controller/dist/browser/AbortError.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist/browser/AbortError.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* binding */ AbortError)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nclass AbortError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"AbortError\";\n    }\n}\n//# sourceMappingURL=AbortError.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/abort-controller/dist/browser/AbortError.js?");

/***/ }),

/***/ "./node_modules/@azure/abort-controller/dist/browser/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/abort-controller/dist/browser/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbortError: () => (/* reexport safe */ _AbortError_js__WEBPACK_IMPORTED_MODULE_0__.AbortError)\n/* harmony export */ });\n/* harmony import */ var _AbortError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbortError.js */ \"./node_modules/@azure/abort-controller/dist/browser/AbortError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/abort-controller/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist/browser/azureKeyCredential.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/browser/azureKeyCredential.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureKeyCredential: () => (/* binding */ AzureKeyCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * A static-key-based credential that supports updating\n * the underlying key value.\n */\nclass AzureKeyCredential {\n    /**\n     * The value of the key to be used in authentication\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * Create an instance of an AzureKeyCredential for use\n     * with a service client.\n     *\n     * @param key - The initial value of the key to use in authentication\n     */\n    constructor(key) {\n        if (!key) {\n            throw new Error(\"key must be a non-empty string\");\n        }\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newKey - The new key value to be used\n     */\n    update(newKey) {\n        this._key = newKey;\n    }\n}\n//# sourceMappingURL=azureKeyCredential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-auth/dist/browser/azureKeyCredential.js?");

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureNamedKeyCredential: () => (/* binding */ AzureNamedKeyCredential),\n/* harmony export */   isNamedKeyCredential: () => (/* binding */ isNamedKeyCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A static name/key-based credential that supports updating\n * the underlying name and key values.\n */\nclass AzureNamedKeyCredential {\n    /**\n     * The value of the key to be used in authentication.\n     */\n    get key() {\n        return this._key;\n    }\n    /**\n     * The value of the name to be used in authentication.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Create an instance of an AzureNamedKeyCredential for use\n     * with a service client.\n     *\n     * @param name - The initial value of the name to use in authentication.\n     * @param key - The initial value of the key to use in authentication.\n     */\n    constructor(name, key) {\n        if (!name || !key) {\n            throw new TypeError(\"name and key must be non-empty strings\");\n        }\n        this._name = name;\n        this._key = key;\n    }\n    /**\n     * Change the value of the key.\n     *\n     * Updates will take effect upon the next request after\n     * updating the key value.\n     *\n     * @param newName - The new name value to be used.\n     * @param newKey - The new key value to be used.\n     */\n    update(newName, newKey) {\n        if (!newName || !newKey) {\n            throw new TypeError(\"newName and newKey must be non-empty strings\");\n        }\n        this._name = newName;\n        this._key = newKey;\n    }\n}\n/**\n * Tests an object to determine whether it implements NamedKeyCredential.\n *\n * @param credential - The assumed NamedKeyCredential to be tested.\n */\nfunction isNamedKeyCredential(credential) {\n    return ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"name\", \"key\"]) &&\n        typeof credential.key === \"string\" &&\n        typeof credential.name === \"string\");\n}\n//# sourceMappingURL=azureNamedKeyCredential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js?");

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist/browser/azureSASCredential.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/browser/azureSASCredential.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureSASCredential: () => (/* binding */ AzureSASCredential),\n/* harmony export */   isSASCredential: () => (/* binding */ isSASCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * A static-signature-based credential that supports updating\n * the underlying signature value.\n */\nclass AzureSASCredential {\n    /**\n     * The value of the shared access signature to be used in authentication\n     */\n    get signature() {\n        return this._signature;\n    }\n    /**\n     * Create an instance of an AzureSASCredential for use\n     * with a service client.\n     *\n     * @param signature - The initial value of the shared access signature to use in authentication\n     */\n    constructor(signature) {\n        if (!signature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = signature;\n    }\n    /**\n     * Change the value of the signature.\n     *\n     * Updates will take effect upon the next request after\n     * updating the signature value.\n     *\n     * @param newSignature - The new shared access signature value to be used\n     */\n    update(newSignature) {\n        if (!newSignature) {\n            throw new Error(\"shared access signature must be a non-empty string\");\n        }\n        this._signature = newSignature;\n    }\n}\n/**\n * Tests an object to determine whether it implements SASCredential.\n *\n * @param credential - The assumed SASCredential to be tested.\n */\nfunction isSASCredential(credential) {\n    return ((0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"signature\"]) && typeof credential.signature === \"string\");\n}\n//# sourceMappingURL=azureSASCredential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-auth/dist/browser/azureSASCredential.js?");

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist/browser/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/browser/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureKeyCredential: () => (/* reexport safe */ _azureKeyCredential_js__WEBPACK_IMPORTED_MODULE_0__.AzureKeyCredential),\n/* harmony export */   AzureNamedKeyCredential: () => (/* reexport safe */ _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__.AzureNamedKeyCredential),\n/* harmony export */   AzureSASCredential: () => (/* reexport safe */ _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__.AzureSASCredential),\n/* harmony export */   isKeyCredential: () => (/* reexport safe */ _keyCredential_js__WEBPACK_IMPORTED_MODULE_1__.isKeyCredential),\n/* harmony export */   isNamedKeyCredential: () => (/* reexport safe */ _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__.isNamedKeyCredential),\n/* harmony export */   isSASCredential: () => (/* reexport safe */ _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__.isSASCredential),\n/* harmony export */   isTokenCredential: () => (/* reexport safe */ _tokenCredential_js__WEBPACK_IMPORTED_MODULE_4__.isTokenCredential)\n/* harmony export */ });\n/* harmony import */ var _azureKeyCredential_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./azureKeyCredential.js */ \"./node_modules/@azure/core-auth/dist/browser/azureKeyCredential.js\");\n/* harmony import */ var _keyCredential_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keyCredential.js */ \"./node_modules/@azure/core-auth/dist/browser/keyCredential.js\");\n/* harmony import */ var _azureNamedKeyCredential_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./azureNamedKeyCredential.js */ \"./node_modules/@azure/core-auth/dist/browser/azureNamedKeyCredential.js\");\n/* harmony import */ var _azureSASCredential_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./azureSASCredential.js */ \"./node_modules/@azure/core-auth/dist/browser/azureSASCredential.js\");\n/* harmony import */ var _tokenCredential_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tokenCredential.js */ \"./node_modules/@azure/core-auth/dist/browser/tokenCredential.js\");\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-auth/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist/browser/keyCredential.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/browser/keyCredential.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isKeyCredential: () => (/* binding */ isKeyCredential)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Tests an object to determine whether it implements KeyCredential.\n *\n * @param credential - The assumed KeyCredential to be tested.\n */\nfunction isKeyCredential(credential) {\n    return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObjectWithProperties)(credential, [\"key\"]) && typeof credential.key === \"string\";\n}\n//# sourceMappingURL=keyCredential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-auth/dist/browser/keyCredential.js?");

/***/ }),

/***/ "./node_modules/@azure/core-auth/dist/browser/tokenCredential.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-auth/dist/browser/tokenCredential.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBearerToken: () => (/* binding */ isBearerToken),\n/* harmony export */   isPopToken: () => (/* binding */ isPopToken),\n/* harmony export */   isTokenCredential: () => (/* binding */ isTokenCredential)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is bearer type or not\n */\nfunction isBearerToken(accessToken) {\n    return !accessToken.tokenType || accessToken.tokenType === \"Bearer\";\n}\n/**\n * @internal\n * @param accessToken - Access token\n * @returns Whether a token is Pop token or not\n */\nfunction isPopToken(accessToken) {\n    return accessToken.tokenType === \"pop\";\n}\n/**\n * Tests an object to determine whether it implements TokenCredential.\n *\n * @param credential - The assumed TokenCredential to be tested.\n */\nfunction isTokenCredential(credential) {\n    // Check for an object with a 'getToken' function and possibly with\n    // a 'signRequest' function.  We do this check to make sure that\n    // a ServiceClientCredentials implementor (like TokenClientCredentials\n    // in ms-rest-nodeauth) doesn't get mistaken for a TokenCredential if\n    // it doesn't actually implement TokenCredential also.\n    const castCredential = credential;\n    return (castCredential &&\n        typeof castCredential.getToken === \"function\" &&\n        (castCredential.signRequest === undefined || castCredential.getToken.length > 0));\n}\n//# sourceMappingURL=tokenCredential.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-auth/dist/browser/tokenCredential.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* binding */ authorizeRequestOnClaimChallenge),\n/* harmony export */   parseCAEChallenge: () => (/* binding */ parseCAEChallenge)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"./node_modules/@azure/core-client/dist/browser/log.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base64.js */ \"./node_modules/@azure/core-client/dist/browser/base64.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nfunction parseCAEChallenge(challenges) {\n    const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n    return bearerChallenges.map((challenge) => {\n        const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n        const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')));\n        // Key-value pairs to plain object:\n        return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n    });\n}\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nasync function authorizeRequestOnClaimChallenge(onChallengeOptions) {\n    const { scopes, response } = onChallengeOptions;\n    const logger = onChallengeOptions.logger || _log_js__WEBPACK_IMPORTED_MODULE_0__.logger;\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (!challenge) {\n        logger.info(`The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const challenges = parseCAEChallenge(challenge) || [];\n    const parsedChallenge = challenges.find((x) => x.claims);\n    if (!parsedChallenge) {\n        logger.info(`The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`);\n        return false;\n    }\n    const accessToken = await onChallengeOptions.getAccessToken(parsedChallenge.scope ? [parsedChallenge.scope] : scopes, {\n        claims: (0,_base64_js__WEBPACK_IMPORTED_MODULE_1__.decodeStringToString)(parsedChallenge.claims),\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    return true;\n}\n//# sourceMappingURL=authorizeRequestOnClaimChallenge.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* binding */ authorizeRequestOnTenantChallenge)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n    DefaultScope: \"/.default\",\n    /**\n     * Defines constants for use with HTTP headers.\n     */\n    HeaderConstants: {\n        /**\n         * The Authorization header.\n         */\n        AUTHORIZATION: \"authorization\",\n    },\n};\nfunction isUuid(text) {\n    return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(text);\n}\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://docs.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nconst authorizeRequestOnTenantChallenge = async (challengeOptions) => {\n    const requestOptions = requestToOptions(challengeOptions.request);\n    const challenge = getChallenge(challengeOptions.response);\n    if (challenge) {\n        const challengeInfo = parseChallenge(challenge);\n        const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n        const tenantId = extractTenantId(challengeInfo);\n        if (!tenantId) {\n            return false;\n        }\n        const accessToken = await challengeOptions.getAccessToken(challengeScopes, Object.assign(Object.assign({}, requestOptions), { tenantId }));\n        if (!accessToken) {\n            return false;\n        }\n        challengeOptions.request.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${accessToken.token}`);\n        return true;\n    }\n    return false;\n};\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo) {\n    const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n    const pathSegments = parsedAuthUri.pathname.split(\"/\");\n    const tenantId = pathSegments[1];\n    if (tenantId && isUuid(tenantId)) {\n        return tenantId;\n    }\n    return undefined;\n}\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(challengeOptions, challengeInfo) {\n    if (!challengeInfo.resource_id) {\n        return challengeOptions.scopes;\n    }\n    const challengeScopes = new URL(challengeInfo.resource_id);\n    challengeScopes.pathname = Constants.DefaultScope;\n    let scope = challengeScopes.toString();\n    if (scope === \"https://disk.azure.com/.default\") {\n        // the extra slash is required by the service\n        scope = \"https://disk.azure.com//.default\";\n    }\n    return [scope];\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response) {\n    const challenge = response.headers.get(\"WWW-Authenticate\");\n    if (response.status === 401 && challenge) {\n        return challenge;\n    }\n    return;\n}\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge) {\n    const bearerChallenge = challenge.slice(\"Bearer \".length);\n    const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) => (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")));\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => (Object.assign(Object.assign({}, a), b)), {});\n}\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request) {\n    return {\n        abortSignal: request.abortSignal,\n        requestOptions: {\n            timeout: request.timeout,\n        },\n        tracingOptions: request.tracingOptions,\n    };\n}\n//# sourceMappingURL=authorizeRequestOnTenantChallenge.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/base64.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/base64.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeString: () => (/* binding */ decodeString),\n/* harmony export */   decodeStringToString: () => (/* binding */ decodeStringToString),\n/* harmony export */   encodeByteArray: () => (/* binding */ encodeByteArray),\n/* harmony export */   encodeString: () => (/* binding */ encodeString)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nfunction encodeString(value) {\n    return btoa(value);\n}\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nfunction encodeByteArray(value) {\n    let str = \"\";\n    for (let i = 0; i < value.length; i++) {\n        str += String.fromCharCode(value[i]);\n    }\n    return btoa(str);\n}\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeString(value) {\n    const byteString = atob(value);\n    const arr = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        arr[i] = byteString.charCodeAt(i);\n    }\n    return arr;\n}\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nfunction decodeStringToString(value) {\n    return atob(value);\n}\n//# sourceMappingURL=base64-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/base64.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/deserializationPolicy.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/deserializationPolicy.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   deserializationPolicy: () => (/* binding */ deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* binding */ deserializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"./node_modules/@azure/core-client/dist/browser/interfaces.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"./node_modules/@azure/core-client/dist/browser/serializer.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operationHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/operationHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nconst deserializationPolicyName = \"deserializationPolicy\";\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nfunction deserializationPolicy(options = {}) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const jsonContentTypes = (_b = (_a = options.expectedContentTypes) === null || _a === void 0 ? void 0 : _a.json) !== null && _b !== void 0 ? _b : defaultJsonContentTypes;\n    const xmlContentTypes = (_d = (_c = options.expectedContentTypes) === null || _c === void 0 ? void 0 : _c.xml) !== null && _d !== void 0 ? _d : defaultXmlContentTypes;\n    const parseXML = options.parseXML;\n    const serializerOptions = options.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_e = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _e !== void 0 ? _e : \"\",\n            includeRoot: (_f = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _f !== void 0 ? _f : false,\n            xmlCharKey: (_g = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _g !== void 0 ? _g : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        },\n    };\n    return {\n        name: deserializationPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, updatedOptions, parseXML);\n        },\n    };\n}\nfunction getOperationResponseMap(parsedResponse) {\n    let result;\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (operationSpec) {\n        if (!(operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter)) {\n            result = operationSpec.responses[parsedResponse.status];\n        }\n        else {\n            result = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationResponseGetter(operationSpec, parsedResponse);\n        }\n    }\n    return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n    const request = parsedResponse.request;\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(request);\n    const shouldDeserialize = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.shouldDeserialize;\n    let result;\n    if (shouldDeserialize === undefined) {\n        result = true;\n    }\n    else if (typeof shouldDeserialize === \"boolean\") {\n        result = shouldDeserialize;\n    }\n    else {\n        result = shouldDeserialize(parsedResponse);\n    }\n    return result;\n}\nasync function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options, parseXML) {\n    const parsedResponse = await parse(jsonContentTypes, xmlContentTypes, response, options, parseXML);\n    if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n    }\n    const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getOperationRequestInfo)(parsedResponse.request);\n    const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n    }\n    const responseSpec = getOperationResponseMap(parsedResponse);\n    const { error, shouldReturnResponse } = handleErrorResponse(parsedResponse, operationSpec, responseSpec, options);\n    if (error) {\n        throw error;\n    }\n    else if (shouldReturnResponse) {\n        return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n            let valueToDeserialize = parsedResponse.parsedBody;\n            if (operationSpec.isXML && responseSpec.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                valueToDeserialize =\n                    typeof valueToDeserialize === \"object\"\n                        ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName]\n                        : [];\n            }\n            try {\n                parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n            }\n            catch (deserializeError) {\n                const restError = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(`Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, {\n                    statusCode: parsedResponse.status,\n                    request: parsedResponse.request,\n                    response: parsedResponse,\n                });\n                throw restError;\n            }\n        }\n        else if (operationSpec.httpMethod === \"HEAD\") {\n            // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n            parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n        if (responseSpec.headersMapper) {\n            parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\", { xml: {}, ignoreUnknownProperties: true });\n        }\n    }\n    return parsedResponse;\n}\nfunction isOperationSpecEmpty(operationSpec) {\n    const expectedStatusCodes = Object.keys(operationSpec.responses);\n    return (expectedStatusCodes.length === 0 ||\n        (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\"));\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec, options) {\n    var _a;\n    const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n    const isExpectedStatusCode = isOperationSpecEmpty(operationSpec)\n        ? isSuccessByStatus\n        : !!responseSpec;\n    if (isExpectedStatusCode) {\n        if (responseSpec) {\n            if (!responseSpec.isError) {\n                return { error: null, shouldReturnResponse: false };\n            }\n        }\n        else {\n            return { error: null, shouldReturnResponse: false };\n        }\n    }\n    const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n    const initialErrorMessage = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status))\n        ? `Unexpected status code: ${parsedResponse.status}`\n        : parsedResponse.bodyAsText;\n    const error = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(initialErrorMessage, {\n        statusCode: parsedResponse.status,\n        request: parsedResponse.request,\n        response: parsedResponse,\n    });\n    // If the item failed but there's no error spec or default spec to deserialize the error,\n    // we should fail so we just throw the parsed response\n    if (!errorResponseSpec) {\n        throw error;\n    }\n    const defaultBodyMapper = errorResponseSpec.bodyMapper;\n    const defaultHeadersMapper = errorResponseSpec.headersMapper;\n    try {\n        // If error response has a body, try to deserialize it using default body mapper.\n        // Then try to extract error code & message from it\n        if (parsedResponse.parsedBody) {\n            const parsedBody = parsedResponse.parsedBody;\n            let deserializedError;\n            if (defaultBodyMapper) {\n                let valueToDeserialize = parsedBody;\n                if (operationSpec.isXML && defaultBodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                    valueToDeserialize = [];\n                    const elementName = defaultBodyMapper.xmlElementName;\n                    if (typeof parsedBody === \"object\" && elementName) {\n                        valueToDeserialize = parsedBody[elementName];\n                    }\n                }\n                deserializedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\", options);\n            }\n            const internalError = parsedBody.error || deserializedError || parsedBody;\n            error.code = internalError.code;\n            if (internalError.message) {\n                error.message = internalError.message;\n            }\n            if (defaultBodyMapper) {\n                error.response.parsedBody = deserializedError;\n            }\n        }\n        // If error response has headers, try to deserialize it using default header mapper\n        if (parsedResponse.headers && defaultHeadersMapper) {\n            error.response.parsedHeaders =\n                operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJSON(), \"operationRes.parsedHeaders\");\n        }\n    }\n    catch (defaultError) {\n        error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n    }\n    return { error, shouldReturnResponse: false };\n}\nasync function parse(jsonContentTypes, xmlContentTypes, operationResponse, opts, parseXML) {\n    var _a;\n    if (!((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) &&\n        operationResponse.bodyAsText) {\n        const text = operationResponse.bodyAsText;\n        const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n        const contentComponents = !contentType\n            ? []\n            : contentType.split(\";\").map((component) => component.toLowerCase());\n        try {\n            if (contentComponents.length === 0 ||\n                contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)) {\n                operationResponse.parsedBody = JSON.parse(text);\n                return operationResponse;\n            }\n            else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n                if (!parseXML) {\n                    throw new Error(\"Parsing XML not supported.\");\n                }\n                const body = await parseXML(text, opts.xml);\n                operationResponse.parsedBody = body;\n                return operationResponse;\n            }\n        }\n        catch (err) {\n            const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n            const errCode = err.code || _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError.PARSE_ERROR;\n            const e = new _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.RestError(msg, {\n                code: errCode,\n                statusCode: operationResponse.status,\n                request: operationResponse.request,\n                response: operationResponse,\n            });\n            throw e;\n        }\n    }\n    return operationResponse;\n}\n//# sourceMappingURL=deserializationPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/deserializationPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/httpClientCache.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/httpClientCache.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCachedDefaultHttpClient: () => (/* binding */ getCachedDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nlet cachedHttpClient;\nfunction getCachedDefaultHttpClient() {\n    if (!cachedHttpClient) {\n        cachedHttpClient = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createDefaultHttpClient)();\n    }\n    return cachedHttpClient;\n}\n//# sourceMappingURL=httpClientCache.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/httpClientCache.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames),\n/* harmony export */   ServiceClient: () => (/* reexport safe */ _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__.ServiceClient),\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _interfaces_js__WEBPACK_IMPORTED_MODULE_3__.XML_CHARKEY),\n/* harmony export */   authorizeRequestOnClaimChallenge: () => (/* reexport safe */ _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__.authorizeRequestOnClaimChallenge),\n/* harmony export */   authorizeRequestOnTenantChallenge: () => (/* reexport safe */ _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__.authorizeRequestOnTenantChallenge),\n/* harmony export */   createClientPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_2__.createClientPipeline),\n/* harmony export */   createSerializer: () => (/* reexport safe */ _serializer_js__WEBPACK_IMPORTED_MODULE_0__.createSerializer),\n/* harmony export */   deserializationPolicy: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicy),\n/* harmony export */   deserializationPolicyName: () => (/* reexport safe */ _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__.deserializationPolicyName),\n/* harmony export */   serializationPolicy: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* reexport safe */ _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__.serializationPolicyName)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"./node_modules/@azure/core-client/dist/browser/serializer.js\");\n/* harmony import */ var _serviceClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./serviceClient.js */ \"./node_modules/@azure/core-client/dist/browser/serviceClient.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pipeline.js */ \"./node_modules/@azure/core-client/dist/browser/pipeline.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaces.js */ \"./node_modules/@azure/core-client/dist/browser/interfaces.js\");\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"./node_modules/@azure/core-client/dist/browser/deserializationPolicy.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./serializationPolicy.js */ \"./node_modules/@azure/core-client/dist/browser/serializationPolicy.js\");\n/* harmony import */ var _authorizeRequestOnClaimChallenge_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./authorizeRequestOnClaimChallenge.js */ \"./node_modules/@azure/core-client/dist/browser/authorizeRequestOnClaimChallenge.js\");\n/* harmony import */ var _authorizeRequestOnTenantChallenge_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./authorizeRequestOnTenantChallenge.js */ \"./node_modules/@azure/core-client/dist/browser/authorizeRequestOnTenantChallenge.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/interfaceHelpers.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/interfaceHelpers.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getPathStringFromParameter: () => (/* binding */ getPathStringFromParameter),\n/* harmony export */   getStreamingResponseStatusCodes: () => (/* binding */ getStreamingResponseStatusCodes)\n/* harmony export */ });\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./serializer.js */ \"./node_modules/@azure/core-client/dist/browser/serializer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nfunction getStreamingResponseStatusCodes(operationSpec) {\n    const result = new Set();\n    for (const statusCode in operationSpec.responses) {\n        const operationResponse = operationSpec.responses[statusCode];\n        if (operationResponse.bodyMapper &&\n            operationResponse.bodyMapper.type.name === _serializer_js__WEBPACK_IMPORTED_MODULE_0__.MapperTypeNames.Stream) {\n            result.add(Number(statusCode));\n        }\n    }\n    return result;\n}\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nfunction getPathStringFromParameter(parameter) {\n    const { parameterPath, mapper } = parameter;\n    let result;\n    if (typeof parameterPath === \"string\") {\n        result = parameterPath;\n    }\n    else if (Array.isArray(parameterPath)) {\n        result = parameterPath.join(\".\");\n    }\n    else {\n        result = mapper.serializedName;\n    }\n    return result;\n}\n//# sourceMappingURL=interfaceHelpers.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/interfaceHelpers.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/interfaces.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/interfaces.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n//# sourceMappingURL=interfaces.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/interfaces.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/log.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"./node_modules/@azure/logger/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-client\");\n//# sourceMappingURL=log.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/log.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/operationHelpers.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/operationHelpers.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getOperationArgumentValueFromParameter: () => (/* binding */ getOperationArgumentValueFromParameter),\n/* harmony export */   getOperationRequestInfo: () => (/* binding */ getOperationRequestInfo)\n/* harmony export */ });\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./state.js */ \"./node_modules/@azure/core-client/dist/browser/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nfunction getOperationArgumentValueFromParameter(operationArguments, parameter, fallbackObject) {\n    let parameterPath = parameter.parameterPath;\n    const parameterMapper = parameter.mapper;\n    let value;\n    if (typeof parameterPath === \"string\") {\n        parameterPath = [parameterPath];\n    }\n    if (Array.isArray(parameterPath)) {\n        if (parameterPath.length > 0) {\n            if (parameterMapper.isConstant) {\n                value = parameterMapper.defaultValue;\n            }\n            else {\n                let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n                if (!propertySearchResult.propertyFound && fallbackObject) {\n                    propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n                }\n                let useDefaultValue = false;\n                if (!propertySearchResult.propertyFound) {\n                    useDefaultValue =\n                        parameterMapper.required ||\n                            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n                }\n                value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n            }\n        }\n    }\n    else {\n        if (parameterMapper.required) {\n            value = {};\n        }\n        for (const propertyName in parameterPath) {\n            const propertyMapper = parameterMapper.type.modelProperties[propertyName];\n            const propertyPath = parameterPath[propertyName];\n            const propertyValue = getOperationArgumentValueFromParameter(operationArguments, {\n                parameterPath: propertyPath,\n                mapper: propertyMapper,\n            }, fallbackObject);\n            if (propertyValue !== undefined) {\n                if (!value) {\n                    value = {};\n                }\n                value[propertyName] = propertyValue;\n            }\n        }\n    }\n    return value;\n}\nfunction getPropertyFromParameterPath(parent, parameterPath) {\n    const result = { propertyFound: false };\n    let i = 0;\n    for (; i < parameterPath.length; ++i) {\n        const parameterPathPart = parameterPath[i];\n        // Make sure to check inherited properties too, so don't use hasOwnProperty().\n        if (parent && parameterPathPart in parent) {\n            parent = parent[parameterPathPart];\n        }\n        else {\n            break;\n        }\n    }\n    if (i === parameterPath.length) {\n        result.propertyValue = parent;\n        result.propertyFound = true;\n    }\n    return result;\n}\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction hasOriginalRequest(request) {\n    return originalRequestSymbol in request;\n}\nfunction getOperationRequestInfo(request) {\n    if (hasOriginalRequest(request)) {\n        return getOperationRequestInfo(request[originalRequestSymbol]);\n    }\n    let info = _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.get(request);\n    if (!info) {\n        info = {};\n        _state_js__WEBPACK_IMPORTED_MODULE_0__.state.operationRequestMap.set(request, info);\n    }\n    return info;\n}\n//# sourceMappingURL=operationHelpers.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/operationHelpers.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/pipeline.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/pipeline.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClientPipeline: () => (/* binding */ createClientPipeline)\n/* harmony export */ });\n/* harmony import */ var _deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deserializationPolicy.js */ \"./node_modules/@azure/core-client/dist/browser/deserializationPolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializationPolicy.js */ \"./node_modules/@azure/core-client/dist/browser/serializationPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nfunction createClientPipeline(options = {}) {\n    const pipeline = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions)(options !== null && options !== void 0 ? options : {});\n    if (options.credentialOptions) {\n        pipeline.addPolicy((0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.bearerTokenAuthenticationPolicy)({\n            credential: options.credentialOptions.credential,\n            scopes: options.credentialOptions.credentialScopes,\n        }));\n    }\n    pipeline.addPolicy((0,_serializationPolicy_js__WEBPACK_IMPORTED_MODULE_2__.serializationPolicy)(options.serializationOptions), { phase: \"Serialize\" });\n    pipeline.addPolicy((0,_deserializationPolicy_js__WEBPACK_IMPORTED_MODULE_0__.deserializationPolicy)(options.deserializationOptions), {\n        phase: \"Deserialize\",\n    });\n    return pipeline;\n}\n//# sourceMappingURL=pipeline.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/pipeline.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/serializationPolicy.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/serializationPolicy.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   serializationPolicy: () => (/* binding */ serializationPolicy),\n/* harmony export */   serializationPolicyName: () => (/* binding */ serializationPolicyName),\n/* harmony export */   serializeHeaders: () => (/* binding */ serializeHeaders),\n/* harmony export */   serializeRequestBody: () => (/* binding */ serializeRequestBody)\n/* harmony export */ });\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interfaces.js */ \"./node_modules/@azure/core-client/dist/browser/interfaces.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operationHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/operationHelpers.js\");\n/* harmony import */ var _serializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./serializer.js */ \"./node_modules/@azure/core-client/dist/browser/serializer.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nconst serializationPolicyName = \"serializationPolicy\";\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nfunction serializationPolicy(options = {}) {\n    const stringifyXML = options.stringifyXML;\n    return {\n        name: serializationPolicyName,\n        async sendRequest(request, next) {\n            const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationRequestInfo)(request);\n            const operationSpec = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationSpec;\n            const operationArguments = operationInfo === null || operationInfo === void 0 ? void 0 : operationInfo.operationArguments;\n            if (operationSpec && operationArguments) {\n                serializeHeaders(request, operationArguments, operationSpec);\n                serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n            }\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction serializeHeaders(request, operationArguments, operationSpec) {\n    var _a, _b;\n    if (operationSpec.headerParameters) {\n        for (const headerParameter of operationSpec.headerParameters) {\n            let headerValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, headerParameter);\n            if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n                headerValue = operationSpec.serializer.serialize(headerParameter.mapper, headerValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter));\n                const headerCollectionPrefix = headerParameter.mapper\n                    .headerCollectionPrefix;\n                if (headerCollectionPrefix) {\n                    for (const key of Object.keys(headerValue)) {\n                        request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n                    }\n                }\n                else {\n                    request.headers.set(headerParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(headerParameter), headerValue);\n                }\n            }\n        }\n    }\n    const customHeaders = (_b = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.requestOptions) === null || _b === void 0 ? void 0 : _b.customHeaders;\n    if (customHeaders) {\n        for (const customHeaderName of Object.keys(customHeaders)) {\n            request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n        }\n    }\n}\n/**\n * @internal\n */\nfunction serializeRequestBody(request, operationArguments, operationSpec, stringifyXML = function () {\n    throw new Error(\"XML serialization unsupported!\");\n}) {\n    var _a, _b, _c, _d, _e;\n    const serializerOptions = (_a = operationArguments.options) === null || _a === void 0 ? void 0 : _a.serializerOptions;\n    const updatedOptions = {\n        xml: {\n            rootName: (_b = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.rootName) !== null && _b !== void 0 ? _b : \"\",\n            includeRoot: (_c = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.includeRoot) !== null && _c !== void 0 ? _c : false,\n            xmlCharKey: (_d = serializerOptions === null || serializerOptions === void 0 ? void 0 : serializerOptions.xml.xmlCharKey) !== null && _d !== void 0 ? _d : _interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        },\n    };\n    const xmlCharKey = updatedOptions.xml.xmlCharKey;\n    if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n        request.body = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, operationSpec.requestBody);\n        const bodyMapper = operationSpec.requestBody.mapper;\n        const { required, serializedName, xmlName, xmlElementName, xmlNamespace, xmlNamespacePrefix, nullable, } = bodyMapper;\n        const typeName = bodyMapper.type.name;\n        try {\n            if ((request.body !== undefined && request.body !== null) ||\n                (nullable && request.body === null) ||\n                required) {\n                const requestBodyParameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(operationSpec.requestBody);\n                request.body = operationSpec.serializer.serialize(bodyMapper, request.body, requestBodyParameterPathString, updatedOptions);\n                const isStream = typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Stream;\n                if (operationSpec.isXML) {\n                    const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n                    const value = getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, request.body, updatedOptions);\n                    if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.Sequence) {\n                        request.body = stringifyXML(prepareXMLRootList(value, xmlElementName || xmlName || serializedName, xmlnsKey, xmlNamespace), { rootName: xmlName || serializedName, xmlCharKey });\n                    }\n                    else if (!isStream) {\n                        request.body = stringifyXML(value, {\n                            rootName: xmlName || serializedName,\n                            xmlCharKey,\n                        });\n                    }\n                }\n                else if (typeName === _serializer_js__WEBPACK_IMPORTED_MODULE_2__.MapperTypeNames.String &&\n                    (((_e = operationSpec.contentType) === null || _e === void 0 ? void 0 : _e.match(\"text/plain\")) || operationSpec.mediaType === \"text\")) {\n                    // the String serializer has validated that request body is a string\n                    // so just send the string.\n                    return;\n                }\n                else if (!isStream) {\n                    request.body = JSON.stringify(request.body);\n                }\n            }\n        }\n        catch (error) {\n            throw new Error(`Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(serializedName, undefined, \"  \")}.`);\n        }\n    }\n    else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n        request.formData = {};\n        for (const formDataParameter of operationSpec.formDataParameters) {\n            const formDataParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getOperationArgumentValueFromParameter)(operationArguments, formDataParameter);\n            if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n                const formDataParameterPropertyName = formDataParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter);\n                request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(formDataParameter.mapper, formDataParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_3__.getPathStringFromParameter)(formDataParameter), updatedOptions);\n            }\n        }\n    }\n}\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(xmlNamespace, xmlnsKey, typeName, serializedValue, options) {\n    // Composite and Sequence schemas already got their root namespace set during serialization\n    // We just need to add xmlns to the other schema types\n    if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n        const result = {};\n        result[options.xml.xmlCharKey] = serializedValue;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n        return result;\n    }\n    return serializedValue;\n}\nfunction prepareXMLRootList(obj, elementName, xmlNamespaceKey, xmlNamespace) {\n    if (!Array.isArray(obj)) {\n        obj = [obj];\n    }\n    if (!xmlNamespaceKey || !xmlNamespace) {\n        return { [elementName]: obj };\n    }\n    const result = { [elementName]: obj };\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n    return result;\n}\n//# sourceMappingURL=serializationPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/serializationPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/serializer.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/serializer.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapperTypeNames: () => (/* binding */ MapperTypeNames),\n/* harmony export */   createSerializer: () => (/* binding */ createSerializer)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"./node_modules/@azure/core-client/dist/browser/base64.js\");\n/* harmony import */ var _interfaces_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaces.js */ \"./node_modules/@azure/core-client/dist/browser/interfaces.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@azure/core-client/dist/browser/utils.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\nclass SerializerImpl {\n    constructor(modelMappers = {}, isXML = false) {\n        this.modelMappers = modelMappers;\n        this.isXML = isXML;\n    }\n    /**\n     * @deprecated Removing the constraints validation on client side.\n     */\n    validateConstraints(mapper, value, objectName) {\n        const failValidation = (constraintName, constraintValue) => {\n            throw new Error(`\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`);\n        };\n        if (mapper.constraints && value !== undefined && value !== null) {\n            const { ExclusiveMaximum, ExclusiveMinimum, InclusiveMaximum, InclusiveMinimum, MaxItems, MaxLength, MinItems, MinLength, MultipleOf, Pattern, UniqueItems, } = mapper.constraints;\n            if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n                failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n            }\n            if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n                failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n            }\n            if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n                failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n            }\n            if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n                failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n            }\n            if (MaxItems !== undefined && value.length > MaxItems) {\n                failValidation(\"MaxItems\", MaxItems);\n            }\n            if (MaxLength !== undefined && value.length > MaxLength) {\n                failValidation(\"MaxLength\", MaxLength);\n            }\n            if (MinItems !== undefined && value.length < MinItems) {\n                failValidation(\"MinItems\", MinItems);\n            }\n            if (MinLength !== undefined && value.length < MinLength) {\n                failValidation(\"MinLength\", MinLength);\n            }\n            if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n                failValidation(\"MultipleOf\", MultipleOf);\n            }\n            if (Pattern) {\n                const pattern = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n                if (typeof value !== \"string\" || value.match(pattern) === null) {\n                    failValidation(\"Pattern\", Pattern);\n                }\n            }\n            if (UniqueItems &&\n                value.some((item, i, ar) => ar.indexOf(item) !== i)) {\n                failValidation(\"UniqueItems\", UniqueItems);\n            }\n        }\n    }\n    /**\n     * Serialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param object - A valid Javascript object to be serialized\n     *\n     * @param objectName - Name of the serialized object\n     *\n     * @param options - additional options to serialization\n     *\n     * @returns A valid serialized Javascript object\n     */\n    serialize(mapper, object, objectName, options = { xml: {} }) {\n        var _a, _b, _c;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n            },\n        };\n        let payload = {};\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Sequence$/i) !== null) {\n            payload = [];\n        }\n        if (mapper.isConstant) {\n            object = mapper.defaultValue;\n        }\n        // This table of allowed values should help explain\n        // the mapper.required and mapper.nullable properties.\n        // X means \"neither undefined or null are allowed\".\n        //           || required\n        //           || true      | false\n        //  nullable || ==========================\n        //      true || null      | undefined/null\n        //     false || X         | undefined\n        // undefined || X         | undefined/null\n        const { required, nullable } = mapper;\n        if (required && nullable && object === undefined) {\n            throw new Error(`${objectName} cannot be undefined.`);\n        }\n        if (required && !nullable && (object === undefined || object === null)) {\n            throw new Error(`${objectName} cannot be null or undefined.`);\n        }\n        if (!required && nullable === false && object === null) {\n            throw new Error(`${objectName} cannot be null.`);\n        }\n        if (object === undefined || object === null) {\n            payload = object;\n        }\n        else {\n            if (mapperType.match(/^any$/i) !== null) {\n                payload = object;\n            }\n            else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n                payload = serializeBasicTypes(mapperType, objectName, object);\n            }\n            else if (mapperType.match(/^Enum$/i) !== null) {\n                const enumMapper = mapper;\n                payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n            }\n            else if (mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null) {\n                payload = serializeDateTypes(mapperType, object, objectName);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = serializeByteArrayType(objectName, object);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = serializeBase64UrlType(objectName, object);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = serializeSequenceType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = serializeDictionaryType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n            else if (mapperType.match(/^Composite$/i) !== null) {\n                payload = serializeCompositeType(this, mapper, object, objectName, Boolean(this.isXML), updatedOptions);\n            }\n        }\n        return payload;\n    }\n    /**\n     * Deserialize the given object based on its metadata defined in the mapper\n     *\n     * @param mapper - The mapper which defines the metadata of the serializable object\n     *\n     * @param responseBody - A valid Javascript entity to be deserialized\n     *\n     * @param objectName - Name of the deserialized object\n     *\n     * @param options - Controls behavior of XML parser and builder.\n     *\n     * @returns A valid deserialized Javascript object\n     */\n    deserialize(mapper, responseBody, objectName, options = { xml: {} }) {\n        var _a, _b, _c, _d;\n        const updatedOptions = {\n            xml: {\n                rootName: (_a = options.xml.rootName) !== null && _a !== void 0 ? _a : \"\",\n                includeRoot: (_b = options.xml.includeRoot) !== null && _b !== void 0 ? _b : false,\n                xmlCharKey: (_c = options.xml.xmlCharKey) !== null && _c !== void 0 ? _c : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY,\n            },\n            ignoreUnknownProperties: (_d = options.ignoreUnknownProperties) !== null && _d !== void 0 ? _d : false,\n        };\n        if (responseBody === undefined || responseBody === null) {\n            if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n                // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n                // between the list being empty versus being missing,\n                // so let's do the more user-friendly thing and return an empty list.\n                responseBody = [];\n            }\n            // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n            if (mapper.defaultValue !== undefined) {\n                responseBody = mapper.defaultValue;\n            }\n            return responseBody;\n        }\n        let payload;\n        const mapperType = mapper.type.name;\n        if (!objectName) {\n            objectName = mapper.serializedName;\n        }\n        if (mapperType.match(/^Composite$/i) !== null) {\n            payload = deserializeCompositeType(this, mapper, responseBody, objectName, updatedOptions);\n        }\n        else {\n            if (this.isXML) {\n                const xmlCharKey = updatedOptions.xml.xmlCharKey;\n                /**\n                 * If the mapper specifies this as a non-composite type value but the responseBody contains\n                 * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n                 * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n                 */\n                if (responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n                    responseBody = responseBody[xmlCharKey];\n                }\n            }\n            if (mapperType.match(/^Number$/i) !== null) {\n                payload = parseFloat(responseBody);\n                if (isNaN(payload)) {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^Boolean$/i) !== null) {\n                if (responseBody === \"true\") {\n                    payload = true;\n                }\n                else if (responseBody === \"false\") {\n                    payload = false;\n                }\n                else {\n                    payload = responseBody;\n                }\n            }\n            else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n                payload = responseBody;\n            }\n            else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n                payload = new Date(responseBody);\n            }\n            else if (mapperType.match(/^UnixTime$/i) !== null) {\n                payload = unixTimeToDate(responseBody);\n            }\n            else if (mapperType.match(/^ByteArray$/i) !== null) {\n                payload = _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(responseBody);\n            }\n            else if (mapperType.match(/^Base64Url$/i) !== null) {\n                payload = base64UrlToByteArray(responseBody);\n            }\n            else if (mapperType.match(/^Sequence$/i) !== null) {\n                payload = deserializeSequenceType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n            else if (mapperType.match(/^Dictionary$/i) !== null) {\n                payload = deserializeDictionaryType(this, mapper, responseBody, objectName, updatedOptions);\n            }\n        }\n        if (mapper.isConstant) {\n            payload = mapper.defaultValue;\n        }\n        return payload;\n    }\n}\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nfunction createSerializer(modelMappers = {}, isXML = false) {\n    return new SerializerImpl(modelMappers, isXML);\n}\nfunction trimEnd(str, ch) {\n    let len = str.length;\n    while (len - 1 >= 0 && str[len - 1] === ch) {\n        --len;\n    }\n    return str.substr(0, len);\n}\nfunction bufferToBase64Url(buffer) {\n    if (!buffer) {\n        return undefined;\n    }\n    if (!(buffer instanceof Uint8Array)) {\n        throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n    }\n    // Uint8Array to Base64.\n    const str = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(buffer);\n    // Base64 to Base64Url.\n    return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\nfunction base64UrlToByteArray(str) {\n    if (!str) {\n        return undefined;\n    }\n    if (str && typeof str.valueOf() !== \"string\") {\n        throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n    }\n    // Base64Url to Base64.\n    str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Base64 to Uint8Array.\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.decodeString(str);\n}\nfunction splitSerializeName(prop) {\n    const classes = [];\n    let partialclass = \"\";\n    if (prop) {\n        const subwords = prop.split(\".\");\n        for (const item of subwords) {\n            if (item.charAt(item.length - 1) === \"\\\\\") {\n                partialclass += item.substr(0, item.length - 1) + \".\";\n            }\n            else {\n                partialclass += item;\n                classes.push(partialclass);\n                partialclass = \"\";\n            }\n        }\n    }\n    return classes;\n}\nfunction dateToUnixTime(d) {\n    if (!d) {\n        return undefined;\n    }\n    if (typeof d.valueOf() === \"string\") {\n        d = new Date(d);\n    }\n    return Math.floor(d.getTime() / 1000);\n}\nfunction unixTimeToDate(n) {\n    if (!n) {\n        return undefined;\n    }\n    return new Date(n * 1000);\n}\nfunction serializeBasicTypes(typeName, objectName, value) {\n    if (value !== null && value !== undefined) {\n        if (typeName.match(/^Number$/i) !== null) {\n            if (typeof value !== \"number\") {\n                throw new Error(`${objectName} with value ${value} must be of type number.`);\n            }\n        }\n        else if (typeName.match(/^String$/i) !== null) {\n            if (typeof value.valueOf() !== \"string\") {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n            }\n        }\n        else if (typeName.match(/^Uuid$/i) !== null) {\n            if (!(typeof value.valueOf() === \"string\" && (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidUuid)(value))) {\n                throw new Error(`${objectName} with value \"${value}\" must be of type string and a valid uuid.`);\n            }\n        }\n        else if (typeName.match(/^Boolean$/i) !== null) {\n            if (typeof value !== \"boolean\") {\n                throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n            }\n        }\n        else if (typeName.match(/^Stream$/i) !== null) {\n            const objectType = typeof value;\n            if (objectType !== \"string\" &&\n                typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n                typeof value.tee !== \"function\" && // browser ReadableStream\n                !(value instanceof ArrayBuffer) &&\n                !ArrayBuffer.isView(value) &&\n                // File objects count as a type of Blob, so we want to use instanceof explicitly\n                !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n                objectType !== \"function\") {\n                throw new Error(`${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeEnumType(objectName, allowedValues, value) {\n    if (!allowedValues) {\n        throw new Error(`Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`);\n    }\n    const isPresent = allowedValues.some((item) => {\n        if (typeof item.valueOf() === \"string\") {\n            return item.toLowerCase() === value.toLowerCase();\n        }\n        return item === value;\n    });\n    if (!isPresent) {\n        throw new Error(`${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(allowedValues)}.`);\n    }\n    return value;\n}\nfunction serializeByteArrayType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = _base64_js__WEBPACK_IMPORTED_MODULE_0__.encodeByteArray(value);\n    }\n    return value;\n}\nfunction serializeBase64UrlType(objectName, value) {\n    if (value !== undefined && value !== null) {\n        if (!(value instanceof Uint8Array)) {\n            throw new Error(`${objectName} must be of type Uint8Array.`);\n        }\n        value = bufferToBase64Url(value);\n    }\n    return value;\n}\nfunction serializeDateTypes(typeName, value, objectName) {\n    if (value !== undefined && value !== null) {\n        if (typeName.match(/^Date$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value =\n                value instanceof Date\n                    ? value.toISOString().substring(0, 10)\n                    : new Date(value).toISOString().substring(0, 10);\n        }\n        else if (typeName.match(/^DateTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n            }\n            value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n        }\n        else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n            }\n            value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n        }\n        else if (typeName.match(/^UnixTime$/i) !== null) {\n            if (!(value instanceof Date ||\n                (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value))))) {\n                throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n                    `for it to be serialized in UnixTime/Epoch format.`);\n            }\n            value = dateToUnixTime(value);\n        }\n        else if (typeName.match(/^TimeSpan$/i) !== null) {\n            if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDuration)(value)) {\n                throw new Error(`${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`);\n            }\n        }\n    }\n    return value;\n}\nfunction serializeSequenceType(serializer, mapper, object, objectName, isXml, options) {\n    var _a;\n    if (!Array.isArray(object)) {\n        throw new Error(`${objectName} must be of type Array.`);\n    }\n    let elementType = mapper.type.element;\n    if (!elementType || typeof elementType !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (elementType.type.name === \"Composite\" && elementType.type.className) {\n        elementType = (_a = serializer.modelMappers[elementType.type.className]) !== null && _a !== void 0 ? _a : elementType;\n    }\n    const tempArray = [];\n    for (let i = 0; i < object.length; i++) {\n        const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n        if (isXml && elementType.xmlNamespace) {\n            const xmlnsKey = elementType.xmlNamespacePrefix\n                ? `xmlns:${elementType.xmlNamespacePrefix}`\n                : \"xmlns\";\n            if (elementType.type.name === \"Composite\") {\n                tempArray[i] = Object.assign({}, serializedValue);\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n            else {\n                tempArray[i] = {};\n                tempArray[i][options.xml.xmlCharKey] = serializedValue;\n                tempArray[i][_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n            }\n        }\n        else {\n            tempArray[i] = serializedValue;\n        }\n    }\n    return tempArray;\n}\nfunction serializeDictionaryType(serializer, mapper, object, objectName, isXml, options) {\n    if (typeof object !== \"object\") {\n        throw new Error(`${objectName} must be of type object.`);\n    }\n    const valueType = mapper.type.value;\n    if (!valueType || typeof valueType !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}.`);\n    }\n    const tempDictionary = {};\n    for (const key of Object.keys(object)) {\n        const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n        // If the element needs an XML namespace we need to add it within the $ property\n        tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n    }\n    // Add the namespace to the root element if needed\n    if (isXml && mapper.xmlNamespace) {\n        const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n        const result = tempDictionary;\n        result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n        return result;\n    }\n    return tempDictionary;\n}\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(serializer, mapper, objectName) {\n    const additionalProperties = mapper.type.additionalProperties;\n    if (!additionalProperties && mapper.type.className) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        return modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.additionalProperties;\n    }\n    return additionalProperties;\n}\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(serializer, mapper, objectName) {\n    const className = mapper.type.className;\n    if (!className) {\n        throw new Error(`Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(mapper, undefined, 2)}\".`);\n    }\n    return serializer.modelMappers[className];\n}\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(serializer, mapper, objectName) {\n    let modelProps = mapper.type.modelProperties;\n    if (!modelProps) {\n        const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n        if (!modelMapper) {\n            throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n        }\n        modelProps = modelMapper === null || modelMapper === void 0 ? void 0 : modelMapper.type.modelProperties;\n        if (!modelProps) {\n            throw new Error(`modelProperties cannot be null or undefined in the ` +\n                `mapper \"${JSON.stringify(modelMapper)}\" of type \"${mapper.type.className}\" for object \"${objectName}\".`);\n        }\n    }\n    return modelProps;\n}\nfunction serializeCompositeType(serializer, mapper, object, objectName, isXml, options) {\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n    }\n    if (object !== undefined && object !== null) {\n        const payload = {};\n        const modelProps = resolveModelProperties(serializer, mapper, objectName);\n        for (const key of Object.keys(modelProps)) {\n            const propertyMapper = modelProps[key];\n            if (propertyMapper.readOnly) {\n                continue;\n            }\n            let propName;\n            let parentObject = payload;\n            if (serializer.isXML) {\n                if (propertyMapper.xmlIsWrapped) {\n                    propName = propertyMapper.xmlName;\n                }\n                else {\n                    propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n                }\n            }\n            else {\n                const paths = splitSerializeName(propertyMapper.serializedName);\n                propName = paths.pop();\n                for (const pathName of paths) {\n                    const childObject = parentObject[pathName];\n                    if ((childObject === undefined || childObject === null) &&\n                        ((object[key] !== undefined && object[key] !== null) ||\n                            propertyMapper.defaultValue !== undefined)) {\n                        parentObject[pathName] = {};\n                    }\n                    parentObject = parentObject[pathName];\n                }\n            }\n            if (parentObject !== undefined && parentObject !== null) {\n                if (isXml && mapper.xmlNamespace) {\n                    const xmlnsKey = mapper.xmlNamespacePrefix\n                        ? `xmlns:${mapper.xmlNamespacePrefix}`\n                        : \"xmlns\";\n                    parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = Object.assign(Object.assign({}, parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]), { [xmlnsKey]: mapper.xmlNamespace });\n                }\n                const propertyObjectName = propertyMapper.serializedName !== \"\"\n                    ? objectName + \".\" + propertyMapper.serializedName\n                    : objectName;\n                let toSerialize = object[key];\n                const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n                if (polymorphicDiscriminator &&\n                    polymorphicDiscriminator.clientName === key &&\n                    (toSerialize === undefined || toSerialize === null)) {\n                    toSerialize = mapper.serializedName;\n                }\n                const serializedValue = serializer.serialize(propertyMapper, toSerialize, propertyObjectName, options);\n                if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n                    const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n                    if (isXml && propertyMapper.xmlIsAttribute) {\n                        // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n                        // This keeps things simple while preventing name collision\n                        // with names in user documents.\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] || {};\n                        parentObject[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][propName] = serializedValue;\n                    }\n                    else if (isXml && propertyMapper.xmlIsWrapped) {\n                        parentObject[propName] = { [propertyMapper.xmlElementName]: value };\n                    }\n                    else {\n                        parentObject[propName] = value;\n                    }\n                }\n            }\n        }\n        const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n        if (additionalPropertiesMapper) {\n            const propNames = Object.keys(modelProps);\n            for (const clientPropName in object) {\n                const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n                if (isAdditionalProperty) {\n                    payload[clientPropName] = serializer.serialize(additionalPropertiesMapper, object[clientPropName], objectName + '[\"' + clientPropName + '\"]', options);\n                }\n            }\n        }\n        return payload;\n    }\n    return object;\n}\nfunction getXmlObjectValue(propertyMapper, serializedValue, isXml, options) {\n    if (!isXml || !propertyMapper.xmlNamespace) {\n        return serializedValue;\n    }\n    const xmlnsKey = propertyMapper.xmlNamespacePrefix\n        ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n        : \"xmlns\";\n    const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n    if ([\"Composite\"].includes(propertyMapper.type.name)) {\n        if (serializedValue[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n            return serializedValue;\n        }\n        else {\n            const result = Object.assign({}, serializedValue);\n            result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n            return result;\n        }\n    }\n    const result = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY] = xmlNamespace;\n    return result;\n}\nfunction isSpecialXmlProperty(propertyName, options) {\n    return [_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\nfunction deserializeCompositeType(serializer, mapper, responseBody, objectName, options) {\n    var _a, _b;\n    const xmlCharKey = (_a = options.xml.xmlCharKey) !== null && _a !== void 0 ? _a : _interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY;\n    if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n        mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n    }\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    let instance = {};\n    const handledPropertyNames = [];\n    for (const key of Object.keys(modelProps)) {\n        const propertyMapper = modelProps[key];\n        const paths = splitSerializeName(modelProps[key].serializedName);\n        handledPropertyNames.push(paths[0]);\n        const { serializedName, xmlName, xmlElementName } = propertyMapper;\n        let propertyObjectName = objectName;\n        if (serializedName !== \"\" && serializedName !== undefined) {\n            propertyObjectName = objectName + \".\" + serializedName;\n        }\n        const headerCollectionPrefix = propertyMapper.headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n            const dictionary = {};\n            for (const headerKey of Object.keys(responseBody)) {\n                if (headerKey.startsWith(headerCollectionPrefix)) {\n                    dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(propertyMapper.type.value, responseBody[headerKey], propertyObjectName, options);\n                }\n                handledPropertyNames.push(headerKey);\n            }\n            instance[key] = dictionary;\n        }\n        else if (serializer.isXML) {\n            if (propertyMapper.xmlIsAttribute && responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY]) {\n                instance[key] = serializer.deserialize(propertyMapper, responseBody[_interfaces_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY][xmlName], propertyObjectName, options);\n            }\n            else if (propertyMapper.xmlIsMsText) {\n                if (responseBody[xmlCharKey] !== undefined) {\n                    instance[key] = responseBody[xmlCharKey];\n                }\n                else if (typeof responseBody === \"string\") {\n                    // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n                    //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n                    instance[key] = responseBody;\n                }\n            }\n            else {\n                const propertyName = xmlElementName || xmlName || serializedName;\n                if (propertyMapper.xmlIsWrapped) {\n                    /* a list of <xmlElementName> wrapped by <xmlName>\n                      For the xml example below\n                        <Cors>\n                          <CorsRule>...</CorsRule>\n                          <CorsRule>...</CorsRule>\n                        </Cors>\n                      the responseBody has\n                        {\n                          Cors: {\n                            CorsRule: [{...}, {...}]\n                          }\n                        }\n                      xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n                    */\n                    const wrapped = responseBody[xmlName];\n                    const elementList = (_b = wrapped === null || wrapped === void 0 ? void 0 : wrapped[xmlElementName]) !== null && _b !== void 0 ? _b : [];\n                    instance[key] = serializer.deserialize(propertyMapper, elementList, propertyObjectName, options);\n                    handledPropertyNames.push(xmlName);\n                }\n                else {\n                    const property = responseBody[propertyName];\n                    instance[key] = serializer.deserialize(propertyMapper, property, propertyObjectName, options);\n                    handledPropertyNames.push(propertyName);\n                }\n            }\n        }\n        else {\n            // deserialize the property if it is present in the provided responseBody instance\n            let propertyInstance;\n            let res = responseBody;\n            // traversing the object step by step.\n            let steps = 0;\n            for (const item of paths) {\n                if (!res)\n                    break;\n                steps++;\n                res = res[item];\n            }\n            // only accept null when reaching the last position of object otherwise it would be undefined\n            if (res === null && steps < paths.length) {\n                res = undefined;\n            }\n            propertyInstance = res;\n            const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n            // checking that the model property name (key)(ex: \"fishtype\") and the\n            // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n            // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n            // is a better approach. The generator is not consistent with escaping '\\.' in the\n            // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n            // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n            // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n            // the transformation of model property name (ex: \"fishtype\") is done consistently.\n            // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n            if (polymorphicDiscriminator &&\n                key === polymorphicDiscriminator.clientName &&\n                (propertyInstance === undefined || propertyInstance === null)) {\n                propertyInstance = mapper.serializedName;\n            }\n            let serializedValue;\n            // paging\n            if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n                propertyInstance = responseBody[key];\n                const arrayInstance = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                // Copy over any properties that have already been added into the instance, where they do\n                // not exist on the newly de-serialized array\n                for (const [k, v] of Object.entries(instance)) {\n                    if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n                        arrayInstance[k] = v;\n                    }\n                }\n                instance = arrayInstance;\n            }\n            else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n                serializedValue = serializer.deserialize(propertyMapper, propertyInstance, propertyObjectName, options);\n                instance[key] = serializedValue;\n            }\n        }\n    }\n    const additionalPropertiesMapper = mapper.type.additionalProperties;\n    if (additionalPropertiesMapper) {\n        const isAdditionalProperty = (responsePropName) => {\n            for (const clientPropName in modelProps) {\n                const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n                if (paths[0] === responsePropName) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        for (const responsePropName in responseBody) {\n            if (isAdditionalProperty(responsePropName)) {\n                instance[responsePropName] = serializer.deserialize(additionalPropertiesMapper, responseBody[responsePropName], objectName + '[\"' + responsePropName + '\"]', options);\n            }\n        }\n    }\n    else if (responseBody && !options.ignoreUnknownProperties) {\n        for (const key of Object.keys(responseBody)) {\n            if (instance[key] === undefined &&\n                !handledPropertyNames.includes(key) &&\n                !isSpecialXmlProperty(key, options)) {\n                instance[key] = responseBody[key];\n            }\n        }\n    }\n    return instance;\n}\nfunction deserializeDictionaryType(serializer, mapper, responseBody, objectName, options) {\n    /* jshint validthis: true */\n    const value = mapper.type.value;\n    if (!value || typeof value !== \"object\") {\n        throw new Error(`\"value\" metadata for a Dictionary must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        const tempDictionary = {};\n        for (const key of Object.keys(responseBody)) {\n            tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n        }\n        return tempDictionary;\n    }\n    return responseBody;\n}\nfunction deserializeSequenceType(serializer, mapper, responseBody, objectName, options) {\n    var _a;\n    let element = mapper.type.element;\n    if (!element || typeof element !== \"object\") {\n        throw new Error(`element\" metadata for an Array must be defined in the ` +\n            `mapper and it must of type \"object\" in ${objectName}`);\n    }\n    if (responseBody) {\n        if (!Array.isArray(responseBody)) {\n            // xml2js will interpret a single element array as just the element, so force it to be an array\n            responseBody = [responseBody];\n        }\n        // Quirk: Composite mappers referenced by `element` might\n        // not have *all* properties declared (like uberParent),\n        // so let's try to look up the full definition by name.\n        if (element.type.name === \"Composite\" && element.type.className) {\n            element = (_a = serializer.modelMappers[element.type.className]) !== null && _a !== void 0 ? _a : element;\n        }\n        const tempArray = [];\n        for (let i = 0; i < responseBody.length; i++) {\n            tempArray[i] = serializer.deserialize(element, responseBody[i], `${objectName}[${i}]`, options);\n        }\n        return tempArray;\n    }\n    return responseBody;\n}\nfunction getIndexDiscriminator(discriminators, discriminatorValue, typeName) {\n    const typeNamesToCheck = [typeName];\n    while (typeNamesToCheck.length) {\n        const currentName = typeNamesToCheck.shift();\n        const indexDiscriminator = discriminatorValue === currentName\n            ? discriminatorValue\n            : currentName + \".\" + discriminatorValue;\n        if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n            return discriminators[indexDiscriminator];\n        }\n        else {\n            for (const [name, mapper] of Object.entries(discriminators)) {\n                if (name.startsWith(currentName + \".\") &&\n                    mapper.type.uberParent === currentName &&\n                    mapper.type.className) {\n                    typeNamesToCheck.push(mapper.type.className);\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction getPolymorphicMapper(serializer, mapper, object, polymorphicPropertyName) {\n    var _a;\n    const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n    if (polymorphicDiscriminator) {\n        let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n        if (discriminatorName) {\n            // The serializedName might have \\\\, which we just want to ignore\n            if (polymorphicPropertyName === \"serializedName\") {\n                discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n            }\n            const discriminatorValue = object[discriminatorName];\n            const typeName = (_a = mapper.type.uberParent) !== null && _a !== void 0 ? _a : mapper.type.className;\n            if (typeof discriminatorValue === \"string\" && typeName) {\n                const polymorphicMapper = getIndexDiscriminator(serializer.modelMappers.discriminators, discriminatorValue, typeName);\n                if (polymorphicMapper) {\n                    mapper = polymorphicMapper;\n                }\n            }\n        }\n    }\n    return mapper;\n}\nfunction getPolymorphicDiscriminatorRecursively(serializer, mapper) {\n    return (mapper.type.polymorphicDiscriminator ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n        getPolymorphicDiscriminatorSafely(serializer, mapper.type.className));\n}\nfunction getPolymorphicDiscriminatorSafely(serializer, typeName) {\n    return (typeName &&\n        serializer.modelMappers[typeName] &&\n        serializer.modelMappers[typeName].type.polymorphicDiscriminator);\n}\n/**\n * Known types of Mappers\n */\nconst MapperTypeNames = {\n    Base64Url: \"Base64Url\",\n    Boolean: \"Boolean\",\n    ByteArray: \"ByteArray\",\n    Composite: \"Composite\",\n    Date: \"Date\",\n    DateTime: \"DateTime\",\n    DateTimeRfc1123: \"DateTimeRfc1123\",\n    Dictionary: \"Dictionary\",\n    Enum: \"Enum\",\n    Number: \"Number\",\n    Object: \"Object\",\n    Sequence: \"Sequence\",\n    String: \"String\",\n    Stream: \"Stream\",\n    TimeSpan: \"TimeSpan\",\n    UnixTime: \"UnixTime\",\n};\n//# sourceMappingURL=serializer.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/serializer.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/serviceClient.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/serviceClient.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ServiceClient: () => (/* binding */ ServiceClient)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"./node_modules/@azure/core-client/dist/browser/pipeline.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"./node_modules/@azure/core-client/dist/browser/utils.js\");\n/* harmony import */ var _httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientCache.js */ \"./node_modules/@azure/core-client/dist/browser/httpClientCache.js\");\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operationHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/operationHelpers.js\");\n/* harmony import */ var _urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./urlHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/urlHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/interfaceHelpers.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./log.js */ \"./node_modules/@azure/core-client/dist/browser/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n\n\n\n\n/**\n * Initializes a new instance of the ServiceClient.\n */\nclass ServiceClient {\n    /**\n     * The ServiceClient constructor\n     * @param credential - The credentials used for authentication with the service.\n     * @param options - The service client options that govern the behavior of the client.\n     */\n    constructor(options = {}) {\n        var _a, _b;\n        this._requestContentType = options.requestContentType;\n        this._endpoint = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri;\n        if (options.baseUri) {\n            _log_js__WEBPACK_IMPORTED_MODULE_7__.logger.warning(\"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\");\n        }\n        this._allowInsecureConnection = options.allowInsecureConnection;\n        this._httpClient = options.httpClient || (0,_httpClientCache_js__WEBPACK_IMPORTED_MODULE_3__.getCachedDefaultHttpClient)();\n        this.pipeline = options.pipeline || createDefaultPipeline(options);\n        if ((_b = options.additionalPolicies) === null || _b === void 0 ? void 0 : _b.length) {\n            for (const { policy, position } of options.additionalPolicies) {\n                // Sign happens after Retry and is commonly needed to occur\n                // before policies that intercept post-retry.\n                const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n                this.pipeline.addPolicy(policy, {\n                    afterPhase,\n                });\n            }\n        }\n    }\n    /**\n     * Send the provided httpRequest.\n     */\n    async sendRequest(request) {\n        return this.pipeline.sendRequest(this._httpClient, request);\n    }\n    /**\n     * Send an HTTP request that is populated using the provided OperationSpec.\n     * @typeParam T - The typed result of the request, based on the OperationSpec.\n     * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n     * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        const endpoint = operationSpec.baseUrl || this._endpoint;\n        if (!endpoint) {\n            throw new Error(\"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\");\n        }\n        // Templatized URLs sometimes reference properties on the ServiceClient child class,\n        // so we have to pass `this` below in order to search these properties if they're\n        // not part of OperationArguments\n        const url = (0,_urlHelpers_js__WEBPACK_IMPORTED_MODULE_5__.getRequestUrl)(endpoint, operationSpec, operationArguments, this);\n        const request = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url,\n        });\n        request.method = operationSpec.httpMethod;\n        const operationInfo = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_4__.getOperationRequestInfo)(request);\n        operationInfo.operationSpec = operationSpec;\n        operationInfo.operationArguments = operationArguments;\n        const contentType = operationSpec.contentType || this._requestContentType;\n        if (contentType && operationSpec.requestBody) {\n            request.headers.set(\"Content-Type\", contentType);\n        }\n        const options = operationArguments.options;\n        if (options) {\n            const requestOptions = options.requestOptions;\n            if (requestOptions) {\n                if (requestOptions.timeout) {\n                    request.timeout = requestOptions.timeout;\n                }\n                if (requestOptions.onUploadProgress) {\n                    request.onUploadProgress = requestOptions.onUploadProgress;\n                }\n                if (requestOptions.onDownloadProgress) {\n                    request.onDownloadProgress = requestOptions.onDownloadProgress;\n                }\n                if (requestOptions.shouldDeserialize !== undefined) {\n                    operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n                }\n                if (requestOptions.allowInsecureConnection) {\n                    request.allowInsecureConnection = true;\n                }\n            }\n            if (options.abortSignal) {\n                request.abortSignal = options.abortSignal;\n            }\n            if (options.tracingOptions) {\n                request.tracingOptions = options.tracingOptions;\n            }\n        }\n        if (this._allowInsecureConnection) {\n            request.allowInsecureConnection = true;\n        }\n        if (request.streamResponseStatusCodes === undefined) {\n            request.streamResponseStatusCodes = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_6__.getStreamingResponseStatusCodes)(operationSpec);\n        }\n        try {\n            const rawResponse = await this.sendRequest(request);\n            const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[rawResponse.status]);\n            if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                options.onResponse(rawResponse, flatResponse);\n            }\n            return flatResponse;\n        }\n        catch (error) {\n            if (typeof error === \"object\" && (error === null || error === void 0 ? void 0 : error.response)) {\n                const rawResponse = error.response;\n                const flatResponse = (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.flattenResponse)(rawResponse, operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"]);\n                error.details = flatResponse;\n                if (options === null || options === void 0 ? void 0 : options.onResponse) {\n                    options.onResponse(rawResponse, flatResponse, error);\n                }\n            }\n            throw error;\n        }\n    }\n}\nfunction createDefaultPipeline(options) {\n    const credentialScopes = getCredentialScopes(options);\n    const credentialOptions = options.credential && credentialScopes\n        ? { credentialScopes, credential: options.credential }\n        : undefined;\n    return (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createClientPipeline)(Object.assign(Object.assign({}, options), { credentialOptions }));\n}\nfunction getCredentialScopes(options) {\n    if (options.credentialScopes) {\n        return options.credentialScopes;\n    }\n    if (options.endpoint) {\n        return `${options.endpoint}/.default`;\n    }\n    if (options.baseUri) {\n        return `${options.baseUri}/.default`;\n    }\n    if (options.credential && !options.credentialScopes) {\n        throw new Error(`When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`);\n    }\n    return undefined;\n}\n//# sourceMappingURL=serviceClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/serviceClient.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/state.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/state.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nconst state = {\n    operationRequestMap: new WeakMap(),\n};\n//# sourceMappingURL=state-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/state.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/urlHelpers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/urlHelpers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendQueryParams: () => (/* binding */ appendQueryParams),\n/* harmony export */   getRequestUrl: () => (/* binding */ getRequestUrl)\n/* harmony export */ });\n/* harmony import */ var _operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operationHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/operationHelpers.js\");\n/* harmony import */ var _interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interfaceHelpers.js */ \"./node_modules/@azure/core-client/dist/browser/interfaceHelpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst CollectionFormatToDelimiterMap = {\n    CSV: \",\",\n    SSV: \" \",\n    Multi: \"Multi\",\n    TSV: \"\\t\",\n    Pipes: \"|\",\n};\nfunction getRequestUrl(baseUri, operationSpec, operationArguments, fallbackObject) {\n    const urlReplacements = calculateUrlReplacements(operationSpec, operationArguments, fallbackObject);\n    let isAbsolutePath = false;\n    let requestUrl = replaceAll(baseUri, urlReplacements);\n    if (operationSpec.path) {\n        let path = replaceAll(operationSpec.path, urlReplacements);\n        // QUIRK: sometimes we get a path component like /{nextLink}\n        // which may be a fully formed URL with a leading /. In that case, we should\n        // remove the leading /\n        if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n            path = path.substring(1);\n        }\n        // QUIRK: sometimes we get a path component like {nextLink}\n        // which may be a fully formed URL. In that case, we should\n        // ignore the baseUri.\n        if (isAbsoluteUrl(path)) {\n            requestUrl = path;\n            isAbsolutePath = true;\n        }\n        else {\n            requestUrl = appendPath(requestUrl, path);\n        }\n    }\n    const { queryParams, sequenceParams } = calculateQueryParameters(operationSpec, operationArguments, fallbackObject);\n    /**\n     * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n     * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n     * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n     * is still being built so there is nothing to overwrite.\n     */\n    requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n    return requestUrl;\n}\nfunction replaceAll(input, replacements) {\n    let result = input;\n    for (const [searchValue, replaceValue] of replacements) {\n        result = result.split(searchValue).join(replaceValue);\n    }\n    return result;\n}\nfunction calculateUrlReplacements(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    if ((_a = operationSpec.urlParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const urlParameter of operationSpec.urlParameters) {\n            let urlParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, urlParameter, fallbackObject);\n            const parameterPathString = (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(urlParameter);\n            urlParameterValue = operationSpec.serializer.serialize(urlParameter.mapper, urlParameterValue, parameterPathString);\n            if (!urlParameter.skipEncoding) {\n                urlParameterValue = encodeURIComponent(urlParameterValue);\n            }\n            result.set(`{${urlParameter.mapper.serializedName || parameterPathString}}`, urlParameterValue);\n        }\n    }\n    return result;\n}\nfunction isAbsoluteUrl(url) {\n    return url.includes(\"://\");\n}\nfunction appendPath(url, pathToAppend) {\n    if (!pathToAppend) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    let newPath = parsedUrl.pathname;\n    if (!newPath.endsWith(\"/\")) {\n        newPath = `${newPath}/`;\n    }\n    if (pathToAppend.startsWith(\"/\")) {\n        pathToAppend = pathToAppend.substring(1);\n    }\n    const searchStart = pathToAppend.indexOf(\"?\");\n    if (searchStart !== -1) {\n        const path = pathToAppend.substring(0, searchStart);\n        const search = pathToAppend.substring(searchStart + 1);\n        newPath = newPath + path;\n        if (search) {\n            parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n        }\n    }\n    else {\n        newPath = newPath + pathToAppend;\n    }\n    parsedUrl.pathname = newPath;\n    return parsedUrl.toString();\n}\nfunction calculateQueryParameters(operationSpec, operationArguments, fallbackObject) {\n    var _a;\n    const result = new Map();\n    const sequenceParams = new Set();\n    if ((_a = operationSpec.queryParameters) === null || _a === void 0 ? void 0 : _a.length) {\n        for (const queryParameter of operationSpec.queryParameters) {\n            if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n                sequenceParams.add(queryParameter.mapper.serializedName);\n            }\n            let queryParameterValue = (0,_operationHelpers_js__WEBPACK_IMPORTED_MODULE_0__.getOperationArgumentValueFromParameter)(operationArguments, queryParameter, fallbackObject);\n            if ((queryParameterValue !== undefined && queryParameterValue !== null) ||\n                queryParameter.mapper.required) {\n                queryParameterValue = operationSpec.serializer.serialize(queryParameter.mapper, queryParameterValue, (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter));\n                const delimiter = queryParameter.collectionFormat\n                    ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n                    : \"\";\n                if (Array.isArray(queryParameterValue)) {\n                    // replace null and undefined\n                    queryParameterValue = queryParameterValue.map((item) => {\n                        if (item === null || item === undefined) {\n                            return \"\";\n                        }\n                        return item;\n                    });\n                }\n                if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n                    continue;\n                }\n                else if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                if (!queryParameter.skipEncoding) {\n                    if (Array.isArray(queryParameterValue)) {\n                        queryParameterValue = queryParameterValue.map((item) => {\n                            return encodeURIComponent(item);\n                        });\n                    }\n                    else {\n                        queryParameterValue = encodeURIComponent(queryParameterValue);\n                    }\n                }\n                // Join pipes and CSV *after* encoding, or the server will be upset.\n                if (Array.isArray(queryParameterValue) &&\n                    (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")) {\n                    queryParameterValue = queryParameterValue.join(delimiter);\n                }\n                result.set(queryParameter.mapper.serializedName || (0,_interfaceHelpers_js__WEBPACK_IMPORTED_MODULE_1__.getPathStringFromParameter)(queryParameter), queryParameterValue);\n            }\n        }\n    }\n    return {\n        queryParams: result,\n        sequenceParams,\n    };\n}\nfunction simpleParseQueryParams(queryString) {\n    const result = new Map();\n    if (!queryString || queryString[0] !== \"?\") {\n        return result;\n    }\n    // remove the leading ?\n    queryString = queryString.slice(1);\n    const pairs = queryString.split(\"&\");\n    for (const pair of pairs) {\n        const [name, value] = pair.split(\"=\", 2);\n        const existingValue = result.get(name);\n        if (existingValue) {\n            if (Array.isArray(existingValue)) {\n                existingValue.push(value);\n            }\n            else {\n                result.set(name, [existingValue, value]);\n            }\n        }\n        else {\n            result.set(name, value);\n        }\n    }\n    return result;\n}\n/** @internal */\nfunction appendQueryParams(url, queryParams, sequenceParams, noOverwrite = false) {\n    if (queryParams.size === 0) {\n        return url;\n    }\n    const parsedUrl = new URL(url);\n    // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n    // can change their meaning to the server, such as in the case of a SAS signature.\n    // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n    const combinedParams = simpleParseQueryParams(parsedUrl.search);\n    for (const [name, value] of queryParams) {\n        const existingValue = combinedParams.get(name);\n        if (Array.isArray(existingValue)) {\n            if (Array.isArray(value)) {\n                existingValue.push(...value);\n                const valueSet = new Set(existingValue);\n                combinedParams.set(name, Array.from(valueSet));\n            }\n            else {\n                existingValue.push(value);\n            }\n        }\n        else if (existingValue) {\n            if (Array.isArray(value)) {\n                value.unshift(existingValue);\n            }\n            else if (sequenceParams.has(name)) {\n                combinedParams.set(name, [existingValue, value]);\n            }\n            if (!noOverwrite) {\n                combinedParams.set(name, value);\n            }\n        }\n        else {\n            combinedParams.set(name, value);\n        }\n    }\n    const searchPieces = [];\n    for (const [name, value] of combinedParams) {\n        if (typeof value === \"string\") {\n            searchPieces.push(`${name}=${value}`);\n        }\n        else if (Array.isArray(value)) {\n            // QUIRK: If we get an array of values, include multiple key/value pairs\n            for (const subValue of value) {\n                searchPieces.push(`${name}=${subValue}`);\n            }\n        }\n        else {\n            searchPieces.push(`${name}=${value}`);\n        }\n    }\n    // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n    parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n    return parsedUrl.toString();\n}\n//# sourceMappingURL=urlHelpers.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/urlHelpers.js?");

/***/ }),

/***/ "./node_modules/@azure/core-client/dist/browser/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/core-client/dist/browser/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   flattenResponse: () => (/* binding */ flattenResponse),\n/* harmony export */   isDuration: () => (/* binding */ isDuration),\n/* harmony export */   isPrimitiveBody: () => (/* binding */ isPrimitiveBody),\n/* harmony export */   isValidUuid: () => (/* binding */ isValidUuid)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nfunction isPrimitiveBody(value, mapperTypeName) {\n    return (mapperTypeName !== \"Composite\" &&\n        mapperTypeName !== \"Dictionary\" &&\n        (typeof value === \"string\" ||\n            typeof value === \"number\" ||\n            typeof value === \"boolean\" ||\n            (mapperTypeName === null || mapperTypeName === void 0 ? void 0 : mapperTypeName.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i)) !==\n                null ||\n            value === undefined ||\n            value === null));\n}\nconst validateISODuration = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nfunction isDuration(value) {\n    return validateISODuration.test(value);\n}\nconst validUuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nfunction isValidUuid(uuid) {\n    return validUuidRegex.test(uuid);\n}\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(responseObject) {\n    const combinedHeadersAndBody = Object.assign(Object.assign({}, responseObject.headers), responseObject.body);\n    if (responseObject.hasNullableType &&\n        Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0) {\n        return responseObject.shouldWrapBody ? { body: null } : null;\n    }\n    else {\n        return responseObject.shouldWrapBody\n            ? Object.assign(Object.assign({}, responseObject.headers), { body: responseObject.body }) : combinedHeadersAndBody;\n    }\n}\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nfunction flattenResponse(fullResponse, responseSpec) {\n    var _a, _b;\n    const parsedHeaders = fullResponse.parsedHeaders;\n    // head methods never have a body, but we return a boolean set to body property\n    // to indicate presence/absence of the resource\n    if (fullResponse.request.method === \"HEAD\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { body: fullResponse.parsedBody });\n    }\n    const bodyMapper = responseSpec && responseSpec.bodyMapper;\n    const isNullable = Boolean(bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.nullable);\n    const expectedBodyTypeName = bodyMapper === null || bodyMapper === void 0 ? void 0 : bodyMapper.type.name;\n    /** If the body is asked for, we look at the expected body type to handle it */\n    if (expectedBodyTypeName === \"Stream\") {\n        return Object.assign(Object.assign({}, parsedHeaders), { blobBody: fullResponse.blobBody, readableStreamBody: fullResponse.readableStreamBody });\n    }\n    const modelProperties = (expectedBodyTypeName === \"Composite\" &&\n        bodyMapper.type.modelProperties) ||\n        {};\n    const isPageableResponse = Object.keys(modelProperties).some((k) => modelProperties[k].serializedName === \"\");\n    if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n        const arrayResponse = (_a = fullResponse.parsedBody) !== null && _a !== void 0 ? _a : [];\n        for (const key of Object.keys(modelProperties)) {\n            if (modelProperties[key].serializedName) {\n                arrayResponse[key] = (_b = fullResponse.parsedBody) === null || _b === void 0 ? void 0 : _b[key];\n            }\n        }\n        if (parsedHeaders) {\n            for (const key of Object.keys(parsedHeaders)) {\n                arrayResponse[key] = parsedHeaders[key];\n            }\n        }\n        return isNullable &&\n            !fullResponse.parsedBody &&\n            !parsedHeaders &&\n            Object.getOwnPropertyNames(modelProperties).length === 0\n            ? null\n            : arrayResponse;\n    }\n    return handleNullableResponseAndWrappableBody({\n        body: fullResponse.parsedBody,\n        headers: parsedHeaders,\n        hasNullableType: isNullable,\n        shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n    });\n}\n//# sourceMappingURL=utils.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-client/dist/browser/utils.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/extendedClient.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/extendedClient.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedServiceClient: () => (/* binding */ ExtendedServiceClient)\n/* harmony export */ });\n/* harmony import */ var _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/disableKeepAlivePolicy.js */ \"./node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js\");\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _azure_core_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/core-client */ \"./node_modules/@azure/core-client/dist/browser/index.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./response.js */ \"./node_modules/@azure/core-http-compat/dist/browser/response.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n\n\n/**\n * Client to provide compatability between core V1 & V2.\n */\nclass ExtendedServiceClient extends _azure_core_client__WEBPACK_IMPORTED_MODULE_2__.ServiceClient {\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        if (((_a = options.keepAliveOptions) === null || _a === void 0 ? void 0 : _a.enable) === false &&\n            !(0,_policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__.pipelineContainsDisableKeepAlivePolicy)(this.pipeline)) {\n            this.pipeline.addPolicy((0,_policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_0__.createDisableKeepAlivePolicy)());\n        }\n        if (((_b = options.redirectOptions) === null || _b === void 0 ? void 0 : _b.handleRedirects) === false) {\n            this.pipeline.removePolicy({\n                name: _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_1__.redirectPolicyName,\n            });\n        }\n    }\n    /**\n     * Compatible send operation request function.\n     *\n     * @param operationArguments - Operation arguments\n     * @param operationSpec - Operation Spec\n     * @returns\n     */\n    async sendOperationRequest(operationArguments, operationSpec) {\n        var _a;\n        const userProvidedCallBack = (_a = operationArguments === null || operationArguments === void 0 ? void 0 : operationArguments.options) === null || _a === void 0 ? void 0 : _a.onResponse;\n        let lastResponse;\n        function onResponse(rawResponse, flatResponse, error) {\n            lastResponse = rawResponse;\n            if (userProvidedCallBack) {\n                userProvidedCallBack(rawResponse, flatResponse, error);\n            }\n        }\n        operationArguments.options = Object.assign(Object.assign({}, operationArguments.options), { onResponse });\n        const result = await super.sendOperationRequest(operationArguments, operationSpec);\n        if (lastResponse) {\n            Object.defineProperty(result, \"_response\", {\n                value: (0,_response_js__WEBPACK_IMPORTED_MODULE_3__.toCompatResponse)(lastResponse),\n            });\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=extendedClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/extendedClient.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertHttpClient: () => (/* binding */ convertHttpClient)\n/* harmony export */ });\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./response.js */ \"./node_modules/@azure/core-http-compat/dist/browser/response.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@azure/core-http-compat/dist/browser/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * Converts a RequestPolicy based HttpClient to a PipelineRequest based HttpClient.\n * @param requestPolicyClient - A HttpClient compatible with core-http\n * @returns A HttpClient compatible with core-rest-pipeline\n */\nfunction convertHttpClient(requestPolicyClient) {\n    return {\n        sendRequest: async (request) => {\n            const response = await requestPolicyClient.sendRequest((0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toWebResourceLike)(request, { createProxy: true }));\n            return (0,_response_js__WEBPACK_IMPORTED_MODULE_0__.toPipelineResponse)(response);\n        },\n    };\n}\n//# sourceMappingURL=httpClientAdapter.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExtendedServiceClient: () => (/* reexport safe */ _extendedClient_js__WEBPACK_IMPORTED_MODULE_0__.ExtendedServiceClient),\n/* harmony export */   HttpPipelineLogLevel: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.HttpPipelineLogLevel),\n/* harmony export */   convertHttpClient: () => (/* reexport safe */ _httpClientAdapter_js__WEBPACK_IMPORTED_MODULE_3__.convertHttpClient),\n/* harmony export */   createRequestPolicyFactoryPolicy: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.createRequestPolicyFactoryPolicy),\n/* harmony export */   disableKeepAlivePolicyName: () => (/* reexport safe */ _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_2__.disableKeepAlivePolicyName),\n/* harmony export */   requestPolicyFactoryPolicyName: () => (/* reexport safe */ _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.requestPolicyFactoryPolicyName),\n/* harmony export */   toHttpHeadersLike: () => (/* reexport safe */ _util_js__WEBPACK_IMPORTED_MODULE_4__.toHttpHeadersLike)\n/* harmony export */ });\n/* harmony import */ var _extendedClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extendedClient.js */ \"./node_modules/@azure/core-http-compat/dist/browser/extendedClient.js\");\n/* harmony import */ var _policies_requestPolicyFactoryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./policies/requestPolicyFactoryPolicy.js */ \"./node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js\");\n/* harmony import */ var _policies_disableKeepAlivePolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/disableKeepAlivePolicy.js */ \"./node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js\");\n/* harmony import */ var _httpClientAdapter_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpClientAdapter.js */ \"./node_modules/@azure/core-http-compat/dist/browser/httpClientAdapter.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@azure/core-http-compat/dist/browser/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * A Shim Library that provides compatibility between Core V1 & V2 Packages.\n *\n * @packageDocumentation\n */\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDisableKeepAlivePolicy: () => (/* binding */ createDisableKeepAlivePolicy),\n/* harmony export */   disableKeepAlivePolicyName: () => (/* binding */ disableKeepAlivePolicyName),\n/* harmony export */   pipelineContainsDisableKeepAlivePolicy: () => (/* binding */ pipelineContainsDisableKeepAlivePolicy)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nconst disableKeepAlivePolicyName = \"DisableKeepAlivePolicy\";\nfunction createDisableKeepAlivePolicy() {\n    return {\n        name: disableKeepAlivePolicyName,\n        async sendRequest(request, next) {\n            request.disableKeepAlive = true;\n            return next(request);\n        },\n    };\n}\n/**\n * @internal\n */\nfunction pipelineContainsDisableKeepAlivePolicy(pipeline) {\n    return pipeline.getOrderedPolicies().some((policy) => policy.name === disableKeepAlivePolicyName);\n}\n//# sourceMappingURL=disableKeepAlivePolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/policies/disableKeepAlivePolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpPipelineLogLevel: () => (/* binding */ HttpPipelineLogLevel),\n/* harmony export */   createRequestPolicyFactoryPolicy: () => (/* binding */ createRequestPolicyFactoryPolicy),\n/* harmony export */   requestPolicyFactoryPolicyName: () => (/* binding */ requestPolicyFactoryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"./node_modules/@azure/core-http-compat/dist/browser/util.js\");\n/* harmony import */ var _response_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../response.js */ \"./node_modules/@azure/core-http-compat/dist/browser/response.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\n/**\n * An enum for compatibility with RequestPolicy\n */\nvar HttpPipelineLogLevel;\n(function (HttpPipelineLogLevel) {\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"ERROR\"] = 1] = \"ERROR\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"INFO\"] = 3] = \"INFO\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"OFF\"] = 0] = \"OFF\";\n    HttpPipelineLogLevel[HttpPipelineLogLevel[\"WARNING\"] = 2] = \"WARNING\";\n})(HttpPipelineLogLevel || (HttpPipelineLogLevel = {}));\nconst mockRequestPolicyOptions = {\n    log(_logLevel, _message) {\n        /* do nothing */\n    },\n    shouldLog(_logLevel) {\n        return false;\n    },\n};\n/**\n * The name of the RequestPolicyFactoryPolicy\n */\nconst requestPolicyFactoryPolicyName = \"RequestPolicyFactoryPolicy\";\n/**\n * A policy that wraps policies written for core-http.\n * @param factories - An array of `RequestPolicyFactory` objects from a core-http pipeline\n */\nfunction createRequestPolicyFactoryPolicy(factories) {\n    const orderedFactories = factories.slice().reverse();\n    return {\n        name: requestPolicyFactoryPolicyName,\n        async sendRequest(request, next) {\n            let httpPipeline = {\n                async sendRequest(httpRequest) {\n                    const response = await next((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.toPipelineRequest)(httpRequest));\n                    return (0,_response_js__WEBPACK_IMPORTED_MODULE_1__.toCompatResponse)(response, { createProxy: true });\n                },\n            };\n            for (const factory of orderedFactories) {\n                httpPipeline = factory.create(httpPipeline, mockRequestPolicyOptions);\n            }\n            const webResourceLike = (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.toWebResourceLike)(request, { createProxy: true });\n            const response = await httpPipeline.sendRequest(webResourceLike);\n            return (0,_response_js__WEBPACK_IMPORTED_MODULE_1__.toPipelineResponse)(response);\n        },\n    };\n}\n//# sourceMappingURL=requestPolicyFactoryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/policies/requestPolicyFactoryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/response.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/response.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toCompatResponse: () => (/* binding */ toCompatResponse),\n/* harmony export */   toPipelineResponse: () => (/* binding */ toPipelineResponse)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util.js */ \"./node_modules/@azure/core-http-compat/dist/browser/util.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n\nconst originalResponse = Symbol(\"Original FullOperationResponse\");\n/**\n * A helper to convert response objects from the new pipeline back to the old one.\n * @param response - A response object from core-client.\n * @returns A response compatible with `HttpOperationResponse` from core-http.\n */\nfunction toCompatResponse(response, options) {\n    let request = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toWebResourceLike)(response.request);\n    let headers = (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toHttpHeadersLike)(response.headers);\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(response, {\n            get(target, prop, receiver) {\n                if (prop === \"headers\") {\n                    return headers;\n                }\n                else if (prop === \"request\") {\n                    return request;\n                }\n                else if (prop === originalResponse) {\n                    return response;\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"headers\") {\n                    headers = value;\n                }\n                else if (prop === \"request\") {\n                    request = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return Object.assign(Object.assign({}, response), { request,\n            headers });\n    }\n}\n/**\n * A helper to convert back to a PipelineResponse\n * @param compatResponse - A response compatible with `HttpOperationResponse` from core-http.\n */\nfunction toPipelineResponse(compatResponse) {\n    const extendedCompatResponse = compatResponse;\n    const response = extendedCompatResponse[originalResponse];\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(compatResponse.headers.toJson({ preserveCase: true }));\n    if (response) {\n        response.headers = headers;\n        return response;\n    }\n    else {\n        return Object.assign(Object.assign({}, compatResponse), { headers, request: (0,_util_js__WEBPACK_IMPORTED_MODULE_1__.toPipelineRequest)(compatResponse.request) });\n    }\n}\n//# sourceMappingURL=response.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/response.js?");

/***/ }),

/***/ "./node_modules/@azure/core-http-compat/dist/browser/util.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@azure/core-http-compat/dist/browser/util.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpHeaders: () => (/* binding */ HttpHeaders),\n/* harmony export */   toHttpHeadersLike: () => (/* binding */ toHttpHeadersLike),\n/* harmony export */   toPipelineRequest: () => (/* binding */ toPipelineRequest),\n/* harmony export */   toWebResourceLike: () => (/* binding */ toWebResourceLike)\n/* harmony export */ });\n/* harmony import */ var _azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-rest-pipeline */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// We use a custom symbol to cache a reference to the original request without\n// exposing it on the public interface.\nconst originalRequestSymbol = Symbol(\"Original PipelineRequest\");\n// Symbol.for() will return the same symbol if it's already been created\n// This particular one is used in core-client to handle the case of when a request is\n// cloned but we need to retrieve the OperationSpec and OperationArguments from the\n// original request.\nconst originalClientRequestSymbol = Symbol.for(\"@azure/core-client original request\");\nfunction toPipelineRequest(webResource, options = {}) {\n    const compatWebResource = webResource;\n    const request = compatWebResource[originalRequestSymbol];\n    const headers = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)(webResource.headers.toJson({ preserveCase: true }));\n    if (request) {\n        request.headers = headers;\n        return request;\n    }\n    else {\n        const newRequest = (0,_azure_core_rest_pipeline__WEBPACK_IMPORTED_MODULE_0__.createPipelineRequest)({\n            url: webResource.url,\n            method: webResource.method,\n            headers,\n            withCredentials: webResource.withCredentials,\n            timeout: webResource.timeout,\n            requestId: webResource.requestId,\n            abortSignal: webResource.abortSignal,\n            body: webResource.body,\n            formData: webResource.formData,\n            disableKeepAlive: !!webResource.keepAlive,\n            onDownloadProgress: webResource.onDownloadProgress,\n            onUploadProgress: webResource.onUploadProgress,\n            proxySettings: webResource.proxySettings,\n            streamResponseStatusCodes: webResource.streamResponseStatusCodes,\n        });\n        if (options.originalRequest) {\n            newRequest[originalClientRequestSymbol] =\n                options.originalRequest;\n        }\n        return newRequest;\n    }\n}\nfunction toWebResourceLike(request, options) {\n    var _a;\n    const originalRequest = (_a = options === null || options === void 0 ? void 0 : options.originalRequest) !== null && _a !== void 0 ? _a : request;\n    const webResource = {\n        url: request.url,\n        method: request.method,\n        headers: toHttpHeadersLike(request.headers),\n        withCredentials: request.withCredentials,\n        timeout: request.timeout,\n        requestId: request.headers.get(\"x-ms-client-request-id\") || request.requestId,\n        abortSignal: request.abortSignal,\n        body: request.body,\n        formData: request.formData,\n        keepAlive: !!request.disableKeepAlive,\n        onDownloadProgress: request.onDownloadProgress,\n        onUploadProgress: request.onUploadProgress,\n        proxySettings: request.proxySettings,\n        streamResponseStatusCodes: request.streamResponseStatusCodes,\n        clone() {\n            throw new Error(\"Cannot clone a non-proxied WebResourceLike\");\n        },\n        prepare() {\n            throw new Error(\"WebResourceLike.prepare() is not supported by @azure/core-http-compat\");\n        },\n        validateRequestProperties() {\n            /** do nothing */\n        },\n    };\n    if (options === null || options === void 0 ? void 0 : options.createProxy) {\n        return new Proxy(webResource, {\n            get(target, prop, receiver) {\n                if (prop === originalRequestSymbol) {\n                    return request;\n                }\n                else if (prop === \"clone\") {\n                    return () => {\n                        return toWebResourceLike(toPipelineRequest(webResource, { originalRequest }), {\n                            createProxy: true,\n                            originalRequest,\n                        });\n                    };\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n            set(target, prop, value, receiver) {\n                if (prop === \"keepAlive\") {\n                    request.disableKeepAlive = !value;\n                }\n                const passThroughProps = [\n                    \"url\",\n                    \"method\",\n                    \"withCredentials\",\n                    \"timeout\",\n                    \"requestId\",\n                    \"abortSignal\",\n                    \"body\",\n                    \"formData\",\n                    \"onDownloadProgress\",\n                    \"onUploadProgress\",\n                    \"proxySettings\",\n                    \"streamResponseStatusCodes\",\n                ];\n                if (typeof prop === \"string\" && passThroughProps.includes(prop)) {\n                    request[prop] = value;\n                }\n                return Reflect.set(target, prop, value, receiver);\n            },\n        });\n    }\n    else {\n        return webResource;\n    }\n}\n/**\n * Converts HttpHeaders from core-rest-pipeline to look like\n * HttpHeaders from core-http.\n * @param headers - HttpHeaders from core-rest-pipeline\n * @returns HttpHeaders as they looked in core-http\n */\nfunction toHttpHeadersLike(headers) {\n    return new HttpHeaders(headers.toJSON({ preserveCase: true }));\n}\n/**\n * A collection of HttpHeaders that can be sent with a HTTP request.\n */\nfunction getHeaderKey(headerName) {\n    return headerName.toLowerCase();\n}\n/**\n * A collection of HTTP header key/value pairs.\n */\nclass HttpHeaders {\n    constructor(rawHeaders) {\n        this._headersMap = {};\n        if (rawHeaders) {\n            for (const headerName in rawHeaders) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param headerName - The name of the header to set. This value is case-insensitive.\n     * @param headerValue - The value of the header to set.\n     */\n    set(headerName, headerValue) {\n        this._headersMap[getHeaderKey(headerName)] = {\n            name: headerName,\n            value: headerValue.toString(),\n        };\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param headerName - The name of the header.\n     */\n    get(headerName) {\n        const header = this._headersMap[getHeaderKey(headerName)];\n        return !header ? undefined : header.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     */\n    contains(headerName) {\n        return !!this._headersMap[getHeaderKey(headerName)];\n    }\n    /**\n     * Remove the header with the provided headerName. Return whether or not the header existed and\n     * was removed.\n     * @param headerName - The name of the header to remove.\n     */\n    remove(headerName) {\n        const result = this.contains(headerName);\n        delete this._headersMap[getHeaderKey(headerName)];\n        return result;\n    }\n    /**\n     * Get the headers that are contained this collection as an object.\n     */\n    rawHeaders() {\n        return this.toJson({ preserveCase: true });\n    }\n    /**\n     * Get the headers that are contained in this collection as an array.\n     */\n    headersArray() {\n        const headers = [];\n        for (const headerKey in this._headersMap) {\n            headers.push(this._headersMap[headerKey]);\n        }\n        return headers;\n    }\n    /**\n     * Get the header names that are contained in this collection.\n     */\n    headerNames() {\n        const headerNames = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerNames.push(headers[i].name);\n        }\n        return headerNames;\n    }\n    /**\n     * Get the header values that are contained in this collection.\n     */\n    headerValues() {\n        const headerValues = [];\n        const headers = this.headersArray();\n        for (let i = 0; i < headers.length; ++i) {\n            headerValues.push(headers[i].value);\n        }\n        return headerValues;\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJson(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[header.name] = header.value;\n            }\n        }\n        else {\n            for (const headerKey in this._headersMap) {\n                const header = this._headersMap[headerKey];\n                result[getHeaderKey(header.name)] = header.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJson({ preserveCase: true }));\n    }\n    /**\n     * Create a deep clone/copy of this HttpHeaders collection.\n     */\n    clone() {\n        const resultPreservingCasing = {};\n        for (const headerKey in this._headersMap) {\n            const header = this._headersMap[headerKey];\n            resultPreservingCasing[header.name] = header.value;\n        }\n        return new HttpHeaders(resultPreservingCasing);\n    }\n}\n//# sourceMappingURL=util.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-http-compat/dist/browser/util.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RETRY_POLICY_COUNT: () => (/* binding */ DEFAULT_RETRY_POLICY_COUNT),\n/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst SDK_VERSION = \"1.18.2\";\nconst DEFAULT_RETRY_POLICY_COUNT = 3;\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineFromOptions: () => (/* binding */ createPipelineFromOptions)\n/* harmony export */ });\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js\");\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pipeline.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nfunction createPipelineFromOptions(options) {\n    var _a;\n    const pipeline = (0,_pipeline_js__WEBPACK_IMPORTED_MODULE_1__.createEmptyPipeline)();\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        if (options.tlsOptions) {\n            pipeline.addPolicy((0,_policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_11__.tlsPolicy)(options.tlsOptions));\n        }\n        pipeline.addPolicy((0,_policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_9__.proxyPolicy)(options.proxyOptions));\n        pipeline.addPolicy((0,_policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_5__.decompressResponsePolicy)());\n    }\n    pipeline.addPolicy((0,_policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_7__.formDataPolicy)(), { beforePolicies: [_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicyName] });\n    pipeline.addPolicy((0,_policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_3__.userAgentPolicy)(options.userAgentOptions));\n    pipeline.addPolicy((0,_policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_10__.setClientRequestIdPolicy)((_a = options.telemetryOptions) === null || _a === void 0 ? void 0 : _a.clientRequestIdHeaderName));\n    // The multipart policy is added after policies with no phase, so that\n    // policies can be added between it and formDataPolicy to modify\n    // properties (e.g., making the boundary constant in recorded tests).\n    pipeline.addPolicy((0,_policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_4__.multipartPolicy)(), { afterPhase: \"Deserialize\" });\n    pipeline.addPolicy((0,_policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_6__.defaultRetryPolicy)(options.retryOptions), { phase: \"Retry\" });\n    pipeline.addPolicy((0,_policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_12__.tracingPolicy)(Object.assign(Object.assign({}, options.userAgentOptions), options.loggingOptions)), {\n        afterPhase: \"Retry\",\n    });\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_8__.isNodeLike) {\n        // Both XHR and Fetch expect to handle redirects automatically,\n        // so only include this policy when we're in Node.\n        pipeline.addPolicy((0,_policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_2__.redirectPolicy)(options.redirectOptions), { afterPhase: \"Retry\" });\n    }\n    pipeline.addPolicy((0,_policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_0__.logPolicy)(options.loggingOptions), { afterPhase: \"Sign\" });\n    return pipeline;\n}\n//# sourceMappingURL=createPipelineFromOptions.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultHttpClient: () => (/* binding */ createDefaultHttpClient)\n/* harmony export */ });\n/* harmony import */ var _fetchHttpClient_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fetchHttpClient.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nfunction createDefaultHttpClient() {\n    return (0,_fetchHttpClient_js__WEBPACK_IMPORTED_MODULE_0__.createFetchHttpClient)();\n}\n//# sourceMappingURL=defaultHttpClient-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFetchHttpClient: () => (/* binding */ createFetchHttpClient)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"./node_modules/@azure/abort-controller/dist/browser/index.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./restError.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./httpHeaders.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js\");\n/* harmony import */ var _util_typeGuards_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/typeGuards.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * Checks if the body is a Blob or Blob-like\n */\nfunction isBlob(body) {\n    // File objects count as a type of Blob, so we want to use instanceof explicitly\n    return (typeof Blob === \"function\" || typeof Blob === \"object\") && body instanceof Blob;\n}\n/**\n * A HttpClient implementation that uses window.fetch to send HTTP requests.\n * @internal\n */\nclass FetchHttpClient {\n    /**\n     * Makes a request over an underlying transport layer and returns the response.\n     * @param request - The request to be made.\n     */\n    async sendRequest(request) {\n        const url = new URL(request.url);\n        const isInsecure = url.protocol !== \"https:\";\n        if (isInsecure && !request.allowInsecureConnection) {\n            throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n        }\n        if (request.proxySettings) {\n            throw new Error(\"HTTP proxy is not supported in browser environment\");\n        }\n        try {\n            return await makeRequest(request);\n        }\n        catch (e) {\n            throw getError(e, request);\n        }\n    }\n}\n/**\n * Sends a request\n */\nasync function makeRequest(request) {\n    const { abortController, abortControllerCleanup } = setupAbortSignal(request);\n    try {\n        const headers = buildFetchHeaders(request.headers);\n        const { streaming, body: requestBody } = buildRequestBody(request);\n        const requestInit = Object.assign(Object.assign({ body: requestBody, method: request.method, headers: headers, signal: abortController.signal }, (\"credentials\" in Request.prototype\n            ? { credentials: request.withCredentials ? \"include\" : \"same-origin\" }\n            : {})), (\"cache\" in Request.prototype ? { cache: \"no-store\" } : {}));\n        // According to https://fetch.spec.whatwg.org/#fetch-method,\n        // init.duplex must be set when body is a ReadableStream object.\n        // currently \"half\" is the only valid value.\n        if (streaming) {\n            requestInit.duplex = \"half\";\n        }\n        /**\n         * Developers of the future:\n         * Do not set redirect: \"manual\" as part\n         * of request options.\n         * It will not work as you expect.\n         */\n        const response = await fetch(request.url, requestInit);\n        // If we're uploading a blob, we need to fire the progress event manually\n        if (isBlob(request.body) && request.onUploadProgress) {\n            request.onUploadProgress({ loadedBytes: request.body.size });\n        }\n        return buildPipelineResponse(response, request, abortControllerCleanup);\n    }\n    catch (e) {\n        abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();\n        throw e;\n    }\n}\n/**\n * Creates a pipeline response from a Fetch response;\n */\nasync function buildPipelineResponse(httpResponse, request, abortControllerCleanup) {\n    var _a, _b;\n    const headers = buildPipelineHeaders(httpResponse);\n    const response = {\n        request,\n        headers,\n        status: httpResponse.status,\n    };\n    const bodyStream = (0,_util_typeGuards_js__WEBPACK_IMPORTED_MODULE_3__.isWebReadableStream)(httpResponse.body)\n        ? buildBodyStream(httpResponse.body, {\n            onProgress: request.onDownloadProgress,\n            onEnd: abortControllerCleanup,\n        })\n        : httpResponse.body;\n    if (\n    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n    ((_a = request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(Number.POSITIVE_INFINITY)) ||\n        ((_b = request.streamResponseStatusCodes) === null || _b === void 0 ? void 0 : _b.has(response.status))) {\n        if (request.enableBrowserStreams) {\n            response.browserStreamBody = bodyStream !== null && bodyStream !== void 0 ? bodyStream : undefined;\n        }\n        else {\n            const responseStream = new Response(bodyStream);\n            response.blobBody = responseStream.blob();\n            abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();\n        }\n    }\n    else {\n        const responseStream = new Response(bodyStream);\n        response.bodyAsText = await responseStream.text();\n        abortControllerCleanup === null || abortControllerCleanup === void 0 ? void 0 : abortControllerCleanup();\n    }\n    return response;\n}\nfunction setupAbortSignal(request) {\n    const abortController = new AbortController();\n    // Cleanup function\n    let abortControllerCleanup;\n    /**\n     * Attach an abort listener to the request\n     */\n    let abortListener;\n    if (request.abortSignal) {\n        if (request.abortSignal.aborted) {\n            throw new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(\"The operation was aborted.\");\n        }\n        abortListener = (event) => {\n            if (event.type === \"abort\") {\n                abortController.abort();\n            }\n        };\n        request.abortSignal.addEventListener(\"abort\", abortListener);\n        abortControllerCleanup = () => {\n            var _a;\n            if (abortListener) {\n                (_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"abort\", abortListener);\n            }\n        };\n    }\n    // If a timeout was passed, call the abort signal once the time elapses\n    if (request.timeout > 0) {\n        setTimeout(() => {\n            abortController.abort();\n        }, request.timeout);\n    }\n    return { abortController, abortControllerCleanup };\n}\n/**\n * Gets the specific error\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction getError(e, request) {\n    var _a;\n    if (e && (e === null || e === void 0 ? void 0 : e.name) === \"AbortError\") {\n        return e;\n    }\n    else {\n        return new _restError_js__WEBPACK_IMPORTED_MODULE_1__.RestError(`Error sending request: ${e.message}`, {\n            code: (_a = e === null || e === void 0 ? void 0 : e.code) !== null && _a !== void 0 ? _a : _restError_js__WEBPACK_IMPORTED_MODULE_1__.RestError.REQUEST_SEND_ERROR,\n            request,\n        });\n    }\n}\n/**\n * Converts PipelineRequest headers to Fetch headers\n */\nfunction buildFetchHeaders(pipelineHeaders) {\n    const headers = new Headers();\n    for (const [name, value] of pipelineHeaders) {\n        headers.append(name, value);\n    }\n    return headers;\n}\nfunction buildPipelineHeaders(httpResponse) {\n    const responseHeaders = (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_2__.createHttpHeaders)();\n    for (const [name, value] of httpResponse.headers) {\n        responseHeaders.set(name, value);\n    }\n    return responseHeaders;\n}\nfunction buildRequestBody(request) {\n    const body = typeof request.body === \"function\" ? request.body() : request.body;\n    if ((0,_util_typeGuards_js__WEBPACK_IMPORTED_MODULE_3__.isNodeReadableStream)(body)) {\n        throw new Error(\"Node streams are not supported in browser environment.\");\n    }\n    return (0,_util_typeGuards_js__WEBPACK_IMPORTED_MODULE_3__.isWebReadableStream)(body)\n        ? { streaming: true, body: buildBodyStream(body, { onProgress: request.onUploadProgress }) }\n        : { streaming: false, body };\n}\n/**\n * Reads the request/response original stream and stream it through a new\n * ReadableStream, this is done to be able to report progress in a way that\n * all modern browsers support. TransformStreams would be an alternative,\n * however they are not yet supported by all browsers i.e Firefox\n */\nfunction buildBodyStream(readableStream, options = {}) {\n    let loadedBytes = 0;\n    const { onProgress, onEnd } = options;\n    // If the current browser supports pipeThrough we use a TransformStream\n    // to report progress\n    if (isTransformStreamSupported(readableStream)) {\n        return readableStream.pipeThrough(new TransformStream({\n            transform(chunk, controller) {\n                if (chunk === null) {\n                    controller.terminate();\n                    return;\n                }\n                controller.enqueue(chunk);\n                loadedBytes += chunk.length;\n                if (onProgress) {\n                    onProgress({ loadedBytes });\n                }\n            },\n            flush() {\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n            },\n        }));\n    }\n    else {\n        // If we can't use transform streams, wrap the original stream in a new readable stream\n        // and use pull to enqueue each chunk and report progress.\n        const reader = readableStream.getReader();\n        return new ReadableStream({\n            async pull(controller) {\n                var _a;\n                const { done, value } = await reader.read();\n                // When no more data needs to be consumed, break the reading\n                if (done || !value) {\n                    onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n                    // Close the stream\n                    controller.close();\n                    reader.releaseLock();\n                    return;\n                }\n                loadedBytes += (_a = value === null || value === void 0 ? void 0 : value.length) !== null && _a !== void 0 ? _a : 0;\n                // Enqueue the next data chunk into our target stream\n                controller.enqueue(value);\n                if (onProgress) {\n                    onProgress({ loadedBytes });\n                }\n            },\n            cancel(reason) {\n                onEnd === null || onEnd === void 0 ? void 0 : onEnd();\n                return reader.cancel(reason);\n            },\n        });\n    }\n}\n/**\n * Create a new HttpClient instance for the browser environment.\n * @internal\n */\nfunction createFetchHttpClient() {\n    return new FetchHttpClient();\n}\nfunction isTransformStreamSupported(readableStream) {\n    return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;\n}\n//# sourceMappingURL=fetchHttpClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/fetchHttpClient.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createHttpHeaders: () => (/* binding */ createHttpHeaders)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction normalizeName(name) {\n    return name.toLowerCase();\n}\nfunction* headerIterator(map) {\n    for (const entry of map.values()) {\n        yield [entry.name, entry.value];\n    }\n}\nclass HttpHeadersImpl {\n    constructor(rawHeaders) {\n        this._headersMap = new Map();\n        if (rawHeaders) {\n            for (const headerName of Object.keys(rawHeaders)) {\n                this.set(headerName, rawHeaders[headerName]);\n            }\n        }\n    }\n    /**\n     * Set a header in this collection with the provided name and value. The name is\n     * case-insensitive.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     * @param value - The value of the header to set.\n     */\n    set(name, value) {\n        this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n    }\n    /**\n     * Get the header value for the provided header name, or undefined if no header exists in this\n     * collection with the provided name.\n     * @param name - The name of the header. This value is case-insensitive.\n     */\n    get(name) {\n        var _a;\n        return (_a = this._headersMap.get(normalizeName(name))) === null || _a === void 0 ? void 0 : _a.value;\n    }\n    /**\n     * Get whether or not this header collection contains a header entry for the provided header name.\n     * @param name - The name of the header to set. This value is case-insensitive.\n     */\n    has(name) {\n        return this._headersMap.has(normalizeName(name));\n    }\n    /**\n     * Remove the header with the provided headerName.\n     * @param name - The name of the header to remove.\n     */\n    delete(name) {\n        this._headersMap.delete(normalizeName(name));\n    }\n    /**\n     * Get the JSON object representation of this HTTP header collection.\n     */\n    toJSON(options = {}) {\n        const result = {};\n        if (options.preserveCase) {\n            for (const entry of this._headersMap.values()) {\n                result[entry.name] = entry.value;\n            }\n        }\n        else {\n            for (const [normalizedName, entry] of this._headersMap) {\n                result[normalizedName] = entry.value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Get the string representation of this HTTP header collection.\n     */\n    toString() {\n        return JSON.stringify(this.toJSON({ preserveCase: true }));\n    }\n    /**\n     * Iterate over tuples of header [name, value] pairs.\n     */\n    [Symbol.iterator]() {\n        return headerIterator(this._headersMap);\n    }\n}\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nfunction createHttpHeaders(rawHeaders) {\n    return new HttpHeadersImpl(rawHeaders);\n}\n//# sourceMappingURL=httpHeaders.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.RestError),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* reexport safe */ _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__.auxiliaryAuthenticationHeaderPolicyName),\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* reexport safe */ _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__.bearerTokenAuthenticationPolicyName),\n/* harmony export */   createDefaultHttpClient: () => (/* reexport safe */ _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultHttpClient),\n/* harmony export */   createEmptyPipeline: () => (/* reexport safe */ _pipeline_js__WEBPACK_IMPORTED_MODULE_0__.createEmptyPipeline),\n/* harmony export */   createFile: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_24__.createFile),\n/* harmony export */   createFileFromStream: () => (/* reexport safe */ _util_file_js__WEBPACK_IMPORTED_MODULE_24__.createFileFromStream),\n/* harmony export */   createHttpHeaders: () => (/* reexport safe */ _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__.createHttpHeaders),\n/* harmony export */   createPipelineFromOptions: () => (/* reexport safe */ _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__.createPipelineFromOptions),\n/* harmony export */   createPipelineRequest: () => (/* reexport safe */ _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__.createPipelineRequest),\n/* harmony export */   decompressResponsePolicy: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* reexport safe */ _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__.decompressResponsePolicyName),\n/* harmony export */   defaultRetryPolicy: () => (/* reexport safe */ _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__.defaultRetryPolicy),\n/* harmony export */   exponentialRetryPolicy: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* reexport safe */ _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__.exponentialRetryPolicyName),\n/* harmony export */   formDataPolicy: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* reexport safe */ _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__.formDataPolicyName),\n/* harmony export */   getDefaultProxySettings: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.getDefaultProxySettings),\n/* harmony export */   isRestError: () => (/* reexport safe */ _restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError),\n/* harmony export */   logPolicy: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicy),\n/* harmony export */   logPolicyName: () => (/* reexport safe */ _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__.logPolicyName),\n/* harmony export */   multipartPolicy: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* reexport safe */ _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__.multipartPolicyName),\n/* harmony export */   ndJsonPolicy: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* reexport safe */ _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__.ndJsonPolicyName),\n/* harmony export */   proxyPolicy: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* reexport safe */ _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__.proxyPolicyName),\n/* harmony export */   redirectPolicy: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* reexport safe */ _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__.redirectPolicyName),\n/* harmony export */   retryPolicy: () => (/* reexport safe */ _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__.retryPolicy),\n/* harmony export */   setClientRequestIdPolicy: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* reexport safe */ _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__.setClientRequestIdPolicyName),\n/* harmony export */   systemErrorRetryPolicy: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* reexport safe */ _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__.systemErrorRetryPolicyName),\n/* harmony export */   throttlingRetryPolicy: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* reexport safe */ _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__.throttlingRetryPolicyName),\n/* harmony export */   tlsPolicy: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* reexport safe */ _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__.tlsPolicyName),\n/* harmony export */   tracingPolicy: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* reexport safe */ _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__.tracingPolicyName),\n/* harmony export */   userAgentPolicy: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* reexport safe */ _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__.userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _pipeline_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pipeline.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js\");\n/* harmony import */ var _createPipelineFromOptions_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createPipelineFromOptions.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/createPipelineFromOptions.js\");\n/* harmony import */ var _defaultHttpClient_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultHttpClient.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/defaultHttpClient.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpHeaders.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js\");\n/* harmony import */ var _pipelineRequest_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pipelineRequest.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./restError.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js\");\n/* harmony import */ var _policies_decompressResponsePolicy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./policies/decompressResponsePolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js\");\n/* harmony import */ var _policies_exponentialRetryPolicy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./policies/exponentialRetryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/exponentialRetryPolicy.js\");\n/* harmony import */ var _policies_setClientRequestIdPolicy_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./policies/setClientRequestIdPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js\");\n/* harmony import */ var _policies_logPolicy_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./policies/logPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js\");\n/* harmony import */ var _policies_multipartPolicy_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./policies/multipartPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js\");\n/* harmony import */ var _policies_proxyPolicy_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./policies/proxyPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js\");\n/* harmony import */ var _policies_redirectPolicy_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./policies/redirectPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js\");\n/* harmony import */ var _policies_systemErrorRetryPolicy_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./policies/systemErrorRetryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/systemErrorRetryPolicy.js\");\n/* harmony import */ var _policies_throttlingRetryPolicy_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./policies/throttlingRetryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/throttlingRetryPolicy.js\");\n/* harmony import */ var _policies_retryPolicy_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./policies/retryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js\");\n/* harmony import */ var _policies_tracingPolicy_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./policies/tracingPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js\");\n/* harmony import */ var _policies_defaultRetryPolicy_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./policies/defaultRetryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js\");\n/* harmony import */ var _policies_userAgentPolicy_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./policies/userAgentPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js\");\n/* harmony import */ var _policies_tlsPolicy_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./policies/tlsPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js\");\n/* harmony import */ var _policies_formDataPolicy_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./policies/formDataPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js\");\n/* harmony import */ var _policies_bearerTokenAuthenticationPolicy_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./policies/bearerTokenAuthenticationPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js\");\n/* harmony import */ var _policies_ndJsonPolicy_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./policies/ndJsonPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/ndJsonPolicy.js\");\n/* harmony import */ var _policies_auxiliaryAuthenticationHeaderPolicy_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./policies/auxiliaryAuthenticationHeaderPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/auxiliaryAuthenticationHeaderPolicy.js\");\n/* harmony import */ var _util_file_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./util/file.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/log.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/log.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logger: () => (/* binding */ logger)\n/* harmony export */ });\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/logger */ \"./node_modules/@azure/logger/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst logger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_0__.createClientLogger)(\"core-rest-pipeline\");\n//# sourceMappingURL=log.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/log.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createEmptyPipeline: () => (/* binding */ createEmptyPipeline)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst ValidPhaseNames = new Set([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline {\n    constructor(policies) {\n        var _a;\n        this._policies = [];\n        this._policies = (_a = policies === null || policies === void 0 ? void 0 : policies.slice(0)) !== null && _a !== void 0 ? _a : [];\n        this._orderedPolicies = undefined;\n    }\n    addPolicy(policy, options = {}) {\n        if (options.phase && options.afterPhase) {\n            throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n        }\n        if (options.phase && !ValidPhaseNames.has(options.phase)) {\n            throw new Error(`Invalid phase name: ${options.phase}`);\n        }\n        if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n            throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n        }\n        this._policies.push({\n            policy,\n            options,\n        });\n        this._orderedPolicies = undefined;\n    }\n    removePolicy(options) {\n        const removedPolicies = [];\n        this._policies = this._policies.filter((policyDescriptor) => {\n            if ((options.name && policyDescriptor.policy.name === options.name) ||\n                (options.phase && policyDescriptor.options.phase === options.phase)) {\n                removedPolicies.push(policyDescriptor.policy);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n        this._orderedPolicies = undefined;\n        return removedPolicies;\n    }\n    sendRequest(httpClient, request) {\n        const policies = this.getOrderedPolicies();\n        const pipeline = policies.reduceRight((next, policy) => {\n            return (req) => {\n                return policy.sendRequest(req, next);\n            };\n        }, (req) => httpClient.sendRequest(req));\n        return pipeline(request);\n    }\n    getOrderedPolicies() {\n        if (!this._orderedPolicies) {\n            this._orderedPolicies = this.orderPolicies();\n        }\n        return this._orderedPolicies;\n    }\n    clone() {\n        return new HttpPipeline(this._policies);\n    }\n    static create() {\n        return new HttpPipeline();\n    }\n    orderPolicies() {\n        /**\n         * The goal of this method is to reliably order pipeline policies\n         * based on their declared requirements when they were added.\n         *\n         * Order is first determined by phase:\n         *\n         * 1. Serialize Phase\n         * 2. Policies not in a phase\n         * 3. Deserialize Phase\n         * 4. Retry Phase\n         * 5. Sign Phase\n         *\n         * Within each phase, policies are executed in the order\n         * they were added unless they were specified to execute\n         * before/after other policies or after a particular phase.\n         *\n         * To determine the final order, we will walk the policy list\n         * in phase order multiple times until all dependencies are\n         * satisfied.\n         *\n         * `afterPolicies` are the set of policies that must be\n         * executed before a given policy. This requirement is\n         * considered satisfied when each of the listed policies\n         * have been scheduled.\n         *\n         * `beforePolicies` are the set of policies that must be\n         * executed after a given policy. Since this dependency\n         * can be expressed by converting it into a equivalent\n         * `afterPolicies` declarations, they are normalized\n         * into that form for simplicity.\n         *\n         * An `afterPhase` dependency is considered satisfied when all\n         * policies in that phase have scheduled.\n         *\n         */\n        const result = [];\n        // Track all policies we know about.\n        const policyMap = new Map();\n        function createPhase(name) {\n            return {\n                name,\n                policies: new Set(),\n                hasRun: false,\n                hasAfterPolicies: false,\n            };\n        }\n        // Track policies for each phase.\n        const serializePhase = createPhase(\"Serialize\");\n        const noPhase = createPhase(\"None\");\n        const deserializePhase = createPhase(\"Deserialize\");\n        const retryPhase = createPhase(\"Retry\");\n        const signPhase = createPhase(\"Sign\");\n        // a list of phases in order\n        const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n        // Small helper function to map phase name to each Phase\n        function getPhase(phase) {\n            if (phase === \"Retry\") {\n                return retryPhase;\n            }\n            else if (phase === \"Serialize\") {\n                return serializePhase;\n            }\n            else if (phase === \"Deserialize\") {\n                return deserializePhase;\n            }\n            else if (phase === \"Sign\") {\n                return signPhase;\n            }\n            else {\n                return noPhase;\n            }\n        }\n        // First walk each policy and create a node to track metadata.\n        for (const descriptor of this._policies) {\n            const policy = descriptor.policy;\n            const options = descriptor.options;\n            const policyName = policy.name;\n            if (policyMap.has(policyName)) {\n                throw new Error(\"Duplicate policy names not allowed in pipeline\");\n            }\n            const node = {\n                policy,\n                dependsOn: new Set(),\n                dependants: new Set(),\n            };\n            if (options.afterPhase) {\n                node.afterPhase = getPhase(options.afterPhase);\n                node.afterPhase.hasAfterPolicies = true;\n            }\n            policyMap.set(policyName, node);\n            const phase = getPhase(options.phase);\n            phase.policies.add(node);\n        }\n        // Now that each policy has a node, connect dependency references.\n        for (const descriptor of this._policies) {\n            const { policy, options } = descriptor;\n            const policyName = policy.name;\n            const node = policyMap.get(policyName);\n            if (!node) {\n                throw new Error(`Missing node for policy ${policyName}`);\n            }\n            if (options.afterPolicies) {\n                for (const afterPolicyName of options.afterPolicies) {\n                    const afterNode = policyMap.get(afterPolicyName);\n                    if (afterNode) {\n                        // Linking in both directions helps later\n                        // when we want to notify dependants.\n                        node.dependsOn.add(afterNode);\n                        afterNode.dependants.add(node);\n                    }\n                }\n            }\n            if (options.beforePolicies) {\n                for (const beforePolicyName of options.beforePolicies) {\n                    const beforeNode = policyMap.get(beforePolicyName);\n                    if (beforeNode) {\n                        // To execute before another node, make it\n                        // depend on the current node.\n                        beforeNode.dependsOn.add(node);\n                        node.dependants.add(beforeNode);\n                    }\n                }\n            }\n        }\n        function walkPhase(phase) {\n            phase.hasRun = true;\n            // Sets iterate in insertion order\n            for (const node of phase.policies) {\n                if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n                    // If this node is waiting on a phase to complete,\n                    // we need to skip it for now.\n                    // Even if the phase is empty, we should wait for it\n                    // to be walked to avoid re-ordering policies.\n                    continue;\n                }\n                if (node.dependsOn.size === 0) {\n                    // If there's nothing else we're waiting for, we can\n                    // add this policy to the result list.\n                    result.push(node.policy);\n                    // Notify anything that depends on this policy that\n                    // the policy has been scheduled.\n                    for (const dependant of node.dependants) {\n                        dependant.dependsOn.delete(node);\n                    }\n                    policyMap.delete(node.policy.name);\n                    phase.policies.delete(node);\n                }\n            }\n        }\n        function walkPhases() {\n            for (const phase of orderedPhases) {\n                walkPhase(phase);\n                // if the phase isn't complete\n                if (phase.policies.size > 0 && phase !== noPhase) {\n                    if (!noPhase.hasRun) {\n                        // Try running noPhase to see if that unblocks this phase next tick.\n                        // This can happen if a phase that happens before noPhase\n                        // is waiting on a noPhase policy to complete.\n                        walkPhase(noPhase);\n                    }\n                    // Don't proceed to the next phase until this phase finishes.\n                    return;\n                }\n                if (phase.hasAfterPolicies) {\n                    // Run any policies unblocked by this phase\n                    walkPhase(noPhase);\n                }\n            }\n        }\n        // Iterate until we've put every node in the result list.\n        let iteration = 0;\n        while (policyMap.size > 0) {\n            iteration++;\n            const initialResultLength = result.length;\n            // Keep walking each phase in order until we can order every node.\n            walkPhases();\n            // The result list *should* get at least one larger each time\n            // after the first full pass.\n            // Otherwise, we're going to loop forever.\n            if (result.length <= initialResultLength && iteration > 1) {\n                throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n            }\n        }\n        return result;\n    }\n}\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nfunction createEmptyPipeline() {\n    return HttpPipeline.create();\n}\n//# sourceMappingURL=pipeline.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/pipeline.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPipelineRequest: () => (/* binding */ createPipelineRequest)\n/* harmony export */ });\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./httpHeaders.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nclass PipelineRequestImpl {\n    constructor(options) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        this.url = options.url;\n        this.body = options.body;\n        this.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_0__.createHttpHeaders)();\n        this.method = (_b = options.method) !== null && _b !== void 0 ? _b : \"GET\";\n        this.timeout = (_c = options.timeout) !== null && _c !== void 0 ? _c : 0;\n        this.multipartBody = options.multipartBody;\n        this.formData = options.formData;\n        this.disableKeepAlive = (_d = options.disableKeepAlive) !== null && _d !== void 0 ? _d : false;\n        this.proxySettings = options.proxySettings;\n        this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n        this.withCredentials = (_e = options.withCredentials) !== null && _e !== void 0 ? _e : false;\n        this.abortSignal = options.abortSignal;\n        this.tracingOptions = options.tracingOptions;\n        this.onUploadProgress = options.onUploadProgress;\n        this.onDownloadProgress = options.onDownloadProgress;\n        this.requestId = options.requestId || (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_1__.randomUUID)();\n        this.allowInsecureConnection = (_f = options.allowInsecureConnection) !== null && _f !== void 0 ? _f : false;\n        this.enableBrowserStreams = (_g = options.enableBrowserStreams) !== null && _g !== void 0 ? _g : false;\n    }\n}\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nfunction createPipelineRequest(options) {\n    return new PipelineRequestImpl(options);\n}\n//# sourceMappingURL=pipelineRequest.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/pipelineRequest.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/auxiliaryAuthenticationHeaderPolicy.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/auxiliaryAuthenticationHeaderPolicy.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   auxiliaryAuthenticationHeaderPolicy: () => (/* binding */ auxiliaryAuthenticationHeaderPolicy),\n/* harmony export */   auxiliaryAuthenticationHeaderPolicyName: () => (/* binding */ auxiliaryAuthenticationHeaderPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/log.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */\nconst auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\nasync function sendAuthorizeRequest(options) {\n    var _a, _b;\n    const { scopes, getAccessToken, request } = options;\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n    };\n    return (_b = (_a = (await getAccessToken(scopes, getTokenOptions))) === null || _a === void 0 ? void 0 : _a.token) !== null && _b !== void 0 ? _b : \"\";\n}\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */\nfunction auxiliaryAuthenticationHeaderPolicy(options) {\n    const { credentials, scopes } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const tokenCyclerMap = new WeakMap();\n    return {\n        name: auxiliaryAuthenticationHeaderPolicyName,\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            if (!credentials || credentials.length === 0) {\n                logger.info(`${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`);\n                return next(request);\n            }\n            const tokenPromises = [];\n            for (const credential of credentials) {\n                let getAccessToken = tokenCyclerMap.get(credential);\n                if (!getAccessToken) {\n                    getAccessToken = (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential);\n                    tokenCyclerMap.set(credential, getAccessToken);\n                }\n                tokenPromises.push(sendAuthorizeRequest({\n                    scopes: Array.isArray(scopes) ? scopes : [scopes],\n                    request,\n                    getAccessToken,\n                    logger,\n                }));\n            }\n            const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token) => Boolean(token));\n            if (auxiliaryTokens.length === 0) {\n                logger.warning(`None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`);\n                return next(request);\n            }\n            request.headers.set(AUTHORIZATION_AUXILIARY_HEADER, auxiliaryTokens.map((token) => `Bearer ${token}`).join(\", \"));\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=auxiliaryAuthenticationHeaderPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/auxiliaryAuthenticationHeaderPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bearerTokenAuthenticationPolicy: () => (/* binding */ bearerTokenAuthenticationPolicy),\n/* harmony export */   bearerTokenAuthenticationPolicyName: () => (/* binding */ bearerTokenAuthenticationPolicyName),\n/* harmony export */   parseChallenges: () => (/* binding */ parseChallenges)\n/* harmony export */ });\n/* harmony import */ var _util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/tokenCycler.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../log.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/log.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../restError.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nconst bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n/**\n * Try to send the given request.\n *\n * When a response is received, returns a tuple of the response received and, if the response was received\n * inside a thrown RestError, the RestError that was thrown.\n *\n * Otherwise, if an error was thrown while sending the request that did not provide an underlying response, it\n * will be rethrown.\n */\nasync function trySendRequest(request, next) {\n    try {\n        return [await next(request), undefined];\n    }\n    catch (e) {\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_2__.isRestError)(e) && e.response) {\n            return [e.response, e];\n        }\n        else {\n            throw e;\n        }\n    }\n}\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options) {\n    const { scopes, getAccessToken, request } = options;\n    // Enable CAE true by default\n    const getTokenOptions = {\n        abortSignal: request.abortSignal,\n        tracingOptions: request.tracingOptions,\n        enableCae: true,\n    };\n    const accessToken = await getAccessToken(scopes, getTokenOptions);\n    if (accessToken) {\n        options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n    }\n}\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction isChallengeResponse(response) {\n    return response.status === 401 && response.headers.has(\"WWW-Authenticate\");\n}\n/**\n * Re-authorize the request for CAE challenge.\n * The response containing the challenge is `options.response`.\n * If this method returns true, the underlying request will be sent once again.\n */\nasync function authorizeRequestOnCaeChallenge(onChallengeOptions, caeClaims) {\n    var _a;\n    const { scopes } = onChallengeOptions;\n    const accessToken = await onChallengeOptions.getAccessToken(scopes, {\n        enableCae: true,\n        claims: caeClaims,\n    });\n    if (!accessToken) {\n        return false;\n    }\n    onChallengeOptions.request.headers.set(\"Authorization\", `${(_a = accessToken.tokenType) !== null && _a !== void 0 ? _a : \"Bearer\"} ${accessToken.token}`);\n    return true;\n}\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nfunction bearerTokenAuthenticationPolicy(options) {\n    var _a, _b, _c;\n    const { credential, scopes, challengeCallbacks } = options;\n    const logger = options.logger || _log_js__WEBPACK_IMPORTED_MODULE_1__.logger;\n    const callbacks = {\n        authorizeRequest: (_b = (_a = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequest) === null || _a === void 0 ? void 0 : _a.bind(challengeCallbacks)) !== null && _b !== void 0 ? _b : defaultAuthorizeRequest,\n        authorizeRequestOnChallenge: (_c = challengeCallbacks === null || challengeCallbacks === void 0 ? void 0 : challengeCallbacks.authorizeRequestOnChallenge) === null || _c === void 0 ? void 0 : _c.bind(challengeCallbacks),\n    };\n    // This function encapsulates the entire process of reliably retrieving the token\n    // The options are left out of the public API until there's demand to configure this.\n    // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n    // in order to pass through the `options` object.\n    const getAccessToken = credential\n        ? (0,_util_tokenCycler_js__WEBPACK_IMPORTED_MODULE_0__.createTokenCycler)(credential /* , options */)\n        : () => Promise.resolve(null);\n    return {\n        name: bearerTokenAuthenticationPolicyName,\n        /**\n         * If there's no challenge parameter:\n         * - It will try to retrieve the token using the cache, or the credential's getToken.\n         * - Then it will try the next policy with or without the retrieved token.\n         *\n         * It uses the challenge parameters to:\n         * - Skip a first attempt to get the token from the credential if there's no cached token,\n         *   since it expects the token to be retrievable only after the challenge.\n         * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n         * - Send an initial request to receive the challenge if it fails.\n         * - Process a challenge if the response contains it.\n         * - Retrieve a token with the challenge information, then re-send the request.\n         */\n        async sendRequest(request, next) {\n            if (!request.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            await callbacks.authorizeRequest({\n                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                request,\n                getAccessToken,\n                logger,\n            });\n            let response;\n            let error;\n            let shouldSendRequest;\n            [response, error] = await trySendRequest(request, next);\n            if (isChallengeResponse(response)) {\n                let claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                // Handle CAE by default when receive CAE claim\n                if (claims) {\n                    let parsedClaim;\n                    // Return the response immediately if claims is not a valid base64 encoded string\n                    try {\n                        parsedClaim = atob(claims);\n                    }\n                    catch (e) {\n                        logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                        return response;\n                    }\n                    shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        response,\n                        request,\n                        getAccessToken,\n                        logger,\n                    }, parsedClaim);\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                }\n                else if (callbacks.authorizeRequestOnChallenge) {\n                    // Handle custom challenges when client provides custom callback\n                    shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n                        scopes: Array.isArray(scopes) ? scopes : [scopes],\n                        request,\n                        response,\n                        getAccessToken,\n                        logger,\n                    });\n                    // Send updated request and handle response for RestError\n                    if (shouldSendRequest) {\n                        [response, error] = await trySendRequest(request, next);\n                    }\n                    // If we get another CAE Claim, we will handle it by default and return whatever value we receive for this\n                    if (isChallengeResponse(response)) {\n                        claims = getCaeChallengeClaims(response.headers.get(\"WWW-Authenticate\"));\n                        if (claims) {\n                            let parsedClaim;\n                            try {\n                                parsedClaim = atob(claims);\n                            }\n                            catch (e) {\n                                logger.warning(`The WWW-Authenticate header contains \"claims\" that cannot be parsed. Unable to perform the Continuous Access Evaluation authentication flow. Unparsable claims: ${claims}`);\n                                return response;\n                            }\n                            shouldSendRequest = await authorizeRequestOnCaeChallenge({\n                                scopes: Array.isArray(scopes) ? scopes : [scopes],\n                                response,\n                                request,\n                                getAccessToken,\n                                logger,\n                            }, parsedClaim);\n                            // Send updated request and handle response for RestError\n                            if (shouldSendRequest) {\n                                [response, error] = await trySendRequest(request, next);\n                            }\n                        }\n                    }\n                }\n            }\n            if (error) {\n                throw error;\n            }\n            else {\n                return response;\n            }\n        },\n    };\n}\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Pop e=\"f\", g=\"h\"`.\n * Into: `[ { scheme: 'Bearer', params: { a: 'b', c: 'd' } }, { scheme: 'Pop', params: { e: 'f', g: 'h' } } ]`.\n *\n * @internal\n */\nfunction parseChallenges(challenges) {\n    // Challenge regex seperates the string to individual challenges with different schemes in the format `Scheme a=\"b\", c=d`\n    // The challenge regex captures parameteres with either quotes values or unquoted values\n    const challengeRegex = /(\\w+)\\s+((?:\\w+=(?:\"[^\"]*\"|[^,]*),?\\s*)+)/g;\n    // Parameter regex captures the claims group removed from the scheme in the format `a=\"b\"` and `c=\"d\"`\n    // CAE challenge always have quoted parameters. For more reference, https://learn.microsoft.com/entra/identity-platform/claims-challenge\n    const paramRegex = /(\\w+)=\"([^\"]*)\"/g;\n    const parsedChallenges = [];\n    let match;\n    // Iterate over each challenge match\n    while ((match = challengeRegex.exec(challenges)) !== null) {\n        const scheme = match[1];\n        const paramsString = match[2];\n        const params = {};\n        let paramMatch;\n        // Iterate over each parameter match\n        while ((paramMatch = paramRegex.exec(paramsString)) !== null) {\n            params[paramMatch[1]] = paramMatch[2];\n        }\n        parsedChallenges.push({ scheme, params });\n    }\n    return parsedChallenges;\n}\n/**\n * Parse a pipeline response and look for a CAE challenge with \"Bearer\" scheme\n * Return the value in the header without parsing the challenge\n * @internal\n */\nfunction getCaeChallengeClaims(challenges) {\n    var _a;\n    if (!challenges) {\n        return;\n    }\n    // Find all challenges present in the header\n    const parsedChallenges = parseChallenges(challenges);\n    return (_a = parsedChallenges.find((x) => x.scheme === \"Bearer\" && x.params.claims && x.params.error === \"insufficient_claims\")) === null || _a === void 0 ? void 0 : _a.params.claims;\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/bearerTokenAuthenticationPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decompressResponsePolicy: () => (/* binding */ decompressResponsePolicy),\n/* harmony export */   decompressResponsePolicyName: () => (/* binding */ decompressResponsePolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\nconst decompressResponsePolicyName = \"decompressResponsePolicy\";\n/**\n * decompressResponsePolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nfunction decompressResponsePolicy() {\n    throw new Error(\"decompressResponsePolicy is not supported in browser environment\");\n}\n//# sourceMappingURL=decompressResponsePolicy-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/decompressResponsePolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultRetryPolicy: () => (/* binding */ defaultRetryPolicy),\n/* harmony export */   defaultRetryPolicyName: () => (/* binding */ defaultRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../retryStrategies/throttlingRetryStrategy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./retryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nconst defaultRetryPolicyName = \"defaultRetryPolicy\";\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nfunction defaultRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: defaultRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_2__.retryPolicy)([(0,_retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__.throttlingRetryStrategy)(), (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(options)], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=defaultRetryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/defaultRetryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/exponentialRetryPolicy.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/exponentialRetryPolicy.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryPolicy: () => (/* binding */ exponentialRetryPolicy),\n/* harmony export */   exponentialRetryPolicyName: () => (/* binding */ exponentialRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nconst exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nfunction exponentialRetryPolicy(options = {}) {\n    var _a;\n    return (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([\n        (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), { ignoreSystemErrors: true })),\n    ], {\n        maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n    });\n}\n//# sourceMappingURL=exponentialRetryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/exponentialRetryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formDataPolicy: () => (/* binding */ formDataPolicy),\n/* harmony export */   formDataPolicyName: () => (/* binding */ formDataPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../httpHeaders.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/httpHeaders.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nconst formDataPolicyName = \"formDataPolicy\";\nfunction formDataToFormDataMap(formData) {\n    var _a;\n    const formDataMap = {};\n    for (const [key, value] of formData.entries()) {\n        (_a = formDataMap[key]) !== null && _a !== void 0 ? _a : (formDataMap[key] = []);\n        formDataMap[key].push(value);\n    }\n    return formDataMap;\n}\n/**\n * A policy that encodes FormData on the request into the body.\n */\nfunction formDataPolicy() {\n    return {\n        name: formDataPolicyName,\n        async sendRequest(request, next) {\n            if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n                request.formData = formDataToFormDataMap(request.body);\n                request.body = undefined;\n            }\n            if (request.formData) {\n                const contentType = request.headers.get(\"Content-Type\");\n                if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n                    request.body = wwwFormUrlEncode(request.formData);\n                }\n                else {\n                    await prepareFormData(request.formData, request);\n                }\n                request.formData = undefined;\n            }\n            return next(request);\n        },\n    };\n}\nfunction wwwFormUrlEncode(formData) {\n    const urlSearchParams = new URLSearchParams();\n    for (const [key, value] of Object.entries(formData)) {\n        if (Array.isArray(value)) {\n            for (const subValue of value) {\n                urlSearchParams.append(key, subValue.toString());\n            }\n        }\n        else {\n            urlSearchParams.append(key, value.toString());\n        }\n    }\n    return urlSearchParams.toString();\n}\nasync function prepareFormData(formData, request) {\n    // validate content type (multipart/form-data)\n    const contentType = request.headers.get(\"Content-Type\");\n    if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n        // content type is specified and is not multipart/form-data. Exit.\n        return;\n    }\n    request.headers.set(\"Content-Type\", contentType !== null && contentType !== void 0 ? contentType : \"multipart/form-data\");\n    // set body to MultipartRequestBody using content from FormDataMap\n    const parts = [];\n    for (const [fieldName, values] of Object.entries(formData)) {\n        for (const value of Array.isArray(values) ? values : [values]) {\n            if (typeof value === \"string\") {\n                parts.push({\n                    headers: (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)({\n                        \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n                    }),\n                    body: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(value, \"utf-8\"),\n                });\n            }\n            else if (value === undefined || value === null || typeof value !== \"object\") {\n                throw new Error(`Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`);\n            }\n            else {\n                // using || instead of ?? here since if value.name is empty we should create a file name\n                const fileName = value.name || \"blob\";\n                const headers = (0,_httpHeaders_js__WEBPACK_IMPORTED_MODULE_1__.createHttpHeaders)();\n                headers.set(\"Content-Disposition\", `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`);\n                // again, || is used since an empty value.type means the content type is unset\n                headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n                parts.push({\n                    headers,\n                    body: value,\n                });\n            }\n        }\n    }\n    request.multipartBody = { parts };\n}\n//# sourceMappingURL=formDataPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/formDataPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logPolicy: () => (/* binding */ logPolicy),\n/* harmony export */   logPolicyName: () => (/* binding */ logPolicyName)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../log.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/log.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/sanitizer.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nconst logPolicyName = \"logPolicy\";\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nfunction logPolicy(options = {}) {\n    var _a;\n    const logger = (_a = options.logger) !== null && _a !== void 0 ? _a : _log_js__WEBPACK_IMPORTED_MODULE_0__.logger.info;\n    const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_1__.Sanitizer({\n        additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    return {\n        name: logPolicyName,\n        async sendRequest(request, next) {\n            if (!logger.enabled) {\n                return next(request);\n            }\n            logger(`Request: ${sanitizer.sanitize(request)}`);\n            const response = await next(request);\n            logger(`Response status code: ${response.status}`);\n            logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n            return response;\n        },\n    };\n}\n//# sourceMappingURL=logPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/logPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   multipartPolicy: () => (/* binding */ multipartPolicy),\n/* harmony export */   multipartPolicyName: () => (/* binding */ multipartPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _util_concat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/concat.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.js\");\n/* harmony import */ var _util_typeGuards_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/typeGuards.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nfunction generateBoundary() {\n    return `----AzSDKFormBoundary${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.randomUUID)()}`;\n}\nfunction encodeHeaders(headers) {\n    let result = \"\";\n    for (const [key, value] of headers) {\n        result += `${key}: ${value}\\r\\n`;\n    }\n    return result;\n}\nfunction getLength(source) {\n    if (source instanceof Uint8Array) {\n        return source.byteLength;\n    }\n    else if ((0,_util_typeGuards_js__WEBPACK_IMPORTED_MODULE_2__.isBlob)(source)) {\n        // if was created using createFile then -1 means we have an unknown size\n        return source.size === -1 ? undefined : source.size;\n    }\n    else {\n        return undefined;\n    }\n}\nfunction getTotalLength(sources) {\n    let total = 0;\n    for (const source of sources) {\n        const partLength = getLength(source);\n        if (partLength === undefined) {\n            return undefined;\n        }\n        else {\n            total += partLength;\n        }\n    }\n    return total;\n}\nasync function buildRequestBody(request, parts, boundary) {\n    const sources = [\n        (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(`--${boundary}`, \"utf-8\"),\n        ...parts.flatMap((part) => [\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"\\r\\n\", \"utf-8\"),\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(encodeHeaders(part.headers), \"utf-8\"),\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"\\r\\n\", \"utf-8\"),\n            part.body,\n            (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(`\\r\\n--${boundary}`, \"utf-8\"),\n        ]),\n        (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(\"--\\r\\n\\r\\n\", \"utf-8\"),\n    ];\n    const contentLength = getTotalLength(sources);\n    if (contentLength) {\n        request.headers.set(\"Content-Length\", contentLength);\n    }\n    request.body = await (0,_util_concat_js__WEBPACK_IMPORTED_MODULE_1__.concat)(sources);\n}\n/**\n * Name of multipart policy\n */\nconst multipartPolicyName = \"multipartPolicy\";\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(`abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`);\nfunction assertValidBoundary(boundary) {\n    if (boundary.length > maxBoundaryLength) {\n        throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n    }\n    if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n        throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n    }\n}\n/**\n * Pipeline policy for multipart requests\n */\nfunction multipartPolicy() {\n    return {\n        name: multipartPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!request.multipartBody) {\n                return next(request);\n            }\n            if (request.body) {\n                throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n            }\n            let boundary = request.multipartBody.boundary;\n            const contentTypeHeader = (_a = request.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"multipart/mixed\";\n            const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n            if (!parsedHeader) {\n                throw new Error(`Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`);\n            }\n            const [, contentType, parsedBoundary] = parsedHeader;\n            if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n                throw new Error(`Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`);\n            }\n            boundary !== null && boundary !== void 0 ? boundary : (boundary = parsedBoundary);\n            if (boundary) {\n                assertValidBoundary(boundary);\n            }\n            else {\n                boundary = generateBoundary();\n            }\n            request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n            await buildRequestBody(request, request.multipartBody.parts, boundary);\n            request.multipartBody = undefined;\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=multipartPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/multipartPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/ndJsonPolicy.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/ndJsonPolicy.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ndJsonPolicy: () => (/* binding */ ndJsonPolicy),\n/* harmony export */   ndJsonPolicyName: () => (/* binding */ ndJsonPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nconst ndJsonPolicyName = \"ndJsonPolicy\";\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nfunction ndJsonPolicy() {\n    return {\n        name: ndJsonPolicyName,\n        async sendRequest(request, next) {\n            // There currently isn't a good way to bypass the serializer\n            if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n                const body = JSON.parse(request.body);\n                if (Array.isArray(body)) {\n                    request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n                }\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=ndJsonPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/ndJsonPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProxySettings: () => (/* binding */ getDefaultProxySettings),\n/* harmony export */   proxyPolicy: () => (/* binding */ proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* binding */ proxyPolicyName),\n/* harmony export */   resetCachedProxyAgents: () => (/* binding */ resetCachedProxyAgents)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst proxyPolicyName = \"proxyPolicy\";\nconst errorMessage = \"proxyPolicy is not supported in browser environment\";\nfunction getDefaultProxySettings() {\n    throw new Error(errorMessage);\n}\n/**\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nfunction proxyPolicy() {\n    throw new Error(errorMessage);\n}\n/**\n * A function to reset the cached agents.\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n * @internal\n */\nfunction resetCachedProxyAgents() {\n    throw new Error(errorMessage);\n}\n//# sourceMappingURL=proxyPolicy.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultProxySettings: () => (/* reexport safe */ _proxyPolicy_common_js__WEBPACK_IMPORTED_MODULE_0__.getDefaultProxySettings),\n/* harmony export */   proxyPolicy: () => (/* reexport safe */ _proxyPolicy_common_js__WEBPACK_IMPORTED_MODULE_0__.proxyPolicy),\n/* harmony export */   proxyPolicyName: () => (/* reexport safe */ _proxyPolicy_common_js__WEBPACK_IMPORTED_MODULE_0__.proxyPolicyName),\n/* harmony export */   resetCachedProxyAgents: () => (/* reexport safe */ _proxyPolicy_common_js__WEBPACK_IMPORTED_MODULE_0__.resetCachedProxyAgents)\n/* harmony export */ });\n/* harmony import */ var _proxyPolicy_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./proxyPolicy.common.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n//# sourceMappingURL=proxyPolicy-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/proxyPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   redirectPolicy: () => (/* binding */ redirectPolicy),\n/* harmony export */   redirectPolicyName: () => (/* binding */ redirectPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nconst redirectPolicyName = \"redirectPolicy\";\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nfunction redirectPolicy(options = {}) {\n    const { maxRetries = 20 } = options;\n    return {\n        name: redirectPolicyName,\n        async sendRequest(request, next) {\n            const response = await next(request);\n            return handleRedirect(next, response, maxRetries);\n        },\n    };\n}\nasync function handleRedirect(next, response, maxRetries, currentRetries = 0) {\n    const { request, status, headers } = response;\n    const locationHeader = headers.get(\"location\");\n    if (locationHeader &&\n        (status === 300 ||\n            (status === 301 && allowedRedirect.includes(request.method)) ||\n            (status === 302 && allowedRedirect.includes(request.method)) ||\n            (status === 303 && request.method === \"POST\") ||\n            status === 307) &&\n        currentRetries < maxRetries) {\n        const url = new URL(locationHeader, request.url);\n        request.url = url.toString();\n        // POST request with Status code 303 should be converted into a\n        // redirected GET request if the redirect url is present in the location header\n        if (status === 303) {\n            request.method = \"GET\";\n            request.headers.delete(\"Content-Length\");\n            delete request.body;\n        }\n        request.headers.delete(\"Authorization\");\n        const res = await next(request);\n        return handleRedirect(next, res, maxRetries, currentRetries + 1);\n    }\n    return response;\n}\n//# sourceMappingURL=redirectPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/redirectPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   retryPolicy: () => (/* binding */ retryPolicy)\n/* harmony export */ });\n/* harmony import */ var _util_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/helpers.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js\");\n/* harmony import */ var _azure_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/logger */ \"./node_modules/@azure/logger/dist/browser/index.js\");\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @azure/abort-controller */ \"./node_modules/@azure/abort-controller/dist/browser/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\nconst retryPolicyLogger = (0,_azure_logger__WEBPACK_IMPORTED_MODULE_1__.createClientLogger)(\"core-rest-pipeline retryPolicy\");\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nfunction retryPolicy(strategies, options = { maxRetries: _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT }) {\n    const logger = options.logger || retryPolicyLogger;\n    return {\n        name: retryPolicyName,\n        async sendRequest(request, next) {\n            var _a, _b;\n            let response;\n            let responseError;\n            let retryCount = -1;\n            retryRequest: while (true) {\n                retryCount += 1;\n                response = undefined;\n                responseError = undefined;\n                try {\n                    logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n                    response = await next(request);\n                    logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n                }\n                catch (e) {\n                    logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n                    // RestErrors are valid targets for the retry strategies.\n                    // If none of the retry strategies can work with them, they will be thrown later in this policy.\n                    // If the received error is not a RestError, it is immediately thrown.\n                    responseError = e;\n                    if (!e || responseError.name !== \"RestError\") {\n                        throw e;\n                    }\n                    response = responseError.response;\n                }\n                if ((_a = request.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    logger.error(`Retry ${retryCount}: Request aborted.`);\n                    const abortError = new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_2__.AbortError();\n                    throw abortError;\n                }\n                if (retryCount >= ((_b = options.maxRetries) !== null && _b !== void 0 ? _b : _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_RETRY_POLICY_COUNT)) {\n                    logger.info(`Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`);\n                    if (responseError) {\n                        throw responseError;\n                    }\n                    else if (response) {\n                        return response;\n                    }\n                    else {\n                        throw new Error(\"Maximum retries reached with no response or error to throw\");\n                    }\n                }\n                logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n                strategiesLoop: for (const strategy of strategies) {\n                    const strategyLogger = strategy.logger || retryPolicyLogger;\n                    strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n                    const modifiers = strategy.retry({\n                        retryCount,\n                        response,\n                        responseError,\n                    });\n                    if (modifiers.skipStrategy) {\n                        strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n                        continue strategiesLoop;\n                    }\n                    const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n                    if (errorToThrow) {\n                        strategyLogger.error(`Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`, errorToThrow);\n                        throw errorToThrow;\n                    }\n                    if (retryAfterInMs || retryAfterInMs === 0) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`);\n                        await (0,_util_helpers_js__WEBPACK_IMPORTED_MODULE_0__.delay)(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n                        continue retryRequest;\n                    }\n                    if (redirectTo) {\n                        strategyLogger.info(`Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`);\n                        request.url = redirectTo;\n                        continue retryRequest;\n                    }\n                }\n                if (responseError) {\n                    logger.info(`None of the retry strategies could work with the received error. Throwing it.`);\n                    throw responseError;\n                }\n                if (response) {\n                    logger.info(`None of the retry strategies could work with the received response. Returning it.`);\n                    return response;\n                }\n                // If all the retries skip and there's no response,\n                // we're still in the retry loop, so a new request will be sent\n                // until `maxRetries` is reached.\n            }\n        },\n    };\n}\n//# sourceMappingURL=retryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setClientRequestIdPolicy: () => (/* binding */ setClientRequestIdPolicy),\n/* harmony export */   setClientRequestIdPolicyName: () => (/* binding */ setClientRequestIdPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nconst setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nfunction setClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n    return {\n        name: setClientRequestIdPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(requestIdHeaderName)) {\n                request.headers.set(requestIdHeaderName, request.requestId);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=setClientRequestIdPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/setClientRequestIdPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/systemErrorRetryPolicy.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/systemErrorRetryPolicy.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   systemErrorRetryPolicy: () => (/* binding */ systemErrorRetryPolicy),\n/* harmony export */   systemErrorRetryPolicyName: () => (/* binding */ systemErrorRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/exponentialRetryStrategy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nconst systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nfunction systemErrorRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: systemErrorRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([\n            (0,_retryStrategies_exponentialRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.exponentialRetryStrategy)(Object.assign(Object.assign({}, options), { ignoreHttpStatusCodes: true })),\n        ], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=systemErrorRetryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/systemErrorRetryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/throttlingRetryPolicy.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/throttlingRetryPolicy.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   throttlingRetryPolicy: () => (/* binding */ throttlingRetryPolicy),\n/* harmony export */   throttlingRetryPolicyName: () => (/* binding */ throttlingRetryPolicyName)\n/* harmony export */ });\n/* harmony import */ var _retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../retryStrategies/throttlingRetryStrategy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js\");\n/* harmony import */ var _retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./retryPolicy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/policies/retryPolicy.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n/**\n * Name of the {@link throttlingRetryPolicy}\n */\nconst throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */\nfunction throttlingRetryPolicy(options = {}) {\n    var _a;\n    return {\n        name: throttlingRetryPolicyName,\n        sendRequest: (0,_retryPolicy_js__WEBPACK_IMPORTED_MODULE_1__.retryPolicy)([(0,_retryStrategies_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_0__.throttlingRetryStrategy)()], {\n            maxRetries: (_a = options.maxRetries) !== null && _a !== void 0 ? _a : _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_RETRY_POLICY_COUNT,\n        }).sendRequest,\n    };\n}\n//# sourceMappingURL=throttlingRetryPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/throttlingRetryPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tlsPolicy: () => (/* binding */ tlsPolicy),\n/* harmony export */   tlsPolicyName: () => (/* binding */ tlsPolicyName)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Name of the TLS Policy\n */\nconst tlsPolicyName = \"tlsPolicy\";\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nfunction tlsPolicy(tlsSettings) {\n    return {\n        name: tlsPolicyName,\n        sendRequest: async (req, next) => {\n            // Users may define a request tlsSettings, honor those over the client level one\n            if (!req.tlsSettings) {\n                req.tlsSettings = tlsSettings;\n            }\n            return next(req);\n        },\n    };\n}\n//# sourceMappingURL=tlsPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tlsPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   tracingPolicy: () => (/* binding */ tracingPolicy),\n/* harmony export */   tracingPolicyName: () => (/* binding */ tracingPolicyName)\n/* harmony export */ });\n/* harmony import */ var _azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-tracing */ \"./node_modules/@azure/core-tracing/dist/browser/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/userAgent.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js\");\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../log.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/log.js\");\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _restError_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../restError.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/sanitizer.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nconst tracingPolicyName = \"tracingPolicy\";\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nfunction tracingPolicy(options = {}) {\n    const userAgentPromise = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_2__.getUserAgentValue)(options.userAgentPrefix);\n    const sanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_6__.Sanitizer({\n        additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n    });\n    const tracingClient = tryCreateTracingClient();\n    return {\n        name: tracingPolicyName,\n        async sendRequest(request, next) {\n            var _a;\n            if (!tracingClient) {\n                return next(request);\n            }\n            const userAgent = await userAgentPromise;\n            const spanAttributes = {\n                \"http.url\": sanitizer.sanitizeUrl(request.url),\n                \"http.method\": request.method,\n                \"http.user_agent\": userAgent,\n                requestId: request.requestId,\n            };\n            if (userAgent) {\n                spanAttributes[\"http.user_agent\"] = userAgent;\n            }\n            const { span, tracingContext } = (_a = tryCreateSpan(tracingClient, request, spanAttributes)) !== null && _a !== void 0 ? _a : {};\n            if (!span || !tracingContext) {\n                return next(request);\n            }\n            try {\n                const response = await tracingClient.withContext(tracingContext, next, request);\n                tryProcessResponse(span, response);\n                return response;\n            }\n            catch (err) {\n                tryProcessError(span, err);\n                throw err;\n            }\n        },\n    };\n}\nfunction tryCreateTracingClient() {\n    try {\n        return (0,_azure_core_tracing__WEBPACK_IMPORTED_MODULE_0__.createTracingClient)({\n            namespace: \"\",\n            packageName: \"@azure/core-rest-pipeline\",\n            packageVersion: _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION,\n        });\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Error when creating the TracingClient: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryCreateSpan(tracingClient, request, spanAttributes) {\n    try {\n        // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n        const { span, updatedOptions } = tracingClient.startSpan(`HTTP ${request.method}`, { tracingOptions: request.tracingOptions }, {\n            spanKind: \"client\",\n            spanAttributes,\n        });\n        // If the span is not recording, don't do any more work.\n        if (!span.isRecording()) {\n            span.end();\n            return undefined;\n        }\n        // set headers\n        const headers = tracingClient.createRequestHeaders(updatedOptions.tracingOptions.tracingContext);\n        for (const [key, value] of Object.entries(headers)) {\n            request.headers.set(key, value);\n        }\n        return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping creating a tracing span due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n        return undefined;\n    }\n}\nfunction tryProcessError(span, error) {\n    try {\n        span.setStatus({\n            status: \"error\",\n            error: (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.isError)(error) ? error : undefined,\n        });\n        if ((0,_restError_js__WEBPACK_IMPORTED_MODULE_5__.isRestError)(error) && error.statusCode) {\n            span.setAttribute(\"http.status_code\", error.statusCode);\n        }\n        span.end();\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\nfunction tryProcessResponse(span, response) {\n    try {\n        span.setAttribute(\"http.status_code\", response.status);\n        const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n        if (serviceRequestId) {\n            span.setAttribute(\"serviceRequestId\", serviceRequestId);\n        }\n        // Per semantic conventions, only set the status to error if the status code is 4xx or 5xx.\n        // Otherwise, the status MUST remain unset.\n        // https://opentelemetry.io/docs/specs/semconv/http/http-spans/#status\n        if (response.status >= 400) {\n            span.setStatus({\n                status: \"error\",\n            });\n        }\n        span.end();\n    }\n    catch (e) {\n        _log_js__WEBPACK_IMPORTED_MODULE_3__.logger.warning(`Skipping tracing span processing due to an error: ${(0,_azure_core_util__WEBPACK_IMPORTED_MODULE_4__.getErrorMessage)(e)}`);\n    }\n}\n//# sourceMappingURL=tracingPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/tracingPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userAgentPolicy: () => (/* binding */ userAgentPolicy),\n/* harmony export */   userAgentPolicyName: () => (/* binding */ userAgentPolicyName)\n/* harmony export */ });\n/* harmony import */ var _util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/userAgent.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst UserAgentHeaderName = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentHeaderName)();\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nconst userAgentPolicyName = \"userAgentPolicy\";\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nfunction userAgentPolicy(options = {}) {\n    const userAgentValue = (0,_util_userAgent_js__WEBPACK_IMPORTED_MODULE_0__.getUserAgentValue)(options.userAgentPrefix);\n    return {\n        name: userAgentPolicyName,\n        async sendRequest(request, next) {\n            if (!request.headers.has(UserAgentHeaderName)) {\n                request.headers.set(UserAgentHeaderName, await userAgentValue);\n            }\n            return next(request);\n        },\n    };\n}\n//# sourceMappingURL=userAgentPolicy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/policies/userAgentPolicy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RestError: () => (/* binding */ RestError),\n/* harmony export */   isRestError: () => (/* binding */ isRestError)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _util_inspect_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/inspect.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.js\");\n/* harmony import */ var _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/sanitizer.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\nconst errorSanitizer = new _util_sanitizer_js__WEBPACK_IMPORTED_MODULE_2__.Sanitizer();\n/**\n * A custom error type for failed pipeline requests.\n */\nclass RestError extends Error {\n    constructor(message, options = {}) {\n        super(message);\n        this.name = \"RestError\";\n        this.code = options.code;\n        this.statusCode = options.statusCode;\n        // The request and response may contain sensitive information in the headers or body.\n        // To help prevent this sensitive information being accidentally logged, the request and response\n        // properties are marked as non-enumerable here. This prevents them showing up in the output of\n        // JSON.stringify and console.log.\n        Object.defineProperty(this, \"request\", { value: options.request, enumerable: false });\n        Object.defineProperty(this, \"response\", { value: options.response, enumerable: false });\n        Object.setPrototypeOf(this, RestError.prototype);\n    }\n    /**\n     * Logging method for util.inspect in Node\n     */\n    [_util_inspect_js__WEBPACK_IMPORTED_MODULE_1__.custom]() {\n        // Extract non-enumerable properties and add them back. This is OK since in this output the request and\n        // response get sanitized.\n        return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(Object.assign(Object.assign({}, this), { request: this.request, response: this.response }))}`;\n    }\n}\n/**\n * Something went wrong when making the request.\n * This means the actual request failed for some reason,\n * such as a DNS issue or the connection being lost.\n */\nRestError.REQUEST_SEND_ERROR = \"REQUEST_SEND_ERROR\";\n/**\n * This means that parsing the response from the server failed.\n * It may have been malformed.\n */\nRestError.PARSE_ERROR = \"PARSE_ERROR\";\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nfunction isRestError(e) {\n    if (e instanceof RestError) {\n        return true;\n    }\n    return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isError)(e) && e.name === \"RestError\";\n}\n//# sourceMappingURL=restError.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/restError.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   exponentialRetryStrategy: () => (/* binding */ exponentialRetryStrategy),\n/* harmony export */   isExponentialRetryResponse: () => (/* binding */ isExponentialRetryResponse),\n/* harmony export */   isSystemError: () => (/* binding */ isSystemError)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./throttlingRetryStrategy.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nfunction exponentialRetryStrategy(options = {}) {\n    var _a, _b;\n    const retryInterval = (_a = options.retryDelayInMs) !== null && _a !== void 0 ? _a : DEFAULT_CLIENT_RETRY_INTERVAL;\n    const maxRetryInterval = (_b = options.maxRetryDelayInMs) !== null && _b !== void 0 ? _b : DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n    return {\n        name: \"exponentialRetryStrategy\",\n        retry({ retryCount, response, responseError }) {\n            const matchedSystemError = isSystemError(responseError);\n            const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n            const isExponential = isExponentialRetryResponse(response);\n            const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n            const unknownResponse = response && ((0,_throttlingRetryStrategy_js__WEBPACK_IMPORTED_MODULE_1__.isThrottlingRetryResponse)(response) || !isExponential);\n            if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n                return { skipStrategy: true };\n            }\n            if (responseError && !matchedSystemError && !isExponential) {\n                return { errorToThrow: responseError };\n            }\n            return (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.calculateRetryDelay)(retryCount, {\n                retryDelayInMs: retryInterval,\n                maxRetryDelayInMs: maxRetryInterval,\n            });\n        },\n    };\n}\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nfunction isExponentialRetryResponse(response) {\n    return Boolean(response &&\n        response.status !== undefined &&\n        (response.status >= 500 || response.status === 408) &&\n        response.status !== 501 &&\n        response.status !== 505);\n}\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nfunction isSystemError(err) {\n    if (!err) {\n        return false;\n    }\n    return (err.code === \"ETIMEDOUT\" ||\n        err.code === \"ESOCKETTIMEDOUT\" ||\n        err.code === \"ECONNREFUSED\" ||\n        err.code === \"ECONNRESET\" ||\n        err.code === \"ENOENT\" ||\n        err.code === \"ENOTFOUND\");\n}\n//# sourceMappingURL=exponentialRetryStrategy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/exponentialRetryStrategy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isThrottlingRetryResponse: () => (/* binding */ isThrottlingRetryResponse),\n/* harmony export */   throttlingRetryStrategy: () => (/* binding */ throttlingRetryStrategy)\n/* harmony export */ });\n/* harmony import */ var _util_helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/helpers.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response) {\n    if (!(response && [429, 503].includes(response.status)))\n        return undefined;\n    try {\n        // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n        for (const header of AllRetryAfterHeaders) {\n            const retryAfterValue = (0,_util_helpers_js__WEBPACK_IMPORTED_MODULE_0__.parseHeaderValueAsNumber)(response, header);\n            if (retryAfterValue === 0 || retryAfterValue) {\n                // \"Retry-After\" header ==> seconds\n                // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n                const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n                return retryAfterValue * multiplyingFactor; // in milli-seconds\n            }\n        }\n        // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n        const retryAfterHeader = response.headers.get(RetryAfterHeader);\n        if (!retryAfterHeader)\n            return;\n        const date = Date.parse(retryAfterHeader);\n        const diff = date - Date.now();\n        // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n        return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nfunction isThrottlingRetryResponse(response) {\n    return Number.isFinite(getRetryAfterInMs(response));\n}\nfunction throttlingRetryStrategy() {\n    return {\n        name: \"throttlingRetryStrategy\",\n        retry({ response }) {\n            const retryAfterInMs = getRetryAfterInMs(response);\n            if (!Number.isFinite(retryAfterInMs)) {\n                return { skipStrategy: true };\n            }\n            return {\n                retryAfterInMs,\n            };\n        },\n    };\n}\n//# sourceMappingURL=throttlingRetryStrategy.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/retryStrategies/throttlingRetryStrategy.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* binding */ concat)\n/* harmony export */ });\n/* harmony import */ var _file_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./file.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeGuards.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream) {\n    return new Response(stream).blob();\n}\nasync function toBlobPart(source) {\n    if (source instanceof Blob || source instanceof Uint8Array) {\n        return source;\n    }\n    if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isWebReadableStream)(source)) {\n        return drain(source);\n    }\n    // If it's not a true Blob, and it's not a Uint8Array, we can assume the source\n    // is a fake File created by createFileFromStream and we can get the original stream\n    // using getRawContent.\n    const rawContent = (0,_file_js__WEBPACK_IMPORTED_MODULE_0__.getRawContent)(source);\n    // Shouldn't happen but guard for it anyway\n    if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isNodeReadableStream)(rawContent)) {\n        throw new Error(\"Encountered unexpected type. In the browser, `concat` supports Web ReadableStream, Blob, Uint8Array, and files created using `createFile` only.\");\n    }\n    return toBlobPart(rawContent);\n}\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nasync function concat(sources) {\n    const parts = [];\n    for (const source of sources) {\n        parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n    }\n    return new Blob(parts);\n}\n//# sourceMappingURL=concat.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   concat: () => (/* reexport safe */ _concat_common_js__WEBPACK_IMPORTED_MODULE_0__.concat)\n/* harmony export */ });\n/* harmony import */ var _concat_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concat.common.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n//# sourceMappingURL=concat-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/concat.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createFile: () => (/* binding */ createFile),\n/* harmony export */   createFileFromStream: () => (/* binding */ createFileFromStream),\n/* harmony export */   getRawContent: () => (/* binding */ getRawContent)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./typeGuards.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst unimplementedMethods = {\n    arrayBuffer: () => {\n        throw new Error(\"Not implemented\");\n    },\n    bytes: () => {\n        throw new Error(\"Not implemented\");\n    },\n    slice: () => {\n        throw new Error(\"Not implemented\");\n    },\n    text: () => {\n        throw new Error(\"Not implemented\");\n    },\n};\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent = Symbol(\"rawContent\");\nfunction hasRawContent(x) {\n    return typeof x[rawContent] === \"function\";\n}\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nfunction getRawContent(blob) {\n    if (hasRawContent(blob)) {\n        return blob[rawContent]();\n    }\n    else {\n        return blob.stream();\n    }\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFileFromStream(stream, name, options = {}) {\n    var _a, _b, _c, _d;\n    return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: (_d = options.size) !== null && _d !== void 0 ? _d : -1, name, stream: () => {\n            const s = stream();\n            if ((0,_typeGuards_js__WEBPACK_IMPORTED_MODULE_1__.isNodeReadableStream)(s)) {\n                throw new Error(\"Not supported: a Node stream was provided as input to createFileFromStream.\");\n            }\n            return s;\n        }, [rawContent]: stream });\n}\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nfunction createFile(content, name, options = {}) {\n    var _a, _b, _c;\n    if (_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isNodeLike) {\n        return Object.assign(Object.assign({}, unimplementedMethods), { type: (_a = options.type) !== null && _a !== void 0 ? _a : \"\", lastModified: (_b = options.lastModified) !== null && _b !== void 0 ? _b : new Date().getTime(), webkitRelativePath: (_c = options.webkitRelativePath) !== null && _c !== void 0 ? _c : \"\", size: content.byteLength, name, arrayBuffer: async () => content.buffer, stream: () => new Blob([content]).stream(), [rawContent]: () => content });\n    }\n    else {\n        return new File([content], name, options);\n    }\n}\n//# sourceMappingURL=file.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/file.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   delay: () => (/* binding */ delay),\n/* harmony export */   parseHeaderValueAsNumber: () => (/* binding */ parseHeaderValueAsNumber)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"./node_modules/@azure/abort-controller/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nfunction delay(delayInMs, value, options) {\n    return new Promise((resolve, reject) => {\n        let timer = undefined;\n        let onAborted = undefined;\n        const rejectOnAbort = () => {\n            return reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError((options === null || options === void 0 ? void 0 : options.abortErrorMsg) ? options === null || options === void 0 ? void 0 : options.abortErrorMsg : StandardAbortMessage));\n        };\n        const removeListeners = () => {\n            if ((options === null || options === void 0 ? void 0 : options.abortSignal) && onAborted) {\n                options.abortSignal.removeEventListener(\"abort\", onAborted);\n            }\n        };\n        onAborted = () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n            removeListeners();\n            return rejectOnAbort();\n        };\n        if ((options === null || options === void 0 ? void 0 : options.abortSignal) && options.abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        timer = setTimeout(() => {\n            removeListeners();\n            resolve(value);\n        }, delayInMs);\n        if (options === null || options === void 0 ? void 0 : options.abortSignal) {\n            options.abortSignal.addEventListener(\"abort\", onAborted);\n        }\n    });\n}\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nfunction parseHeaderValueAsNumber(response, headerName) {\n    const value = response.headers.get(headerName);\n    if (!value)\n        return;\n    const valueAsNum = Number(value);\n    if (Number.isNaN(valueAsNum))\n        return;\n    return valueAsNum;\n}\n//# sourceMappingURL=helpers.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   custom: () => (/* binding */ custom)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nconst custom = {};\n//# sourceMappingURL=inspect.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   custom: () => (/* reexport safe */ _inspect_common_js__WEBPACK_IMPORTED_MODULE_0__.custom)\n/* harmony export */ });\n/* harmony import */ var _inspect_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inspect.common.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n//# sourceMappingURL=inspect-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/inspect.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Sanitizer: () => (/* binding */ Sanitizer)\n/* harmony export */ });\n/* harmony import */ var _azure_core_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/core-util */ \"./node_modules/@azure/core-util/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nconst RedactedString = \"REDACTED\";\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n    \"x-ms-client-request-id\",\n    \"x-ms-return-client-request-id\",\n    \"x-ms-useragent\",\n    \"x-ms-correlation-request-id\",\n    \"x-ms-request-id\",\n    \"client-request-id\",\n    \"ms-cv\",\n    \"return-client-request-id\",\n    \"traceparent\",\n    \"Access-Control-Allow-Credentials\",\n    \"Access-Control-Allow-Headers\",\n    \"Access-Control-Allow-Methods\",\n    \"Access-Control-Allow-Origin\",\n    \"Access-Control-Expose-Headers\",\n    \"Access-Control-Max-Age\",\n    \"Access-Control-Request-Headers\",\n    \"Access-Control-Request-Method\",\n    \"Origin\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Cache-Control\",\n    \"Connection\",\n    \"Content-Length\",\n    \"Content-Type\",\n    \"Date\",\n    \"ETag\",\n    \"Expires\",\n    \"If-Match\",\n    \"If-Modified-Since\",\n    \"If-None-Match\",\n    \"If-Unmodified-Since\",\n    \"Last-Modified\",\n    \"Pragma\",\n    \"Request-Id\",\n    \"Retry-After\",\n    \"Server\",\n    \"Transfer-Encoding\",\n    \"User-Agent\",\n    \"WWW-Authenticate\",\n];\nconst defaultAllowedQueryParameters = [\"api-version\"];\n/**\n * @internal\n */\nclass Sanitizer {\n    constructor({ additionalAllowedHeaderNames: allowedHeaderNames = [], additionalAllowedQueryParameters: allowedQueryParameters = [], } = {}) {\n        allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n        allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n        this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n        this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n    }\n    sanitize(obj) {\n        const seen = new Set();\n        return JSON.stringify(obj, (key, value) => {\n            // Ensure Errors include their interesting non-enumerable members\n            if (value instanceof Error) {\n                return Object.assign(Object.assign({}, value), { name: value.name, message: value.message });\n            }\n            if (key === \"headers\") {\n                return this.sanitizeHeaders(value);\n            }\n            else if (key === \"url\") {\n                return this.sanitizeUrl(value);\n            }\n            else if (key === \"query\") {\n                return this.sanitizeQuery(value);\n            }\n            else if (key === \"body\") {\n                // Don't log the request body\n                return undefined;\n            }\n            else if (key === \"response\") {\n                // Don't log response again\n                return undefined;\n            }\n            else if (key === \"operationSpec\") {\n                // When using sendOperationRequest, the request carries a massive\n                // field with the autorest spec. No need to log it.\n                return undefined;\n            }\n            else if (Array.isArray(value) || (0,_azure_core_util__WEBPACK_IMPORTED_MODULE_0__.isObject)(value)) {\n                if (seen.has(value)) {\n                    return \"[Circular]\";\n                }\n                seen.add(value);\n            }\n            return value;\n        }, 2);\n    }\n    sanitizeUrl(value) {\n        if (typeof value !== \"string\" || value === null || value === \"\") {\n            return value;\n        }\n        const url = new URL(value);\n        if (!url.search) {\n            return value;\n        }\n        for (const [key] of url.searchParams) {\n            if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n                url.searchParams.set(key, RedactedString);\n            }\n        }\n        return url.toString();\n    }\n    sanitizeHeaders(obj) {\n        const sanitized = {};\n        for (const key of Object.keys(obj)) {\n            if (this.allowedHeaderNames.has(key.toLowerCase())) {\n                sanitized[key] = obj[key];\n            }\n            else {\n                sanitized[key] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeQuery(value) {\n        if (typeof value !== \"object\" || value === null) {\n            return value;\n        }\n        const sanitized = {};\n        for (const k of Object.keys(value)) {\n            if (this.allowedQueryParameters.has(k.toLowerCase())) {\n                sanitized[k] = value[k];\n            }\n            else {\n                sanitized[k] = RedactedString;\n            }\n        }\n        return sanitized;\n    }\n}\n//# sourceMappingURL=sanitizer.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/sanitizer.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CYCLER_OPTIONS: () => (/* binding */ DEFAULT_CYCLER_OPTIONS),\n/* harmony export */   createTokenCycler: () => (/* binding */ createTokenCycler)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/helpers.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// Default options for the cycler if none are provided\nconst DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n    retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n    refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, refreshTimeout) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < refreshTimeout) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.delay)(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    let tenantId;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            if (cycler.isRefreshing) {\n                return false;\n            }\n            if ((token === null || token === void 0 ? void 0 : token.refreshAfterTimestamp) && token.refreshAfterTimestamp < Date.now()) {\n                return true;\n            }\n            return ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        },\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(scopes, getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                tenantId = getTokenOptions.tenantId;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                tenantId = undefined;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (scopes, tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        const hasClaimChallenge = Boolean(tokenOptions.claims);\n        const tenantIdChanged = tenantId !== tokenOptions.tenantId;\n        if (hasClaimChallenge) {\n            // If we've received a claim, we know the existing token isn't valid\n            // We want to clear it so that that refresh worker won't use the old expiration time as a timeout\n            token = null;\n        }\n        // If the tenantId passed in token options is different to the one we have\n        // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n        // refresh the token with the new tenantId or token.\n        const mustRefresh = tenantIdChanged || hasClaimChallenge || cycler.mustRefresh;\n        if (mustRefresh) {\n            return refresh(scopes, tokenOptions);\n        }\n        if (cycler.shouldRefresh) {\n            refresh(scopes, tokenOptions);\n        }\n        return token;\n    };\n}\n//# sourceMappingURL=tokenCycler.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/tokenCycler.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isNodeReadableStream: () => (/* binding */ isNodeReadableStream),\n/* harmony export */   isReadableStream: () => (/* binding */ isReadableStream),\n/* harmony export */   isWebReadableStream: () => (/* binding */ isWebReadableStream)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nfunction isNodeReadableStream(x) {\n    return Boolean(x && typeof x[\"pipe\"] === \"function\");\n}\nfunction isWebReadableStream(x) {\n    return Boolean(x &&\n        typeof x.getReader === \"function\" &&\n        typeof x.tee === \"function\");\n}\nfunction isReadableStream(x) {\n    return isNodeReadableStream(x) || isWebReadableStream(x);\n}\nfunction isBlob(x) {\n    return typeof x.stream === \"function\";\n}\n//# sourceMappingURL=typeGuards.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/typeGuards.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserAgentHeaderName: () => (/* binding */ getUserAgentHeaderName),\n/* harmony export */   getUserAgentValue: () => (/* binding */ getUserAgentValue)\n/* harmony export */ });\n/* harmony import */ var _userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userAgentPlatform.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../constants.js */ \"./node_modules/@azure/core-rest-pipeline/dist/browser/constants.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction getUserAgentString(telemetryInfo) {\n    const parts = [];\n    for (const [key, value] of telemetryInfo) {\n        const token = value ? `${key}/${value}` : key;\n        parts.push(token);\n    }\n    return parts.join(\" \");\n}\n/**\n * @internal\n */\nfunction getUserAgentHeaderName() {\n    return (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.getHeaderName)();\n}\n/**\n * @internal\n */\nasync function getUserAgentValue(prefix) {\n    const runtimeInfo = new Map();\n    runtimeInfo.set(\"core-rest-pipeline\", _constants_js__WEBPACK_IMPORTED_MODULE_1__.SDK_VERSION);\n    await (0,_userAgentPlatform_js__WEBPACK_IMPORTED_MODULE_0__.setPlatformSpecificData)(runtimeInfo);\n    const defaultAgent = getUserAgentString(runtimeInfo);\n    const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n    return userAgentValue;\n}\n//# sourceMappingURL=userAgent.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgent.js?");

/***/ }),

/***/ "./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getHeaderName: () => (/* binding */ getHeaderName),\n/* harmony export */   setPlatformSpecificData: () => (/* binding */ setPlatformSpecificData)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * @internal\n */\nfunction getHeaderName() {\n    return \"x-ms-useragent\";\n}\nfunction getBrowserInfo(userAgent) {\n    const browserRegexes = [\n        { name: \"Firefox\", regex: /Firefox\\/([\\d.]+)/ },\n        { name: \"Safari\", regex: /Version\\/([\\d.]+).*Safari/ },\n    ];\n    for (const browser of browserRegexes) {\n        const match = userAgent.match(browser.regex);\n        if (match) {\n            return { brand: browser.name, version: match[1] };\n        }\n    }\n    return undefined;\n}\nfunction getBrandVersionString(brands) {\n    const brandOrder = [\"Google Chrome\", \"Microsoft Edge\", \"Opera\", \"Brave\", \"Chromium\"];\n    for (const brand of brandOrder) {\n        const foundBrand = brands.find((b) => b.brand === brand);\n        if (foundBrand) {\n            return foundBrand;\n        }\n    }\n    return undefined;\n}\n/**\n * @internal\n */\nasync function setPlatformSpecificData(map) {\n    const localNavigator = globalThis.navigator;\n    let osPlatform = \"unknown\";\n    if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.userAgentData) {\n        const entropyValues = await localNavigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"platformVersion\",\n        ]);\n        osPlatform = `${entropyValues.architecture}-${entropyValues.platform}-${entropyValues.platformVersion}`;\n        // Get the brand and version\n        const brand = getBrandVersionString(localNavigator.userAgentData.brands);\n        if (brand) {\n            map.set(brand.brand, brand.version);\n        }\n    }\n    else if (localNavigator === null || localNavigator === void 0 ? void 0 : localNavigator.platform) {\n        osPlatform = localNavigator.platform;\n        const brand = getBrowserInfo(localNavigator.userAgent);\n        if (brand) {\n            map.set(brand.brand, brand.version);\n        }\n    }\n    else if (typeof globalThis.EdgeRuntime === \"string\") {\n        map.set(\"EdgeRuntime\", globalThis.EdgeRuntime);\n    }\n    map.set(\"OS\", osPlatform);\n}\n//# sourceMappingURL=userAgentPlatform-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-rest-pipeline/dist/browser/util/userAgentPlatform.js?");

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist/browser/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/browser/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* reexport safe */ _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__.createTracingClient),\n/* harmony export */   useInstrumenter: () => (/* reexport safe */ _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"./node_modules/@azure/core-tracing/dist/browser/instrumenter.js\");\n/* harmony import */ var _tracingClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingClient.js */ \"./node_modules/@azure/core-tracing/dist/browser/tracingClient.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-tracing/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist/browser/instrumenter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/browser/instrumenter.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultInstrumenter: () => (/* binding */ createDefaultInstrumenter),\n/* harmony export */   createDefaultTracingSpan: () => (/* binding */ createDefaultTracingSpan),\n/* harmony export */   getInstrumenter: () => (/* binding */ getInstrumenter),\n/* harmony export */   useInstrumenter: () => (/* binding */ useInstrumenter)\n/* harmony export */ });\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tracingContext.js */ \"./node_modules/@azure/core-tracing/dist/browser/tracingContext.js\");\n/* harmony import */ var _state_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./state.js */ \"./node_modules/@azure/core-tracing/dist/browser/state.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nfunction createDefaultTracingSpan() {\n    return {\n        end: () => {\n            // noop\n        },\n        isRecording: () => false,\n        recordException: () => {\n            // noop\n        },\n        setAttribute: () => {\n            // noop\n        },\n        setStatus: () => {\n            // noop\n        },\n        addEvent: () => {\n            // noop\n        },\n    };\n}\nfunction createDefaultInstrumenter() {\n    return {\n        createRequestHeaders: () => {\n            return {};\n        },\n        parseTraceparentHeader: () => {\n            return undefined;\n        },\n        startSpan: (_name, spanOptions) => {\n            return {\n                span: createDefaultTracingSpan(),\n                tracingContext: (0,_tracingContext_js__WEBPACK_IMPORTED_MODULE_0__.createTracingContext)({ parentContext: spanOptions.tracingContext }),\n            };\n        },\n        withContext(_context, callback, ...callbackArgs) {\n            return callback(...callbackArgs);\n        },\n    };\n}\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nfunction useInstrumenter(instrumenter) {\n    _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = instrumenter;\n}\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nfunction getInstrumenter() {\n    if (!_state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation) {\n        _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation = createDefaultInstrumenter();\n    }\n    return _state_js__WEBPACK_IMPORTED_MODULE_1__.state.instrumenterImplementation;\n}\n//# sourceMappingURL=instrumenter.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-tracing/dist/browser/instrumenter.js?");

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist/browser/state.js":
/*!****************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/browser/state.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   state: () => (/* binding */ state)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nconst state = {\n    instrumenterImplementation: undefined,\n};\n//# sourceMappingURL=state-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-tracing/dist/browser/state.js?");

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist/browser/tracingClient.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/browser/tracingClient.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTracingClient: () => (/* binding */ createTracingClient)\n/* harmony export */ });\n/* harmony import */ var _instrumenter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instrumenter.js */ \"./node_modules/@azure/core-tracing/dist/browser/instrumenter.js\");\n/* harmony import */ var _tracingContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracingContext.js */ \"./node_modules/@azure/core-tracing/dist/browser/tracingContext.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nfunction createTracingClient(options) {\n    const { namespace, packageName, packageVersion } = options;\n    function startSpan(name, operationOptions, spanOptions) {\n        var _a;\n        const startSpanResult = (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().startSpan(name, Object.assign(Object.assign({}, spanOptions), { packageName: packageName, packageVersion: packageVersion, tracingContext: (_a = operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions) === null || _a === void 0 ? void 0 : _a.tracingContext }));\n        let tracingContext = startSpanResult.tracingContext;\n        const span = startSpanResult.span;\n        if (!tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace)) {\n            tracingContext = tracingContext.setValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace, namespace);\n        }\n        span.setAttribute(\"az.namespace\", tracingContext.getValue(_tracingContext_js__WEBPACK_IMPORTED_MODULE_1__.knownContextKeys.namespace));\n        const updatedOptions = Object.assign({}, operationOptions, {\n            tracingOptions: Object.assign(Object.assign({}, operationOptions === null || operationOptions === void 0 ? void 0 : operationOptions.tracingOptions), { tracingContext }),\n        });\n        return {\n            span,\n            updatedOptions,\n        };\n    }\n    async function withSpan(name, operationOptions, callback, spanOptions) {\n        const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n        try {\n            const result = await withContext(updatedOptions.tracingOptions.tracingContext, () => Promise.resolve(callback(updatedOptions, span)));\n            span.setStatus({ status: \"success\" });\n            return result;\n        }\n        catch (err) {\n            span.setStatus({ status: \"error\", error: err });\n            throw err;\n        }\n        finally {\n            span.end();\n        }\n    }\n    function withContext(context, callback, ...callbackArgs) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().withContext(context, callback, ...callbackArgs);\n    }\n    /**\n     * Parses a traceparent header value into a span identifier.\n     *\n     * @param traceparentHeader - The traceparent header to parse.\n     * @returns An implementation-specific identifier for the span.\n     */\n    function parseTraceparentHeader(traceparentHeader) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().parseTraceparentHeader(traceparentHeader);\n    }\n    /**\n     * Creates a set of request headers to propagate tracing information to a backend.\n     *\n     * @param tracingContext - The context containing the span to serialize.\n     * @returns The set of headers to add to a request.\n     */\n    function createRequestHeaders(tracingContext) {\n        return (0,_instrumenter_js__WEBPACK_IMPORTED_MODULE_0__.getInstrumenter)().createRequestHeaders(tracingContext);\n    }\n    return {\n        startSpan,\n        withSpan,\n        withContext,\n        parseTraceparentHeader,\n        createRequestHeaders,\n    };\n}\n//# sourceMappingURL=tracingClient.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-tracing/dist/browser/tracingClient.js?");

/***/ }),

/***/ "./node_modules/@azure/core-tracing/dist/browser/tracingContext.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@azure/core-tracing/dist/browser/tracingContext.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TracingContextImpl: () => (/* binding */ TracingContextImpl),\n/* harmony export */   createTracingContext: () => (/* binding */ createTracingContext),\n/* harmony export */   knownContextKeys: () => (/* binding */ knownContextKeys)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/** @internal */\nconst knownContextKeys = {\n    span: Symbol.for(\"@azure/core-tracing span\"),\n    namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nfunction createTracingContext(options = {}) {\n    let context = new TracingContextImpl(options.parentContext);\n    if (options.span) {\n        context = context.setValue(knownContextKeys.span, options.span);\n    }\n    if (options.namespace) {\n        context = context.setValue(knownContextKeys.namespace, options.namespace);\n    }\n    return context;\n}\n/** @internal */\nclass TracingContextImpl {\n    constructor(initialContext) {\n        this._contextMap =\n            initialContext instanceof TracingContextImpl\n                ? new Map(initialContext._contextMap)\n                : new Map();\n    }\n    setValue(key, value) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.set(key, value);\n        return newContext;\n    }\n    getValue(key) {\n        return this._contextMap.get(key);\n    }\n    deleteValue(key) {\n        const newContext = new TracingContextImpl(this);\n        newContext._contextMap.delete(key);\n        return newContext;\n    }\n}\n//# sourceMappingURL=tracingContext.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-tracing/dist/browser/tracingContext.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/aborterUtils.js":
/*!********************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/aborterUtils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelablePromiseRace: () => (/* binding */ cancelablePromiseRace)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nasync function cancelablePromiseRace(abortablePromiseBuilders, options) {\n    var _a, _b;\n    const aborter = new AbortController();\n    function abortHandler() {\n        aborter.abort();\n    }\n    (_a = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _a === void 0 ? void 0 : _a.addEventListener(\"abort\", abortHandler);\n    try {\n        return await Promise.race(abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })));\n    }\n    finally {\n        aborter.abort();\n        (_b = options === null || options === void 0 ? void 0 : options.abortSignal) === null || _b === void 0 ? void 0 : _b.removeEventListener(\"abort\", abortHandler);\n    }\n}\n//# sourceMappingURL=aborterUtils.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/aborterUtils.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToUint8Array: () => (/* binding */ base64ToUint8Array),\n/* harmony export */   base64UrlToUint8Array: () => (/* binding */ base64UrlToUint8Array),\n/* harmony export */   hexStringToUint8Array: () => (/* binding */ hexStringToUint8Array),\n/* harmony export */   stringToUint8Array: () => (/* binding */ stringToUint8Array),\n/* harmony export */   uint8ArrayToBase64: () => (/* binding */ uint8ArrayToBase64),\n/* harmony export */   uint8ArrayToBase64Url: () => (/* binding */ uint8ArrayToBase64Url),\n/* harmony export */   uint8ArrayToHexString: () => (/* binding */ uint8ArrayToHexString),\n/* harmony export */   uint8ArrayToString: () => (/* binding */ uint8ArrayToString),\n/* harmony export */   uint8ArrayToUtf8String: () => (/* binding */ uint8ArrayToUtf8String),\n/* harmony export */   utf8StringToUint8Array: () => (/* binding */ utf8StringToUint8Array)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nfunction uint8ArrayToString(bytes, format) {\n    switch (format) {\n        case \"utf-8\":\n            return uint8ArrayToUtf8String(bytes);\n        case \"base64\":\n            return uint8ArrayToBase64(bytes);\n        case \"base64url\":\n            return uint8ArrayToBase64Url(bytes);\n        case \"hex\":\n            return uint8ArrayToHexString(bytes);\n    }\n}\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nfunction stringToUint8Array(value, format) {\n    switch (format) {\n        case \"utf-8\":\n            return utf8StringToUint8Array(value);\n        case \"base64\":\n            return base64ToUint8Array(value);\n        case \"base64url\":\n            return base64UrlToUint8Array(value);\n        case \"hex\":\n            return hexStringToUint8Array(value);\n    }\n}\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nfunction uint8ArrayToBase64(bytes) {\n    return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nfunction uint8ArrayToBase64Url(bytes) {\n    return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nfunction uint8ArrayToUtf8String(bytes) {\n    const decoder = new TextDecoder();\n    const dataString = decoder.decode(bytes);\n    return dataString;\n}\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nfunction uint8ArrayToHexString(bytes) {\n    return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nfunction utf8StringToUint8Array(value) {\n    return new TextEncoder().encode(value);\n}\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nfunction base64ToUint8Array(value) {\n    return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nfunction base64UrlToUint8Array(value) {\n    const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    return base64ToUint8Array(base64String);\n}\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nfunction hexStringToUint8Array(value) {\n    // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n    const bytes = new Uint8Array(value.length / 2);\n    for (let i = 0; i < value.length / 2; ++i) {\n        const highNibble = value[2 * i];\n        const lowNibble = value[2 * i + 1];\n        if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n            // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n            return bytes.slice(0, i);\n        }\n        bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n    }\n    return bytes;\n}\n//# sourceMappingURL=bytesEncoding.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/bytesEncoding.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/bytesEncoding.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToUint8Array: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.base64ToUint8Array),\n/* harmony export */   base64UrlToUint8Array: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.base64UrlToUint8Array),\n/* harmony export */   hexStringToUint8Array: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.hexStringToUint8Array),\n/* harmony export */   stringToUint8Array: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array),\n/* harmony export */   uint8ArrayToBase64: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToBase64),\n/* harmony export */   uint8ArrayToBase64Url: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToBase64Url),\n/* harmony export */   uint8ArrayToHexString: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToHexString),\n/* harmony export */   uint8ArrayToString: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToString),\n/* harmony export */   uint8ArrayToUtf8String: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToUtf8String),\n/* harmony export */   utf8StringToUint8Array: () => (/* reexport safe */ _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__.utf8StringToUint8Array)\n/* harmony export */ });\n/* harmony import */ var _bytesEncoding_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytesEncoding.common.js */ \"./node_modules/@azure/core-util/dist/browser/bytesEncoding.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n//# sourceMappingURL=bytesEncoding-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/bytesEncoding.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/checkEnvironment.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/checkEnvironment.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isBun: () => (/* binding */ isBun),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isNodeLike: () => (/* binding */ isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* binding */ isNodeRuntime),\n/* harmony export */   isReactNative: () => (/* binding */ isReactNative),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a, _b, _c, _d;\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nconst isWebWorker = typeof self === \"object\" &&\n    typeof (self === null || self === void 0 ? void 0 : self.importScripts) === \"function\" &&\n    (((_a = self.constructor) === null || _a === void 0 ? void 0 : _a.name) === \"DedicatedWorkerGlobalScope\" ||\n        ((_b = self.constructor) === null || _b === void 0 ? void 0 : _b.name) === \"ServiceWorkerGlobalScope\" ||\n        ((_c = self.constructor) === null || _c === void 0 ? void 0 : _c.name) === \"SharedWorkerGlobalScope\");\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nconst isDeno = typeof Deno !== \"undefined\" &&\n    typeof Deno.version !== \"undefined\" &&\n    typeof Deno.version.deno !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nconst isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nconst isNodeLike = typeof globalThis.process !== \"undefined\" &&\n    Boolean(globalThis.process.version) &&\n    Boolean((_d = globalThis.process.versions) === null || _d === void 0 ? void 0 : _d.node);\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nconst isNode = isNodeLike;\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nconst isNodeRuntime = isNodeLike && !isBun && !isDeno;\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nconst isReactNative = typeof navigator !== \"undefined\" && (navigator === null || navigator === void 0 ? void 0 : navigator.product) === \"ReactNative\";\n//# sourceMappingURL=checkEnvironment.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/checkEnvironment.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/createAbortablePromise.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/createAbortablePromise.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createAbortablePromise: () => (/* binding */ createAbortablePromise)\n/* harmony export */ });\n/* harmony import */ var _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/abort-controller */ \"./node_modules/@azure/abort-controller/dist/browser/index.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nfunction createAbortablePromise(buildPromise, options) {\n    const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return new Promise((resolve, reject) => {\n        function rejectOnAbort() {\n            reject(new _azure_abort_controller__WEBPACK_IMPORTED_MODULE_0__.AbortError(abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : \"The operation was aborted.\"));\n        }\n        function removeListeners() {\n            abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.removeEventListener(\"abort\", onAbort);\n        }\n        function onAbort() {\n            cleanupBeforeAbort === null || cleanupBeforeAbort === void 0 ? void 0 : cleanupBeforeAbort();\n            removeListeners();\n            rejectOnAbort();\n        }\n        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n            return rejectOnAbort();\n        }\n        try {\n            buildPromise((x) => {\n                removeListeners();\n                resolve(x);\n            }, (x) => {\n                removeListeners();\n                reject(x);\n            });\n        }\n        catch (err) {\n            reject(err);\n        }\n        abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.addEventListener(\"abort\", onAbort);\n    });\n}\n//# sourceMappingURL=createAbortablePromise.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/createAbortablePromise.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/delay.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/delay.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRetryDelay: () => (/* binding */ calculateRetryDelay),\n/* harmony export */   delay: () => (/* binding */ delay)\n/* harmony export */ });\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"./node_modules/@azure/core-util/dist/browser/createAbortablePromise.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random.js */ \"./node_modules/@azure/core-util/dist/browser/random.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nfunction delay(timeInMs, options) {\n    let token;\n    const { abortSignal, abortErrorMsg } = options !== null && options !== void 0 ? options : {};\n    return (0,_createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_0__.createAbortablePromise)((resolve) => {\n        token = setTimeout(resolve, timeInMs);\n    }, {\n        cleanupBeforeAbort: () => clearTimeout(token),\n        abortSignal,\n        abortErrorMsg: abortErrorMsg !== null && abortErrorMsg !== void 0 ? abortErrorMsg : StandardAbortMessage,\n    });\n}\n/**\n * Calculates the delay interval for retry attempts using exponential delay with jitter.\n * @param retryAttempt - The current retry attempt number.\n * @param config - The exponential retry configuration.\n * @returns An object containing the calculated retry delay.\n */\nfunction calculateRetryDelay(retryAttempt, config) {\n    // Exponentially increase the delay each time\n    const exponentialDelay = config.retryDelayInMs * Math.pow(2, retryAttempt);\n    // Don't let the delay exceed the maximum\n    const clampedDelay = Math.min(config.maxRetryDelayInMs, exponentialDelay);\n    // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n    // that retries across multiple clients don't occur simultaneously.\n    const retryAfterInMs = clampedDelay / 2 + (0,_random_js__WEBPACK_IMPORTED_MODULE_1__.getRandomIntegerInclusive)(0, clampedDelay / 2);\n    return { retryAfterInMs };\n}\n//# sourceMappingURL=delay.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/delay.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/error.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/error.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getErrorMessage: () => (/* binding */ getErrorMessage),\n/* harmony export */   isError: () => (/* binding */ isError)\n/* harmony export */ });\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./object.js */ \"./node_modules/@azure/core-util/dist/browser/object.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nfunction isError(e) {\n    if ((0,_object_js__WEBPACK_IMPORTED_MODULE_0__.isObject)(e)) {\n        const hasName = typeof e.name === \"string\";\n        const hasMessage = typeof e.message === \"string\";\n        return hasName && hasMessage;\n    }\n    return false;\n}\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nfunction getErrorMessage(e) {\n    if (isError(e)) {\n        return e.message;\n    }\n    else {\n        let stringified;\n        try {\n            if (typeof e === \"object\" && e) {\n                stringified = JSON.stringify(e);\n            }\n            else {\n                stringified = String(e);\n            }\n        }\n        catch (err) {\n            stringified = \"[unable to stringify input]\";\n        }\n        return `Unknown error ${stringified}`;\n    }\n}\n//# sourceMappingURL=error.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/error.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateRetryDelay: () => (/* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_0__.calculateRetryDelay),\n/* harmony export */   cancelablePromiseRace: () => (/* reexport safe */ _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__.cancelablePromiseRace),\n/* harmony export */   computeSha256Hash: () => (/* reexport safe */ _sha256_js__WEBPACK_IMPORTED_MODULE_6__.computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* reexport safe */ _sha256_js__WEBPACK_IMPORTED_MODULE_6__.computeSha256Hmac),\n/* harmony export */   createAbortablePromise: () => (/* reexport safe */ _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__.createAbortablePromise),\n/* harmony export */   delay: () => (/* reexport safe */ _delay_js__WEBPACK_IMPORTED_MODULE_0__.delay),\n/* harmony export */   getErrorMessage: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_5__.getErrorMessage),\n/* harmony export */   getRandomIntegerInclusive: () => (/* reexport safe */ _random_js__WEBPACK_IMPORTED_MODULE_3__.getRandomIntegerInclusive),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isBrowser),\n/* harmony export */   isBun: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isBun),\n/* harmony export */   isDefined: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.isDefined),\n/* harmony export */   isDeno: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isDeno),\n/* harmony export */   isError: () => (/* reexport safe */ _error_js__WEBPACK_IMPORTED_MODULE_5__.isError),\n/* harmony export */   isNode: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNode),\n/* harmony export */   isNodeLike: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNodeLike),\n/* harmony export */   isNodeRuntime: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isNodeRuntime),\n/* harmony export */   isObject: () => (/* reexport safe */ _object_js__WEBPACK_IMPORTED_MODULE_4__.isObject),\n/* harmony export */   isObjectWithProperties: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.isObjectWithProperties),\n/* harmony export */   isReactNative: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isReactNative),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__.isWebWorker),\n/* harmony export */   objectHasProperty: () => (/* reexport safe */ _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__.objectHasProperty),\n/* harmony export */   randomUUID: () => (/* reexport safe */ _uuidUtils_js__WEBPACK_IMPORTED_MODULE_8__.randomUUID),\n/* harmony export */   stringToUint8Array: () => (/* reexport safe */ _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__.stringToUint8Array),\n/* harmony export */   uint8ArrayToString: () => (/* reexport safe */ _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__.uint8ArrayToString)\n/* harmony export */ });\n/* harmony import */ var _delay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./delay.js */ \"./node_modules/@azure/core-util/dist/browser/delay.js\");\n/* harmony import */ var _aborterUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./aborterUtils.js */ \"./node_modules/@azure/core-util/dist/browser/aborterUtils.js\");\n/* harmony import */ var _createAbortablePromise_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createAbortablePromise.js */ \"./node_modules/@azure/core-util/dist/browser/createAbortablePromise.js\");\n/* harmony import */ var _random_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./random.js */ \"./node_modules/@azure/core-util/dist/browser/random.js\");\n/* harmony import */ var _object_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./object.js */ \"./node_modules/@azure/core-util/dist/browser/object.js\");\n/* harmony import */ var _error_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error.js */ \"./node_modules/@azure/core-util/dist/browser/error.js\");\n/* harmony import */ var _sha256_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sha256.js */ \"./node_modules/@azure/core-util/dist/browser/sha256.js\");\n/* harmony import */ var _typeGuards_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./typeGuards.js */ \"./node_modules/@azure/core-util/dist/browser/typeGuards.js\");\n/* harmony import */ var _uuidUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./uuidUtils.js */ \"./node_modules/@azure/core-util/dist/browser/uuidUtils.js\");\n/* harmony import */ var _checkEnvironment_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./checkEnvironment.js */ \"./node_modules/@azure/core-util/dist/browser/checkEnvironment.js\");\n/* harmony import */ var _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytesEncoding.js */ \"./node_modules/@azure/core-util/dist/browser/bytesEncoding.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/object.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/object.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObject: () => (/* binding */ isObject)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nfunction isObject(input) {\n    return (typeof input === \"object\" &&\n        input !== null &&\n        !Array.isArray(input) &&\n        !(input instanceof RegExp) &&\n        !(input instanceof Date));\n}\n//# sourceMappingURL=object.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/object.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/random.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/random.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getRandomIntegerInclusive: () => (/* binding */ getRandomIntegerInclusive)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nfunction getRandomIntegerInclusive(min, max) {\n    // Make sure inputs are integers.\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    // Pick a random offset from zero to the size of the range.\n    // Since Math.random() can never return 1, we have to make the range one larger\n    // in order to be inclusive of the maximum value after we take the floor.\n    const offset = Math.floor(Math.random() * (max - min + 1));\n    return offset + min;\n}\n//# sourceMappingURL=random.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/random.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/sha256.common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/sha256.common.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeSha256Hash: () => (/* binding */ computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* binding */ computeSha256Hmac)\n/* harmony export */ });\n/* harmony import */ var _bytesEncoding_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bytesEncoding.js */ \"./node_modules/@azure/core-util/dist/browser/bytesEncoding.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nlet subtleCrypto;\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto() {\n    if (subtleCrypto) {\n        return subtleCrypto;\n    }\n    if (!self.crypto || !self.crypto.subtle) {\n        throw new Error(\"Your browser environment does not support cryptography functions.\");\n    }\n    subtleCrypto = self.crypto.subtle;\n    return subtleCrypto;\n}\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nasync function computeSha256Hmac(key, stringToSign, encoding) {\n    const crypto = getCrypto();\n    const keyBytes = (0,_bytesEncoding_js__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(key, \"base64\");\n    const stringToSignBytes = (0,_bytesEncoding_js__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(stringToSign, \"utf-8\");\n    const cryptoKey = await crypto.importKey(\"raw\", keyBytes, {\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, false, [\"sign\"]);\n    const signature = await crypto.sign({\n        name: \"HMAC\",\n        hash: { name: \"SHA-256\" },\n    }, cryptoKey, stringToSignBytes);\n    return (0,_bytesEncoding_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToString)(new Uint8Array(signature), encoding);\n}\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nasync function computeSha256Hash(content, encoding) {\n    const contentBytes = (0,_bytesEncoding_js__WEBPACK_IMPORTED_MODULE_0__.stringToUint8Array)(content, \"utf-8\");\n    const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n    return (0,_bytesEncoding_js__WEBPACK_IMPORTED_MODULE_0__.uint8ArrayToString)(new Uint8Array(digest), encoding);\n}\n//# sourceMappingURL=sha256.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/sha256.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/sha256.js":
/*!**************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/sha256.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeSha256Hash: () => (/* reexport safe */ _sha256_common_js__WEBPACK_IMPORTED_MODULE_0__.computeSha256Hash),\n/* harmony export */   computeSha256Hmac: () => (/* reexport safe */ _sha256_common_js__WEBPACK_IMPORTED_MODULE_0__.computeSha256Hmac)\n/* harmony export */ });\n/* harmony import */ var _sha256_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sha256.common.js */ \"./node_modules/@azure/core-util/dist/browser/sha256.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n//# sourceMappingURL=sha256-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/sha256.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/typeGuards.js":
/*!******************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/typeGuards.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDefined: () => (/* binding */ isDefined),\n/* harmony export */   isObjectWithProperties: () => (/* binding */ isObjectWithProperties),\n/* harmony export */   objectHasProperty: () => (/* binding */ objectHasProperty)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n */\nfunction isDefined(thing) {\n    return typeof thing !== \"undefined\" && thing !== null;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n */\nfunction isObjectWithProperties(thing, properties) {\n    if (!isDefined(thing) || typeof thing !== \"object\") {\n        return false;\n    }\n    for (const property of properties) {\n        if (!objectHasProperty(thing, property)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n */\nfunction objectHasProperty(thing, property) {\n    return (isDefined(thing) && typeof thing === \"object\" && property in thing);\n}\n//# sourceMappingURL=typeGuards.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/typeGuards.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/uuidUtils.common.js":
/*!************************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/uuidUtils.common.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateUUID: () => (/* binding */ generateUUID),\n/* harmony export */   randomUUID: () => (/* binding */ randomUUID)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nfunction generateUUID() {\n    let uuid = \"\";\n    for (let i = 0; i < 32; i++) {\n        // Generate a random number between 0 and 15\n        const randomNumber = Math.floor(Math.random() * 16);\n        // Set the UUID version to 4 in the 13th position\n        if (i === 12) {\n            uuid += \"4\";\n        }\n        else if (i === 16) {\n            // Set the UUID variant to \"10\" in the 17th position\n            uuid += (randomNumber & 0x3) | 0x8;\n        }\n        else {\n            // Add a random hexadecimal digit to the UUID string\n            uuid += randomNumber.toString(16);\n        }\n        // Add hyphens to the UUID string at the appropriate positions\n        if (i === 7 || i === 11 || i === 15 || i === 19) {\n            uuid += \"-\";\n        }\n    }\n    return uuid;\n}\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nfunction randomUUID() {\n    return generateUUID();\n}\n//# sourceMappingURL=uuidUtils.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/uuidUtils.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-util/dist/browser/uuidUtils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-util/dist/browser/uuidUtils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   randomUUID: () => (/* binding */ randomUUID)\n/* harmony export */ });\n/* harmony import */ var _uuidUtils_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./uuidUtils.common.js */ \"./node_modules/@azure/core-util/dist/browser/uuidUtils.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nvar _a;\n\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction = typeof ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.crypto) === null || _a === void 0 ? void 0 : _a.randomUUID) === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : _uuidUtils_common_js__WEBPACK_IMPORTED_MODULE_0__.generateUUID;\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nfunction randomUUID() {\n    return uuidFunction();\n}\n//# sourceMappingURL=uuidUtils-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-util/dist/browser/uuidUtils.js?");

/***/ }),

/***/ "./node_modules/@azure/core-xml/dist/browser/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/browser/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* reexport safe */ _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* reexport safe */ _xml_common_js__WEBPACK_IMPORTED_MODULE_1__.XML_CHARKEY),\n/* harmony export */   parseXML: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_0__.parseXML),\n/* harmony export */   stringifyXML: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_0__.stringifyXML)\n/* harmony export */ });\n/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xml.js */ \"./node_modules/@azure/core-xml/dist/browser/xml.js\");\n/* harmony import */ var _xml_common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xml.common.js */ \"./node_modules/@azure/core-xml/dist/browser/xml.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-xml/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/core-xml/dist/browser/xml.common.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/browser/xml.common.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XML_ATTRKEY: () => (/* binding */ XML_ATTRKEY),\n/* harmony export */   XML_CHARKEY: () => (/* binding */ XML_CHARKEY)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/**\n * Default key used to access the XML attributes.\n */\nconst XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nconst XML_CHARKEY = \"_\";\n//# sourceMappingURL=xml.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-xml/dist/browser/xml.common.js?");

/***/ }),

/***/ "./node_modules/@azure/core-xml/dist/browser/xml.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/core-xml/dist/browser/xml.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseXML: () => (/* binding */ parseXML),\n/* harmony export */   stringifyXML: () => (/* binding */ stringifyXML)\n/* harmony export */ });\n/* harmony import */ var _xml_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xml.common.js */ \"./node_modules/@azure/core-xml/dist/browser/xml.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/// <reference lib=\"dom\"/>\n\nif (!document || !DOMParser || !Node || !XMLSerializer) {\n    throw new Error(`This library depends on the following DOM objects: [\"document\", \"DOMParser\", \"Node\", \"XMLSerializer\"] to parse XML, but some of these are undefined. You may provide a polyfill to make these globally available in order to support your environment. For more information, please refer to https://aka.ms/azsdk/js/web-workers. `);\n}\n// Policy to make our code Trusted Types compliant at running time.\n//   https://github.com/w3c/webappsec-trusted-types\n// We are calling DOMParser.parseFromString() to parse XML payload from Azure services.\n// The parsed DOM object is not exposed to outside. Scripts are disabled when parsing\n// according to the spec.  There are no HTML/XSS security concerns on the usage of\n// parseFromString() here.\nlet ttPolicy;\ntry {\n    if (typeof self.trustedTypes !== \"undefined\") {\n        ttPolicy = self.trustedTypes.createPolicy(\"@azure/core-xml#xml.browser\", {\n            createHTML: (s) => s,\n        });\n    }\n}\ncatch (e) {\n    console.warn('Could not create trusted types policy \"@azure/core-xml#xml.browser\"');\n}\nconst doc = document.implementation.createDocument(null, null, null);\nconst parser = new DOMParser();\nfunction parseXML(str, opts = {}) {\n    var _a, _b, _c, _d, _e, _f;\n    try {\n        const updatedOptions = {\n            rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : \"\",\n            includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,\n            xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n            cdataPropName: (_d = opts.cdataPropName) !== null && _d !== void 0 ? _d : \"__cdata\",\n            stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : [],\n        };\n        const dom = parser.parseFromString(((_f = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(str)) !== null && _f !== void 0 ? _f : str), \"application/xml\");\n        throwIfError(dom);\n        let obj;\n        if (updatedOptions.includeRoot) {\n            obj = domToObject(dom, updatedOptions);\n        }\n        else {\n            obj = domToObject(dom.childNodes[0], updatedOptions);\n        }\n        return Promise.resolve(obj);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\nlet errorNS;\nfunction getErrorNamespace() {\n    var _a, _b;\n    if (errorNS === undefined) {\n        try {\n            const invalidXML = ((_a = ttPolicy === null || ttPolicy === void 0 ? void 0 : ttPolicy.createHTML(\"INVALID\")) !== null && _a !== void 0 ? _a : \"INVALID\");\n            errorNS =\n                (_b = parser.parseFromString(invalidXML, \"text/xml\").getElementsByTagName(\"parsererror\")[0]\n                    .namespaceURI) !== null && _b !== void 0 ? _b : \"\";\n        }\n        catch (ignored) {\n            // Most browsers will return a document containing <parsererror>, but IE will throw.\n            errorNS = \"\";\n        }\n    }\n    return errorNS;\n}\nfunction throwIfError(dom) {\n    const parserErrors = dom.getElementsByTagName(\"parsererror\");\n    if (parserErrors.length > 0 && getErrorNamespace()) {\n        for (let i = 0; i < parserErrors.length; i++) {\n            if (parserErrors[i].namespaceURI === errorNS) {\n                throw new Error(parserErrors[i].innerHTML);\n            }\n        }\n    }\n}\nfunction isElement(node) {\n    return !!node.attributes;\n}\n/**\n * Get the Element-typed version of the provided Node if the provided node is an element with\n * attributes. If it isn't, then undefined is returned.\n */\nfunction asElementWithAttributes(node) {\n    return isElement(node) && node.hasAttributes() ? node : undefined;\n}\nfunction domToObject(node, options) {\n    var _a;\n    let result = {};\n    const childNodeCount = node.childNodes.length;\n    const firstChildNode = node.childNodes[0];\n    const onlyChildTextValue = (firstChildNode &&\n        childNodeCount === 1 &&\n        firstChildNode.nodeType === Node.TEXT_NODE &&\n        firstChildNode.nodeValue) ||\n        undefined;\n    const elementWithAttributes = asElementWithAttributes(node);\n    if (elementWithAttributes) {\n        result[_xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY] = {};\n        for (let i = 0; i < elementWithAttributes.attributes.length; i++) {\n            const attr = elementWithAttributes.attributes[i];\n            result[_xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY][attr.nodeName] = attr.nodeValue;\n        }\n        if (onlyChildTextValue) {\n            result[options.xmlCharKey] = onlyChildTextValue;\n        }\n    }\n    else if (childNodeCount === 0) {\n        result = \"\";\n    }\n    else if (onlyChildTextValue) {\n        result = onlyChildTextValue;\n    }\n    if (!onlyChildTextValue) {\n        for (let i = 0; i < childNodeCount; i++) {\n            const child = node.childNodes[i];\n            // Check if CData\n            if ((child === null || child === void 0 ? void 0 : child.nodeType) === Node.CDATA_SECTION_NODE) {\n                // Already in the CDATA\n                result = child.textContent;\n            }\n            else if (((_a = child === null || child === void 0 ? void 0 : child.firstChild) === null || _a === void 0 ? void 0 : _a.nodeType) === Node.CDATA_SECTION_NODE) {\n                // Look if child is CDATA\n                result[child.nodeName] = child.textContent;\n            }\n            else if (child.nodeType !== Node.TEXT_NODE) {\n                // Ignore leading/trailing whitespace nodes\n                const childObject = domToObject(child, options);\n                if (!result[child.nodeName]) {\n                    result[child.nodeName] = childObject;\n                }\n                else if (Array.isArray(result[child.nodeName])) {\n                    result[child.nodeName].push(childObject);\n                }\n                else {\n                    result[child.nodeName] = [result[child.nodeName], childObject];\n                }\n            }\n        }\n    }\n    return result;\n}\nconst serializer = new XMLSerializer();\nfunction stringifyXML(content, opts = {}) {\n    var _a, _b, _c, _d, _e;\n    const updatedOptions = {\n        rootName: (_a = opts.rootName) !== null && _a !== void 0 ? _a : \"root\",\n        includeRoot: (_b = opts.includeRoot) !== null && _b !== void 0 ? _b : false,\n        xmlCharKey: (_c = opts.xmlCharKey) !== null && _c !== void 0 ? _c : _xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_CHARKEY,\n        cdataPropName: (_d = opts.cdataPropName) !== null && _d !== void 0 ? _d : \"__cdata\",\n        stopNodes: (_e = opts.stopNodes) !== null && _e !== void 0 ? _e : [],\n    };\n    const dom = buildNode(content, updatedOptions.rootName, updatedOptions)[0];\n    return ('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' +\n        serializer.serializeToString(dom).replace(/ xmlns=\"\"/g, \"\"));\n}\nfunction buildAttributes(attrs) {\n    const result = [];\n    for (const key of Object.keys(attrs)) {\n        const attr = doc.createAttribute(key);\n        attr.value = attrs[key].toString();\n        result.push(attr);\n    }\n    return result;\n}\nfunction buildNode(obj, elementName, options) {\n    var _a;\n    if (obj === undefined ||\n        obj === null ||\n        typeof obj === \"string\" ||\n        typeof obj === \"number\" ||\n        typeof obj === \"boolean\") {\n        const elem = doc.createElement(elementName);\n        elem.textContent = obj === undefined || obj === null ? \"\" : obj.toString();\n        return [elem];\n    }\n    else if (Array.isArray(obj)) {\n        const result = [];\n        for (const arrayElem of obj) {\n            for (const child of buildNode(arrayElem, elementName, options)) {\n                result.push(child);\n            }\n        }\n        return result;\n    }\n    else if (typeof obj === \"object\") {\n        let elem;\n        if ((_a = obj[_xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY]) === null || _a === void 0 ? void 0 : _a[\"xmlns\"]) {\n            elem = doc.createElementNS(obj[_xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY][\"xmlns\"], elementName);\n        }\n        else {\n            elem = doc.createElement(elementName);\n        }\n        for (const key of Object.keys(obj)) {\n            if (key === _xml_common_js__WEBPACK_IMPORTED_MODULE_0__.XML_ATTRKEY) {\n                for (const attr of buildAttributes(obj[key])) {\n                    elem.attributes.setNamedItem(attr);\n                }\n            }\n            else if (key === options.xmlCharKey) {\n                elem.textContent = obj[key].toString();\n            }\n            else if (key === options.cdataPropName) {\n                const cdataElement = doc.createCDATASection(obj[key].toString());\n                elem.appendChild(cdataElement);\n            }\n            else {\n                for (const child of buildNode(obj[key], key, options)) {\n                    elem.appendChild(child);\n                }\n            }\n        }\n        return [elem];\n    }\n    else {\n        throw new Error(`Illegal value passed to buildObject: ${obj}`);\n    }\n}\n//# sourceMappingURL=xml-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/core-xml/dist/browser/xml.js?");

/***/ }),

/***/ "./node_modules/@azure/logger/dist/browser/debug.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/logger/dist/browser/debug.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _log_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.js */ \"./node_modules/@azure/logger/dist/browser/log.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ \"./node_modules/process/browser.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nlet enabledString;\nlet enabledNamespaces = [];\nlet skippedNamespaces = [];\nconst debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nconst debugObj = Object.assign((namespace) => {\n    return createDebugger(namespace);\n}, {\n    enable,\n    enabled,\n    disable,\n    log: _log_js__WEBPACK_IMPORTED_MODULE_0__.log,\n});\nfunction enable(namespaces) {\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    const wildcard = /\\*/g;\n    const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n    for (const ns of namespaceList) {\n        if (ns.startsWith(\"-\")) {\n            skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n        }\n        else {\n            enabledNamespaces.push(new RegExp(`^${ns}$`));\n        }\n    }\n    for (const instance of debuggers) {\n        instance.enabled = enabled(instance.namespace);\n    }\n}\nfunction enabled(namespace) {\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    for (const skipped of skippedNamespaces) {\n        if (skipped.test(namespace)) {\n            return false;\n        }\n    }\n    for (const enabledNamespace of enabledNamespaces) {\n        if (enabledNamespace.test(namespace)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction disable() {\n    const result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    const newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy,\n        log: debugObj.log,\n        namespace,\n        extend,\n    });\n    function debug(...args) {\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = `${namespace} ${args[0]}`;\n        }\n        newDebugger.log(...args);\n    }\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    const index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (debugObj);\n//# sourceMappingURL=debug.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/logger/dist/browser/debug.js?");

/***/ }),

/***/ "./node_modules/@azure/logger/dist/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@azure/logger/dist/browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureLogger: () => (/* binding */ AzureLogger),\n/* harmony export */   createClientLogger: () => (/* binding */ createClientLogger),\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _debug_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./debug.js */ \"./node_modules/@azure/logger/dist/browser/debug.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process/browser.js */ \"./node_modules/process/browser.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst registeredLoggers = new Set();\nconst logLevelFromEnv = (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\nlet azureLogLevel;\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nconst AzureLogger = (0,_debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"azure\");\nAzureLogger.log = (...args) => {\n    _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].log(...args);\n};\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\nif (logLevelFromEnv) {\n    // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n    if (isAzureLogLevel(logLevelFromEnv)) {\n        setLogLevel(logLevelFromEnv);\n    }\n    else {\n        console.error(`AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\", \")}.`);\n    }\n}\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nfunction setLogLevel(level) {\n    if (level && !isAzureLogLevel(level)) {\n        throw new Error(`Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`);\n    }\n    azureLogLevel = level;\n    const enabledNamespaces = [];\n    for (const logger of registeredLoggers) {\n        if (shouldEnable(logger)) {\n            enabledNamespaces.push(logger.namespace);\n        }\n    }\n    _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].enable(enabledNamespaces.join(\",\"));\n}\n/**\n * Retrieves the currently specified log level.\n */\nfunction getLogLevel() {\n    return azureLogLevel;\n}\nconst levelMap = {\n    verbose: 400,\n    info: 300,\n    warning: 200,\n    error: 100,\n};\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nfunction createClientLogger(namespace) {\n    const clientRootLogger = AzureLogger.extend(namespace);\n    patchLogMethod(AzureLogger, clientRootLogger);\n    return {\n        error: createLogger(clientRootLogger, \"error\"),\n        warning: createLogger(clientRootLogger, \"warning\"),\n        info: createLogger(clientRootLogger, \"info\"),\n        verbose: createLogger(clientRootLogger, \"verbose\"),\n    };\n}\nfunction patchLogMethod(parent, child) {\n    child.log = (...args) => {\n        parent.log(...args);\n    };\n}\nfunction createLogger(parent, level) {\n    const logger = Object.assign(parent.extend(level), {\n        level,\n    });\n    patchLogMethod(parent, logger);\n    if (shouldEnable(logger)) {\n        const enabledNamespaces = _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].disable();\n        _debug_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].enable(enabledNamespaces + \",\" + logger.namespace);\n    }\n    registeredLoggers.add(logger);\n    return logger;\n}\nfunction shouldEnable(logger) {\n    return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\nfunction isAzureLogLevel(logLevel) {\n    return AZURE_LOG_LEVELS.includes(logLevel);\n}\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/logger/dist/browser/index.js?");

/***/ }),

/***/ "./node_modules/@azure/logger/dist/browser/log.common.js":
/*!***************************************************************!*\
  !*** ./node_modules/@azure/logger/dist/browser/log.common.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   log: () => (/* binding */ log)\n/* harmony export */ });\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nfunction log(...args) {\n    if (args.length > 0) {\n        const firstArg = String(args[0]);\n        if (firstArg.includes(\":error\")) {\n            console.error(...args);\n        }\n        else if (firstArg.includes(\":warning\")) {\n            console.warn(...args);\n        }\n        else if (firstArg.includes(\":info\")) {\n            console.info(...args);\n        }\n        else if (firstArg.includes(\":verbose\")) {\n            console.debug(...args);\n        }\n        else {\n            console.debug(...args);\n        }\n    }\n}\n//# sourceMappingURL=log.common.js.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/logger/dist/browser/log.common.js?");

/***/ }),

/***/ "./node_modules/@azure/logger/dist/browser/log.js":
/*!********************************************************!*\
  !*** ./node_modules/@azure/logger/dist/browser/log.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   log: () => (/* reexport safe */ _log_common_js__WEBPACK_IMPORTED_MODULE_0__.log)\n/* harmony export */ });\n/* harmony import */ var _log_common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log.common.js */ \"./node_modules/@azure/logger/dist/browser/log.common.js\");\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n//# sourceMappingURL=log-browser.mjs.map\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/@azure/logger/dist/browser/log.js?");

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.mjs":
/*!******************************************!*\
  !*** ./node_modules/tslib/tslib.es6.mjs ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __addDisposableResource: () => (/* binding */ __addDisposableResource),\n/* harmony export */   __assign: () => (/* binding */ __assign),\n/* harmony export */   __asyncDelegator: () => (/* binding */ __asyncDelegator),\n/* harmony export */   __asyncGenerator: () => (/* binding */ __asyncGenerator),\n/* harmony export */   __asyncValues: () => (/* binding */ __asyncValues),\n/* harmony export */   __await: () => (/* binding */ __await),\n/* harmony export */   __awaiter: () => (/* binding */ __awaiter),\n/* harmony export */   __classPrivateFieldGet: () => (/* binding */ __classPrivateFieldGet),\n/* harmony export */   __classPrivateFieldIn: () => (/* binding */ __classPrivateFieldIn),\n/* harmony export */   __classPrivateFieldSet: () => (/* binding */ __classPrivateFieldSet),\n/* harmony export */   __createBinding: () => (/* binding */ __createBinding),\n/* harmony export */   __decorate: () => (/* binding */ __decorate),\n/* harmony export */   __disposeResources: () => (/* binding */ __disposeResources),\n/* harmony export */   __esDecorate: () => (/* binding */ __esDecorate),\n/* harmony export */   __exportStar: () => (/* binding */ __exportStar),\n/* harmony export */   __extends: () => (/* binding */ __extends),\n/* harmony export */   __generator: () => (/* binding */ __generator),\n/* harmony export */   __importDefault: () => (/* binding */ __importDefault),\n/* harmony export */   __importStar: () => (/* binding */ __importStar),\n/* harmony export */   __makeTemplateObject: () => (/* binding */ __makeTemplateObject),\n/* harmony export */   __metadata: () => (/* binding */ __metadata),\n/* harmony export */   __param: () => (/* binding */ __param),\n/* harmony export */   __propKey: () => (/* binding */ __propKey),\n/* harmony export */   __read: () => (/* binding */ __read),\n/* harmony export */   __rest: () => (/* binding */ __rest),\n/* harmony export */   __rewriteRelativeImportExtension: () => (/* binding */ __rewriteRelativeImportExtension),\n/* harmony export */   __runInitializers: () => (/* binding */ __runInitializers),\n/* harmony export */   __setFunctionName: () => (/* binding */ __setFunctionName),\n/* harmony export */   __spread: () => (/* binding */ __spread),\n/* harmony export */   __spreadArray: () => (/* binding */ __spreadArray),\n/* harmony export */   __spreadArrays: () => (/* binding */ __spreadArrays),\n/* harmony export */   __values: () => (/* binding */ __values),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nfunction __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nfunction __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nfunction __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nfunction __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nfunction __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nvar __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nfunction __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nfunction __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nfunction __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nfunction __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nfunction __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nfunction __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nfunction __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nfunction __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nfunction __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nfunction __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n});\n\n\n//# sourceURL=webpack://phpbb-blobuploader/./node_modules/tslib/tslib.es6.mjs?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./tig/blobuploader/styles/prosilver/template/js/index.js");
/******/ 	
/******/ })()
;